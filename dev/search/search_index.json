{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>      ro.py is an asynchronous, object-oriented wrapper for the Roblox web API. </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy: ro.py's client-based model is intuitive and easy to learn.    It abstracts away API requests and leaves you with simple objects that represent data on the Roblox platform.</li> <li>Asynchronous: ro.py works well with asynchronous frameworks like FastAPI and  discord.py.  </li> <li>Flexible: ro.py's Requests object allows you to extend ro.py beyond what we've already implemented.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the latest stable version of ro.py, run the following command: <pre><code>python3 -m pip install roblox\n</code></pre></p> <p>To install the latest unstable version of ro.py, install git-scm and run the following: <pre><code>python3 -m pip install git+https://github.com/ro-py/ro.py.git\n</code></pre></p>"},{"location":"#support","title":"Support","text":"<p>The RoAPI Discord server provides support for ro.py in the <code>#ro.py-support</code> channel.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>account</li> <li>assets</li> <li>badges</li> <li>bases<ul> <li>baseasset</li> <li>basebadge</li> <li>baseconversation</li> <li>basegamepass</li> <li>basegroup</li> <li>baseinstance</li> <li>baseitem</li> <li>basejob</li> <li>baseplace</li> <li>baseplugin</li> <li>baserobloxbadge</li> <li>baserole</li> <li>basesociallink</li> <li>baseuniverse</li> <li>baseuser</li> </ul> </li> <li>chat</li> <li>client</li> <li>conversations</li> <li>creatortype</li> <li>delivery</li> <li>friends</li> <li>gamepasses</li> <li>groups</li> <li>instances</li> <li>jobs</li> <li>members</li> <li>partials<ul> <li>partialbadge</li> <li>partialgroup</li> <li>partialrole</li> <li>partialuniverse</li> <li>partialuser</li> </ul> </li> <li>places</li> <li>plugins</li> <li>presence</li> <li>promotionchannels</li> <li>resale</li> <li>robloxbadges</li> <li>roles</li> <li>shout</li> <li>sociallinks</li> <li>threedthumbnails</li> <li>thumbnails</li> <li>universes</li> <li>users</li> <li>utilities<ul> <li>exceptions</li> <li>iterators</li> <li>requests</li> <li>types</li> <li>url</li> </ul> </li> <li>wall</li> </ul>"},{"location":"reference/account/","title":"account","text":"<p>Contains classes and functions related to the authenticated Roblox account. Not to be confused with users.py or the Account system.</p>"},{"location":"reference/account/#roblox.account.AccountProvider","title":"<code>AccountProvider</code>","text":"<p>Provides methods that control the authenticated user's account.</p> Source code in <code>roblox/account.py</code> <pre><code>class AccountProvider:\n    \"\"\"\n    Provides methods that control the authenticated user's account.\n    \"\"\"\n\n    def __init__(self, client: Client):\n        \"\"\"\n        Arguments:\n            client: The Client to be used when getting information on an account.\n        \"\"\"\n        self._client: Client = client\n\n    async def get_birthday(self) -&gt; date:\n        \"\"\"\n        Gets the authenticated user's birthday.\n\n        Returns: \n            The authenticated user's birthday.\n        \"\"\"\n        birthday_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"accountinformation\", \"v1/birthdate\")\n        )\n        birthday_data = birthday_response.json()\n        return date(\n            month=birthday_data[\"birthMonth\"],\n            day=birthday_data[\"birthDay\"],\n            year=birthday_data[\"birthYear\"]\n        )\n\n    async def set_birthday(\n            self,\n            birthday: date,\n            password: str = None\n    ):\n        \"\"\"\n        Changes the authenticated user's birthday.\n        This endpoint *may* require your password, and requires an unlocked PIN.\n\n        Arguments:\n            birthday: A date object that represents the birthday to update the Client's account to.\n            password: The password to the Client's account, this is required when changing the birthday.\n        \"\"\"\n        await self._client.requests.post(\n            url=self._client.url_generator.get_url(\"accountinformation\", \"v1/birthdate\"),\n            json={\n                \"birthMonth\": birthday.month,\n                \"birthDay\": birthday.day,\n                \"birthYear\": birthday.year,\n                \"password\": password\n            }\n        )\n\n    async def get_description(self) -&gt; string:\n        \"\"\"\n        Gets the authenticated user's description.\n\n        Returns: \n            The authenticated user's description.\n        \"\"\"\n        description_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"accountinformation\", \"v1/description\")\n        )\n        description_data = description_response.json()\n        return description_data[\"description\"]\n\n    async def set_description(\n            self,\n            description: string,\n    ):\n        \"\"\"\n        Updates the authenticated user's description.\n        This endpoint *may* require your token, and requires an unlocked PIN.\n\n        Arguments:\n            description: A string object that represents the description to update the Client's account to.\n        \"\"\"\n        await self._client.requests.post(\n            url=self._client.url_generator.get_url(\"accountinformation\", \"v1/description\"),\n            json={\n                \"description\": description\n            }\n        )\n</code></pre>"},{"location":"reference/account/#roblox.account.AccountProvider.__init__","title":"<code>__init__(client)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client to be used when getting information on an account.</p> required Source code in <code>roblox/account.py</code> <pre><code>def __init__(self, client: Client):\n    \"\"\"\n    Arguments:\n        client: The Client to be used when getting information on an account.\n    \"\"\"\n    self._client: Client = client\n</code></pre>"},{"location":"reference/account/#roblox.account.AccountProvider.get_birthday","title":"<code>get_birthday()</code>  <code>async</code>","text":"<p>Gets the authenticated user's birthday.</p> <p>Returns:</p> Type Description <code>date</code> <p>The authenticated user's birthday.</p> Source code in <code>roblox/account.py</code> <pre><code>async def get_birthday(self) -&gt; date:\n    \"\"\"\n    Gets the authenticated user's birthday.\n\n    Returns: \n        The authenticated user's birthday.\n    \"\"\"\n    birthday_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"accountinformation\", \"v1/birthdate\")\n    )\n    birthday_data = birthday_response.json()\n    return date(\n        month=birthday_data[\"birthMonth\"],\n        day=birthday_data[\"birthDay\"],\n        year=birthday_data[\"birthYear\"]\n    )\n</code></pre>"},{"location":"reference/account/#roblox.account.AccountProvider.get_description","title":"<code>get_description()</code>  <code>async</code>","text":"<p>Gets the authenticated user's description.</p> <p>Returns:</p> Type Description <code>string</code> <p>The authenticated user's description.</p> Source code in <code>roblox/account.py</code> <pre><code>async def get_description(self) -&gt; string:\n    \"\"\"\n    Gets the authenticated user's description.\n\n    Returns: \n        The authenticated user's description.\n    \"\"\"\n    description_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"accountinformation\", \"v1/description\")\n    )\n    description_data = description_response.json()\n    return description_data[\"description\"]\n</code></pre>"},{"location":"reference/account/#roblox.account.AccountProvider.set_birthday","title":"<code>set_birthday(birthday, password=None)</code>  <code>async</code>","text":"<p>Changes the authenticated user's birthday. This endpoint may require your password, and requires an unlocked PIN.</p> <p>Parameters:</p> Name Type Description Default <code>birthday</code> <code>date</code> <p>A date object that represents the birthday to update the Client's account to.</p> required <code>password</code> <code>str</code> <p>The password to the Client's account, this is required when changing the birthday.</p> <code>None</code> Source code in <code>roblox/account.py</code> <pre><code>async def set_birthday(\n        self,\n        birthday: date,\n        password: str = None\n):\n    \"\"\"\n    Changes the authenticated user's birthday.\n    This endpoint *may* require your password, and requires an unlocked PIN.\n\n    Arguments:\n        birthday: A date object that represents the birthday to update the Client's account to.\n        password: The password to the Client's account, this is required when changing the birthday.\n    \"\"\"\n    await self._client.requests.post(\n        url=self._client.url_generator.get_url(\"accountinformation\", \"v1/birthdate\"),\n        json={\n            \"birthMonth\": birthday.month,\n            \"birthDay\": birthday.day,\n            \"birthYear\": birthday.year,\n            \"password\": password\n        }\n    )\n</code></pre>"},{"location":"reference/account/#roblox.account.AccountProvider.set_description","title":"<code>set_description(description)</code>  <code>async</code>","text":"<p>Updates the authenticated user's description. This endpoint may require your token, and requires an unlocked PIN.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>string</code> <p>A string object that represents the description to update the Client's account to.</p> required Source code in <code>roblox/account.py</code> <pre><code>async def set_description(\n        self,\n        description: string,\n):\n    \"\"\"\n    Updates the authenticated user's description.\n    This endpoint *may* require your token, and requires an unlocked PIN.\n\n    Arguments:\n        description: A string object that represents the description to update the Client's account to.\n    \"\"\"\n    await self._client.requests.post(\n        url=self._client.url_generator.get_url(\"accountinformation\", \"v1/description\"),\n        json={\n            \"description\": description\n        }\n    )\n</code></pre>"},{"location":"reference/assets/","title":"assets","text":"<p>This module contains classes intended to parse and deal with data from Roblox asset information endpoints.</p>"},{"location":"reference/assets/#roblox.assets.AssetType","title":"<code>AssetType</code>","text":"<p>Represents a Roblox asset type.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Id of the Asset</p> <code>name</code> <code>Optional[str]</code> <p>Name of the Asset</p> Source code in <code>roblox/assets.py</code> <pre><code>class AssetType:\n    \"\"\"\n    Represents a Roblox asset type.\n\n    Attributes:\n        id: Id of the Asset\n        name: Name of the Asset\n    \"\"\"\n\n    def __init__(self, type_id: int):\n        \"\"\"\n        Arguments:\n            type_id: The AssetTypeID to instantiate this AssetType object with.\n                     This is used to determine the name of the AssetType.\n        \"\"\"\n\n        self.id: int = type_id\n        self.name: Optional[str] = asset_type_names.get(type_id)\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} id={self.id} name={self.name!r}&gt;\"\n</code></pre>"},{"location":"reference/assets/#roblox.assets.AssetType.__init__","title":"<code>__init__(type_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>type_id</code> <code>int</code> <p>The AssetTypeID to instantiate this AssetType object with.      This is used to determine the name of the AssetType.</p> required Source code in <code>roblox/assets.py</code> <pre><code>def __init__(self, type_id: int):\n    \"\"\"\n    Arguments:\n        type_id: The AssetTypeID to instantiate this AssetType object with.\n                 This is used to determine the name of the AssetType.\n    \"\"\"\n\n    self.id: int = type_id\n    self.name: Optional[str] = asset_type_names.get(type_id)\n</code></pre>"},{"location":"reference/assets/#roblox.assets.EconomyAsset","title":"<code>EconomyAsset</code>","text":"<p>             Bases: <code>BaseAsset</code></p> <p>Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Id of the Asset</p> <code>product_id</code> <code>int</code> <p>Product id of the asset</p> <code>name</code> <code>str</code> <p>Name of the Asset</p> <code>description</code> <code>str</code> <p>Description of the Asset</p> <code>type</code> <code>AssetType</code> <p>Type of the Asset</p> <code>creator_type</code> <code>CreatorType</code> <p>Type of creator can be user or group see enum</p> <code>creator</code> <code>Union[PartialUser, AssetPartialGroup]</code> <p>creator can be a user or group object</p> <code>icon_image</code> <code>BaseAsset</code> <p>BaseAsset</p> <code>created</code> <code>datetime</code> <p>When the asset was created</p> <code>updated</code> <code>datetime</code> <p>When the asset was updated for the las time</p> <code>price</code> <code>Optional[int]</code> <p>price of the asset</p> <code>sales</code> <code>int</code> <p>amount of sales of the asset</p> <code>is_new</code> <code>bool</code> <p>if the asset it new</p> <code>is_for_sale</code> <code>bool</code> <p>if the asset is for sale</p> <code>is_public_domain</code> <code>bool</code> <p>if the asset is public domain</p> <code>is_limited</code> <code>bool</code> <p>if the asset is a limited item</p> <code>is_limited_unique</code> <code>bool</code> <p>if the asset is a unique limited item</p> <code>remaining</code> <code>Optional[int]</code> <p>How many items there are remaining if it is limited</p> <code>minimum_membership_level</code> <code>int</code> <p>Minimum membership level required to buy item</p> <code>content_rating_type_id</code> <code>int</code> <p>Unknown</p> <code>sale_availability_locations</code> <p>Unknown</p> Source code in <code>roblox/assets.py</code> <pre><code>class EconomyAsset(BaseAsset):\n    \"\"\"\n    Represents a Roblox asset.\n    It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details.\n\n    Attributes:\n        id: Id of the Asset\n        product_id: Product id of the asset\n        name: Name of the Asset\n        description: Description of the Asset\n        type: Type of the Asset\n        creator_type: Type of creator can be user or group see enum\n        creator: creator can be a user or group object\n        icon_image: BaseAsset\n        created: When the asset was created\n        updated:  When the asset was updated for the las time\n        price: price of the asset\n        sales: amount of sales of the asset\n        is_new: if the asset it new\n        is_for_sale: if the asset is for sale\n        is_public_domain: if the asset is public domain\n        is_limited: if the asset is a limited item\n        is_limited_unique: if the asset is a unique limited item\n        remaining: How many items there are remaining if it is limited\n        minimum_membership_level: Minimum membership level required to buy item\n        content_rating_type_id: Unknown\n        sale_availability_locations: Unknown\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client to be used when getting information on assets.\n            data: The data from the request.\n        \"\"\"\n        super().__init__(client=client, asset_id=data[\"AssetId\"])\n\n        self.product_type: Optional[str] = data[\"ProductType\"]\n        self.id: int = data[\"AssetId\"]\n        self.product_id: int = data[\"ProductId\"]  # TODO: make this a BaseProduct\n        self.name: str = data[\"Name\"]\n        self.description: str = data[\"Description\"]\n        self.type: AssetType = AssetType(type_id=data[\"AssetTypeId\"])\n\n        self.creator_type: CreatorType = CreatorType(data[\"Creator\"][\"CreatorType\"])\n        self.creator: Union[PartialUser, AssetPartialGroup]\n\n        if self.creator_type == CreatorType.user:\n            self.creator: PartialUser = PartialUser(client=client, data=data[\"Creator\"])\n        elif self.creator_type == CreatorType.group:\n            self.creator: AssetPartialGroup = AssetPartialGroup(client=client, data=data[\"Creator\"])\n\n        self.icon_image: BaseAsset = BaseAsset(client=client, asset_id=data[\"IconImageAssetId\"])\n\n        self.created: datetime = parse(data[\"Created\"])\n        self.updated: datetime = parse(data[\"Updated\"])\n\n        self.price: Optional[int] = data[\"PriceInRobux\"]\n        self.sales: int = data[\"Sales\"]\n\n        self.is_new: bool = data[\"IsNew\"]\n        self.is_for_sale: bool = data[\"IsForSale\"]\n        self.is_public_domain: bool = data[\"IsPublicDomain\"]\n        self.is_limited: bool = data[\"IsLimited\"]\n        self.is_limited_unique: bool = data[\"IsLimitedUnique\"]\n\n        self.remaining: Optional[int] = data[\"Remaining\"]\n\n        self.minimum_membership_level: int = data[\"MinimumMembershipLevel\"]\n        self.content_rating_type_id: int = data[\"ContentRatingTypeId\"]\n        self.sale_availability_locations = data[\"SaleAvailabilityLocations\"]\n</code></pre>"},{"location":"reference/assets/#roblox.assets.EconomyAsset.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client to be used when getting information on assets.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/assets.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client to be used when getting information on assets.\n        data: The data from the request.\n    \"\"\"\n    super().__init__(client=client, asset_id=data[\"AssetId\"])\n\n    self.product_type: Optional[str] = data[\"ProductType\"]\n    self.id: int = data[\"AssetId\"]\n    self.product_id: int = data[\"ProductId\"]  # TODO: make this a BaseProduct\n    self.name: str = data[\"Name\"]\n    self.description: str = data[\"Description\"]\n    self.type: AssetType = AssetType(type_id=data[\"AssetTypeId\"])\n\n    self.creator_type: CreatorType = CreatorType(data[\"Creator\"][\"CreatorType\"])\n    self.creator: Union[PartialUser, AssetPartialGroup]\n\n    if self.creator_type == CreatorType.user:\n        self.creator: PartialUser = PartialUser(client=client, data=data[\"Creator\"])\n    elif self.creator_type == CreatorType.group:\n        self.creator: AssetPartialGroup = AssetPartialGroup(client=client, data=data[\"Creator\"])\n\n    self.icon_image: BaseAsset = BaseAsset(client=client, asset_id=data[\"IconImageAssetId\"])\n\n    self.created: datetime = parse(data[\"Created\"])\n    self.updated: datetime = parse(data[\"Updated\"])\n\n    self.price: Optional[int] = data[\"PriceInRobux\"]\n    self.sales: int = data[\"Sales\"]\n\n    self.is_new: bool = data[\"IsNew\"]\n    self.is_for_sale: bool = data[\"IsForSale\"]\n    self.is_public_domain: bool = data[\"IsPublicDomain\"]\n    self.is_limited: bool = data[\"IsLimited\"]\n    self.is_limited_unique: bool = data[\"IsLimitedUnique\"]\n\n    self.remaining: Optional[int] = data[\"Remaining\"]\n\n    self.minimum_membership_level: int = data[\"MinimumMembershipLevel\"]\n    self.content_rating_type_id: int = data[\"ContentRatingTypeId\"]\n    self.sale_availability_locations = data[\"SaleAvailabilityLocations\"]\n</code></pre>"},{"location":"reference/badges/","title":"badges","text":"<p>This module contains classes intended to parse and deal with data from Roblox badge information endpoints.</p>"},{"location":"reference/badges/#roblox.badges.Badge","title":"<code>Badge</code>","text":"<p>             Bases: <code>BaseBadge</code></p> <p>Represents a badge from the API.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The badge Id.</p> <code>name</code> <code>str</code> <p>The name of the badge.</p> <code>description</code> <code>str</code> <p>The badge description.</p> <code>display_name</code> <code>str</code> <p>The localized name of the badge.</p> <code>display_description</code> <code>str</code> <p>The localized badge description.</p> <code>enabled</code> <code>bool</code> <p>Whether or not the badge is enabled.</p> <code>icon</code> <code>BaseAsset</code> <p>The badge icon.</p> <code>display_icon</code> <code>BaseAsset</code> <p>The localized badge icon.</p> <code>created</code> <code>datetime</code> <p>When the badge was created.</p> <code>updated</code> <code>datetime</code> <p>When the badge was updated.</p> <code>statistics</code> <code>BadgeStatistics</code> <p>Badge award statistics.</p> <code>awarding_universe</code> <code>PartialUniverse</code> <p>The universe the badge is being awarded from.</p> Source code in <code>roblox/badges.py</code> <pre><code>class Badge(BaseBadge):\n    \"\"\"\n    Represents a badge from the API.\n\n    Attributes:\n        id: The badge Id.\n        name: The name of the badge.\n        description: The badge description.\n        display_name: The localized name of the badge.\n        display_description: The localized badge description.\n        enabled: Whether or not the badge is enabled.\n        icon: The badge icon.\n        display_icon: The localized badge icon.\n        created: When the badge was created.\n        updated: When the badge was updated.\n        statistics: Badge award statistics.\n        awarding_universe: The universe the badge is being awarded from.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client to be used when getting information on badges.\n            data: The data from the endpoint.\n        \"\"\"\n        self.id: int = data[\"id\"]\n\n        super().__init__(client=client, badge_id=self.id)\n\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.display_name: str = data[\"displayName\"]\n        self.display_description: str = data[\"displayDescription\"]\n        self.enabled: bool = data[\"enabled\"]\n        self.icon: BaseAsset = BaseAsset(client=client, asset_id=data[\"iconImageId\"])\n        self.display_icon: BaseAsset = BaseAsset(client=client, asset_id=data[\"displayIconImageId\"])\n        self.created: datetime = parse(data[\"created\"])\n        self.updated: datetime = parse(data[\"updated\"])\n\n        self.statistics: BadgeStatistics = BadgeStatistics(data=data[\"statistics\"])\n        self.awarding_universe: PartialUniverse = PartialUniverse(client=client, data=data[\"awardingUniverse\"])\n</code></pre>"},{"location":"reference/badges/#roblox.badges.Badge.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client to be used when getting information on badges.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/badges.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client to be used when getting information on badges.\n        data: The data from the endpoint.\n    \"\"\"\n    self.id: int = data[\"id\"]\n\n    super().__init__(client=client, badge_id=self.id)\n\n    self.name: str = data[\"name\"]\n    self.description: str = data[\"description\"]\n    self.display_name: str = data[\"displayName\"]\n    self.display_description: str = data[\"displayDescription\"]\n    self.enabled: bool = data[\"enabled\"]\n    self.icon: BaseAsset = BaseAsset(client=client, asset_id=data[\"iconImageId\"])\n    self.display_icon: BaseAsset = BaseAsset(client=client, asset_id=data[\"displayIconImageId\"])\n    self.created: datetime = parse(data[\"created\"])\n    self.updated: datetime = parse(data[\"updated\"])\n\n    self.statistics: BadgeStatistics = BadgeStatistics(data=data[\"statistics\"])\n    self.awarding_universe: PartialUniverse = PartialUniverse(client=client, data=data[\"awardingUniverse\"])\n</code></pre>"},{"location":"reference/badges/#roblox.badges.BadgeStatistics","title":"<code>BadgeStatistics</code>","text":"<p>Attributes:</p> Name Type Description <code>past_day_awarded_count</code> <code>int</code> <p>How many instances of this badge were awarded in the last day.</p> <code>awarded_count</code> <code>int</code> <p>How many instances of this badge have been awarded.</p> <code>win_rate_percentage</code> <code>int</code> <p>Percentage of players who have joined the parent universe have been awarded this badge.</p> Source code in <code>roblox/badges.py</code> <pre><code>class BadgeStatistics:\n    \"\"\"\n    Attributes:\n        past_day_awarded_count: How many instances of this badge were awarded in the last day.\n        awarded_count: How many instances of this badge have been awarded.\n        win_rate_percentage: Percentage of players who have joined the parent universe have been awarded this badge.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        \"\"\"\n        Arguments:\n            data: The raw input data.\n        \"\"\"\n        self.past_day_awarded_count: int = data[\"pastDayAwardedCount\"]\n        self.awarded_count: int = data[\"awardedCount\"]\n        self.win_rate_percentage: int = data[\"winRatePercentage\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} past_day_awarded_count={self.past_day_awarded_count} awarded_count={self.awarded_count} win_rate_percentage={self.win_rate_percentage}&gt;\"\n</code></pre>"},{"location":"reference/badges/#roblox.badges.BadgeStatistics.__init__","title":"<code>__init__(data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The raw input data.</p> required Source code in <code>roblox/badges.py</code> <pre><code>def __init__(self, data: dict):\n    \"\"\"\n    Arguments:\n        data: The raw input data.\n    \"\"\"\n    self.past_day_awarded_count: int = data[\"pastDayAwardedCount\"]\n    self.awarded_count: int = data[\"awardedCount\"]\n    self.win_rate_percentage: int = data[\"winRatePercentage\"]\n</code></pre>"},{"location":"reference/chat/","title":"chat","text":"<p>Contains classes relating to the Roblox chat.</p>"},{"location":"reference/chat/#roblox.chat.ChatProvider","title":"<code>ChatProvider</code>","text":"<p>Provides information and data related to the Roblox chat system.</p> Source code in <code>roblox/chat.py</code> <pre><code>class ChatProvider:\n    \"\"\"\n    Provides information and data related to the Roblox chat system.\n    \"\"\"\n\n    def __init__(self, client: Client):\n        \"\"\"\n        Arguments:\n            client: The Client for getting information about chat.\n        \"\"\"\n        self._client: Client = client\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__}&gt;\"\n\n    async def get_unread_conversation_count(self) -&gt; int:\n        \"\"\"\n        Gets the authenticated user's unread conversation count.\n\n        Returns: \n            The user's unread conversation count.\n        \"\"\"\n        unread_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"chat\", \"v2/get-unread-conversation-count\")\n        )\n        unread_data = unread_response.json()\n        return unread_data[\"count\"]\n\n    async def get_settings(self) -&gt; ChatSettings:\n        \"\"\"\n        Gets the authenticated user's chat settings.\n\n        Returns: \n            The user's chat settings.\n        \"\"\"\n        settings_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"chat\", \"v2/chat-settings\")\n        )\n        settings_data = settings_response.json()\n        return ChatSettings(data=settings_data)\n\n    def get_user_conversations(self) -&gt; PageNumberIterator:\n        \"\"\"\n        Gets the user's conversations.\n\n        Returns: \n            The user's conversations as a PageNumberIterator.\n        \"\"\"\n        return PageNumberIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"chat\", \"v2/get-user-conversations\"),\n            handler=lambda client, data: Conversation(client=client, data=data)\n        )\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatProvider.__init__","title":"<code>__init__(client)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client for getting information about chat.</p> required Source code in <code>roblox/chat.py</code> <pre><code>def __init__(self, client: Client):\n    \"\"\"\n    Arguments:\n        client: The Client for getting information about chat.\n    \"\"\"\n    self._client: Client = client\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatProvider.get_settings","title":"<code>get_settings()</code>  <code>async</code>","text":"<p>Gets the authenticated user's chat settings.</p> <p>Returns:</p> Type Description <code>ChatSettings</code> <p>The user's chat settings.</p> Source code in <code>roblox/chat.py</code> <pre><code>async def get_settings(self) -&gt; ChatSettings:\n    \"\"\"\n    Gets the authenticated user's chat settings.\n\n    Returns: \n        The user's chat settings.\n    \"\"\"\n    settings_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"chat\", \"v2/chat-settings\")\n    )\n    settings_data = settings_response.json()\n    return ChatSettings(data=settings_data)\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatProvider.get_unread_conversation_count","title":"<code>get_unread_conversation_count()</code>  <code>async</code>","text":"<p>Gets the authenticated user's unread conversation count.</p> <p>Returns:</p> Type Description <code>int</code> <p>The user's unread conversation count.</p> Source code in <code>roblox/chat.py</code> <pre><code>async def get_unread_conversation_count(self) -&gt; int:\n    \"\"\"\n    Gets the authenticated user's unread conversation count.\n\n    Returns: \n        The user's unread conversation count.\n    \"\"\"\n    unread_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"chat\", \"v2/get-unread-conversation-count\")\n    )\n    unread_data = unread_response.json()\n    return unread_data[\"count\"]\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatProvider.get_user_conversations","title":"<code>get_user_conversations()</code>","text":"<p>Gets the user's conversations.</p> <p>Returns:</p> Type Description <code>PageNumberIterator</code> <p>The user's conversations as a PageNumberIterator.</p> Source code in <code>roblox/chat.py</code> <pre><code>def get_user_conversations(self) -&gt; PageNumberIterator:\n    \"\"\"\n    Gets the user's conversations.\n\n    Returns: \n        The user's conversations as a PageNumberIterator.\n    \"\"\"\n    return PageNumberIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"chat\", \"v2/get-user-conversations\"),\n        handler=lambda client, data: Conversation(client=client, data=data)\n    )\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatSettings","title":"<code>ChatSettings</code>","text":"<p>Represents the authenticated user's Roblox chat settings.</p> <p>Attributes:</p> Name Type Description <code>chat_enabled</code> <code>bool</code> <p>Whether chat is enabled for the user.</p> <code>is_active_chat_user</code> <code>bool</code> <p>Whether the user is an active chat user. New accounts are active by default and become                  inactive if they do not send any messages over a period of time.</p> <code>is_connect_tab_enabled</code> <code>bool</code> <p>Whether the Connect tab is enabled for this user.</p> Source code in <code>roblox/chat.py</code> <pre><code>class ChatSettings:\n    \"\"\"\n    Represents the authenticated user's Roblox chat settings.\n\n    Attributes:\n        chat_enabled: Whether chat is enabled for the user.\n        is_active_chat_user: Whether the user is an active chat user. New accounts are active by default and become\n                             inactive if they do not send any messages over a period of time.\n        is_connect_tab_enabled: Whether the Connect tab is enabled for this user.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        \"\"\"\n        Arguments:\n            data: The raw input data.\n        \"\"\"\n        self.chat_enabled: bool = data[\"chatEnabled\"]\n        self.is_active_chat_user: bool = data[\"isActiveChatUser\"]\n        self.is_connect_tab_enabled: bool = data[\"isConnectTabEnabled\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} chat_enabled={self.chat_enabled} is_active_chat_user={self.is_active_chat_user} is_connect_tab_enabled={self.is_connect_tab_enabled}&gt;\"\n</code></pre>"},{"location":"reference/chat/#roblox.chat.ChatSettings.__init__","title":"<code>__init__(data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The raw input data.</p> required Source code in <code>roblox/chat.py</code> <pre><code>def __init__(self, data: dict):\n    \"\"\"\n    Arguments:\n        data: The raw input data.\n    \"\"\"\n    self.chat_enabled: bool = data[\"chatEnabled\"]\n    self.is_active_chat_user: bool = data[\"isActiveChatUser\"]\n    self.is_connect_tab_enabled: bool = data[\"isConnectTabEnabled\"]\n</code></pre>"},{"location":"reference/client/","title":"client","text":"<p>Contains the Client, which is the core object at the center of all ro.py applications.</p>"},{"location":"reference/client/#roblox.client.Client","title":"<code>Client</code>","text":"<p>Represents a Roblox client.</p> <p>Attributes:</p> Name Type Description <code>requests</code> <code>Requests</code> <p>The requests object, which is used to send requests to Roblox endpoints.</p> <code>url_generator</code> <code>URLGenerator</code> <p>The URL generator object, which is used to generate URLs to send requests to endpoints.</p> <code>presence</code> <code>PresenceProvider</code> <p>The presence provider object.</p> <code>thumbnails</code> <code>ThumbnailProvider</code> <p>The thumbnail provider object.</p> <code>delivery</code> <code>DeliveryProvider</code> <p>The delivery provider object.</p> <code>chat</code> <code>ChatProvider</code> <p>The chat provider object.</p> <code>account</code> <code>AccountProvider</code> <p>The account provider object.</p> Source code in <code>roblox/client.py</code> <pre><code>class Client:\n    \"\"\"\n    Represents a Roblox client.\n\n    Attributes:\n        requests: The requests object, which is used to send requests to Roblox endpoints.\n        url_generator: The URL generator object, which is used to generate URLs to send requests to endpoints.\n        presence: The presence provider object.\n        thumbnails: The thumbnail provider object.\n        delivery: The delivery provider object.\n        chat: The chat provider object.\n        account: The account provider object.\n    \"\"\"\n\n    def __init__(self, token: str = None, base_url: str = \"roblox.com\"):\n        \"\"\"\n        Arguments:\n            token: A .ROBLOSECURITY token to authenticate the client with.\n            base_url: The base URL to use when sending requests.\n        \"\"\"\n        self._url_generator: URLGenerator = URLGenerator(base_url=base_url)\n        self._requests: Requests = Requests()\n\n        self.url_generator: URLGenerator = self._url_generator\n        self.requests: Requests = self._requests\n\n        self.presence: PresenceProvider = PresenceProvider(client=self)\n        self.thumbnails: ThumbnailProvider = ThumbnailProvider(client=self)\n        self.delivery: DeliveryProvider = DeliveryProvider(client=self)\n        self.chat: ChatProvider = ChatProvider(client=self)\n        self.account: AccountProvider = AccountProvider(client=self)\n\n        if token:\n            self.set_token(token)\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__}&gt;\"\n\n    # Authentication\n    def set_token(self, token: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Authenticates the client with the passed .ROBLOSECURITY token.\n        This method does not send any requests and will not throw if the token is invalid.\n\n        Arguments:\n            token: A .ROBLOSECURITY token to authenticate the client with.\n\n        \"\"\"\n        self._requests.session.cookies[\".ROBLOSECURITY\"] = token\n\n    # Users\n    async def get_user(self, user_id: int) -&gt; User:\n        \"\"\"\n        Gets a user with the specified user ID.\n\n        Arguments:\n            user_id: A Roblox user ID.\n\n        Returns:\n            A user object.\n        \"\"\"\n        try:\n            user_response = await self._requests.get(\n                url=self.url_generator.get_url(\"users\", f\"v1/users/{user_id}\")\n            )\n        except NotFound as exception:\n            raise UserNotFound(\n                message=\"Invalid user.\",\n                response=exception.response\n            ) from None\n        user_data = user_response.json()\n        return User(client=self, data=user_data)\n\n    async def get_authenticated_user(\n            self, expand: bool = True\n    ) -&gt; Union[User, PartialUser]:\n        \"\"\"\n        Grabs the authenticated user.\n\n        Arguments:\n            expand: Whether to return a User (2 requests) rather than a PartialUser (1 request)\n\n        Returns:\n            The authenticated user.\n        \"\"\"\n        authenticated_user_response = await self._requests.get(\n            url=self._url_generator.get_url(\"users\", f\"v1/users/authenticated\")\n        )\n        authenticated_user_data = authenticated_user_response.json()\n\n        if expand:\n            return await self.get_user(authenticated_user_data[\"id\"])\n        else:\n            return PartialUser(client=self, data=authenticated_user_data)\n\n    async def get_users(\n            self,\n            user_ids: List[int],\n            exclude_banned_users: bool = False,\n            expand: bool = False,\n    ) -&gt; Union[List[PartialUser], List[User]]:\n        \"\"\"\n        Grabs a list of users corresponding to each user ID in the list.\n\n        Arguments:\n            user_ids: A list of Roblox user IDs.\n            exclude_banned_users: Whether to exclude banned users from the data.\n            expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request)\n\n        Returns:\n            A List of Users or partial users.\n        \"\"\"\n        users_response = await self._requests.post(\n            url=self._url_generator.get_url(\"users\", f\"v1/users\"),\n            json={\"userIds\": user_ids, \"excludeBannedUsers\": exclude_banned_users},\n        )\n        users_data = users_response.json()[\"data\"]\n\n        if expand:\n            return [await self.get_user(user_data[\"id\"]) for user_data in users_data]\n        else:\n            return [\n                PartialUser(client=self, data=user_data)\n                for user_data in users_data\n            ]\n\n    async def get_users_by_usernames(\n            self,\n            usernames: List[str],\n            exclude_banned_users: bool = False,\n            expand: bool = False,\n    ) -&gt; Union[List[RequestedUsernamePartialUser], List[User]]:\n        \"\"\"\n        Grabs a list of users corresponding to each username in the list.\n\n        Arguments:\n            usernames: A list of Roblox usernames.\n            exclude_banned_users: Whether to exclude banned users from the data.\n            expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request)\n\n        Returns:\n            A list of User or RequestedUsernamePartialUser, depending on the expand argument.\n        \"\"\"\n        users_response = await self._requests.post(\n            url=self._url_generator.get_url(\"users\", f\"v1/usernames/users\"),\n            json={\"usernames\": usernames, \"excludeBannedUsers\": exclude_banned_users},\n        )\n        users_data = users_response.json()[\"data\"]\n\n        if expand:\n            return [await self.get_user(user_data[\"id\"]) for user_data in users_data]\n        else:\n            return [\n                RequestedUsernamePartialUser(client=self, data=user_data)\n                for user_data in users_data\n            ]\n\n    async def get_user_by_username(\n            self, username: str, exclude_banned_users: bool = False, expand: bool = True\n    ) -&gt; Union[RequestedUsernamePartialUser, User]:\n        \"\"\"\n        Grabs a user corresponding to the passed username.\n\n        Arguments:\n            username: A Roblox username.\n            exclude_banned_users: Whether to exclude banned users from the data.\n            expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request)\n\n        Returns:\n            A User or RequestedUsernamePartialUser depending on the expand argument.\n        \"\"\"\n        users = await self.get_users_by_usernames(\n            usernames=[username],\n            exclude_banned_users=exclude_banned_users,\n            expand=expand,\n        )\n        try:\n            return users[0]\n        except IndexError:\n            raise UserNotFound(\"Invalid username.\") from None\n\n    def get_base_user(self, user_id: int) -&gt; BaseUser:\n        \"\"\"\n        Gets a base user.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            user_id: A Roblox user ID.\n\n        Returns:\n            A BaseUser.\n        \"\"\"\n        return BaseUser(client=self, user_id=user_id)\n\n    def user_search(self, keyword: str, page_size: int = 10,\n                    max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Search for users with a keyword.\n\n        Arguments:\n            keyword: A keyword to search for.\n            page_size: How many members should be returned for each page.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing RequestedUsernamePartialUser.\n        \"\"\"\n        return PageIterator(\n            client=self,\n            url=self._url_generator.get_url(\"users\", f\"v1/users/search\"),\n            page_size=page_size,\n            max_items=max_items,\n            extra_parameters={\"keyword\": keyword},\n            handler=lambda client, data: PreviousUsernamesPartialUser(client=client, data=data),\n        )\n\n    # Groups\n    async def get_group(self, group_id: int) -&gt; Group:\n        \"\"\"\n        Gets a group by its ID.\n\n        Arguments:\n            group_id: A Roblox group ID.\n\n        Returns:\n            A Group.\n        \"\"\"\n        try:\n            group_response = await self._requests.get(\n                url=self._url_generator.get_url(\"groups\", f\"v1/groups/{group_id}\")\n            )\n        except BadRequest as exception:\n            raise GroupNotFound(\n                message=\"Invalid group.\",\n                response=exception.response\n            ) from None\n        group_data = group_response.json()\n        return Group(client=self, data=group_data)\n\n    def get_base_group(self, group_id: int) -&gt; BaseGroup:\n        \"\"\"\n        Gets a base group.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            group_id: A Roblox group ID.\n\n        Returns:\n            A BaseGroup.\n        \"\"\"\n        return BaseGroup(client=self, group_id=group_id)\n\n    # Universes\n    async def get_universes(self, universe_ids: List[int]) -&gt; List[Universe]:\n        \"\"\"\n        Grabs a list of universes corresponding to each ID in the list.\n\n        Arguments:\n            universe_ids: A list of Roblox universe IDs.\n\n        Returns:\n            A list of Universes.\n        \"\"\"\n        universes_response = await self._requests.get(\n            url=self._url_generator.get_url(\"games\", \"v1/games\"),\n            params={\"universeIds\": universe_ids},\n        )\n        universes_data = universes_response.json()[\"data\"]\n        return [\n            Universe(client=self, data=universe_data)\n            for universe_data in universes_data\n        ]\n\n    async def get_universe(self, universe_id: int) -&gt; Universe:\n        \"\"\"\n        Gets a universe with the passed ID.\n\n        Arguments:\n            universe_id: A Roblox universe ID.\n\n        Returns:\n            A Universe.\n        \"\"\"\n        universes = await self.get_universes(universe_ids=[universe_id])\n        try:\n            return universes[0]\n        except IndexError:\n            raise UniverseNotFound(\"Invalid universe.\") from None\n\n    def get_base_universe(self, universe_id: int) -&gt; BaseUniverse:\n        \"\"\"\n        Gets a base universe.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            universe_id: A Roblox universe ID.\n\n        Returns:\n            A BaseUniverse.\n        \"\"\"\n        return BaseUniverse(client=self, universe_id=universe_id)\n\n    # Places\n    async def get_places(self, place_ids: List[int]) -&gt; List[Place]:\n        \"\"\"\n        Grabs a list of places corresponding to each ID in the list.\n\n        Arguments:\n            place_ids: A list of Roblox place IDs.\n\n        Returns:\n            A list of Places.\n        \"\"\"\n        places_response = await self._requests.get(\n            url=self._url_generator.get_url(\n                \"games\", f\"v1/games/multiget-place-details\"\n            ),\n            params={\"placeIds\": place_ids},\n        )\n        places_data = places_response.json()\n        return [\n            Place(client=self, data=place_data) for place_data in places_data\n        ]\n\n    async def get_place(self, place_id: int) -&gt; Place:\n        \"\"\"\n        Gets a place with the passed ID.\n\n        Arguments:\n            place_id: A Roblox place ID.\n\n        Returns:\n            A Place.\n        \"\"\"\n        places = await self.get_places(place_ids=[place_id])\n        try:\n            return places[0]\n        except IndexError:\n            raise PlaceNotFound(\"Invalid place.\") from None\n\n    def get_base_place(self, place_id: int) -&gt; BasePlace:\n        \"\"\"\n        Gets a base place.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            place_id: A Roblox place ID.\n\n        Returns:\n            A BasePlace.\n        \"\"\"\n        return BasePlace(client=self, place_id=place_id)\n\n    # Assets\n    async def get_asset(self, asset_id: int) -&gt; EconomyAsset:\n        \"\"\"\n        Gets an asset with the passed ID.\n\n        Arguments:\n            asset_id: A Roblox asset ID.\n\n        Returns:\n            An Asset.\n        \"\"\"\n        try:\n            asset_response = await self._requests.get(\n                url=self._url_generator.get_url(\n                    \"economy\", f\"v2/assets/{asset_id}/details\"\n                )\n            )\n        except BadRequest as exception:\n            raise AssetNotFound(\n                message=\"Invalid asset.\",\n                response=exception.response\n            ) from None\n        asset_data = asset_response.json()\n        return EconomyAsset(client=self, data=asset_data)\n\n    def get_base_asset(self, asset_id: int) -&gt; BaseAsset:\n        \"\"\"\n        Gets a base asset.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            asset_id: A Roblox asset ID.\n\n        Returns:\n            A BaseAsset.\n        \"\"\"\n        return BaseAsset(client=self, asset_id=asset_id)\n\n    # Plugins\n    async def get_plugins(self, plugin_ids: List[int]) -&gt; List[Plugin]:\n        \"\"\"\n        Grabs a list of plugins corresponding to each ID in the list.\n\n        Arguments:\n            plugin_ids: A list of Roblox plugin IDs.\n\n        Returns:\n            A list of Plugins.\n        \"\"\"\n        plugins_response = await self._requests.get(\n            url=self._url_generator.get_url(\n                \"develop\", \"v1/plugins\"\n            ),\n            params={\n                \"pluginIds\": plugin_ids\n            }\n        )\n        plugins_data = plugins_response.json()[\"data\"]\n        return [Plugin(client=self, data=plugin_data) for plugin_data in plugins_data]\n\n    async def get_plugin(self, plugin_id: int) -&gt; Plugin:\n        \"\"\"\n        Grabs a plugin with the passed ID.\n\n        Arguments:\n            plugin_id: A Roblox plugin ID.\n\n        Returns:\n            A Plugin.\n        \"\"\"\n        plugins = await self.get_plugins([plugin_id])\n        try:\n            return plugins[0]\n        except IndexError:\n            raise PluginNotFound(\"Invalid plugin.\") from None\n\n    def get_base_plugin(self, plugin_id: int) -&gt; BasePlugin:\n        \"\"\"\n        Gets a base plugin.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            plugin_id: A Roblox plugin ID.\n\n        Returns:\n            A BasePlugin.\n        \"\"\"\n        return BasePlugin(client=self, plugin_id=plugin_id)\n\n    # Badges\n    async def get_badge(self, badge_id: int) -&gt; Badge:\n        \"\"\"\n        Gets a badge with the passed ID.\n\n        Arguments:\n            badge_id: A Roblox badge ID.\n\n        Returns:\n            A Badge.\n        \"\"\"\n        try:\n            badge_response = await self._requests.get(\n                url=self._url_generator.get_url(\n                    \"badges\", f\"v1/badges/{badge_id}\"\n                )\n            )\n        except NotFound as exception:\n            raise BadgeNotFound(\n                message=\"Invalid badge.\",\n                response=exception.response\n            ) from None\n        badge_data = badge_response.json()\n        return Badge(client=self, data=badge_data)\n\n    def get_base_badge(self, badge_id: int) -&gt; BaseBadge:\n        \"\"\"\n        Gets a base badge.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            badge_id: A Roblox badge ID.\n\n        Returns:\n            A BaseBadge.\n        \"\"\"\n        return BaseBadge(client=self, badge_id=badge_id)\n\n    # Gamepasses\n    def get_base_gamepass(self, gamepass_id: int) -&gt; BaseGamePass:\n        \"\"\"\n        Gets a base gamepass.\n\n        !!! note\n            This method does not send any requests - it just generates an object.\n            For more information on bases, please see [Bases](../tutorials/bases.md).\n\n        Arguments:\n            gamepass_id: A Roblox gamepass ID.\n\n        Returns: A BaseGamePass.\n        \"\"\"\n        return BaseGamePass(client=self, gamepass_id=gamepass_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.__init__","title":"<code>__init__(token=None, base_url='roblox.com')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A .ROBLOSECURITY token to authenticate the client with.</p> <code>None</code> <code>base_url</code> <code>str</code> <p>The base URL to use when sending requests.</p> <code>'roblox.com'</code> Source code in <code>roblox/client.py</code> <pre><code>def __init__(self, token: str = None, base_url: str = \"roblox.com\"):\n    \"\"\"\n    Arguments:\n        token: A .ROBLOSECURITY token to authenticate the client with.\n        base_url: The base URL to use when sending requests.\n    \"\"\"\n    self._url_generator: URLGenerator = URLGenerator(base_url=base_url)\n    self._requests: Requests = Requests()\n\n    self.url_generator: URLGenerator = self._url_generator\n    self.requests: Requests = self._requests\n\n    self.presence: PresenceProvider = PresenceProvider(client=self)\n    self.thumbnails: ThumbnailProvider = ThumbnailProvider(client=self)\n    self.delivery: DeliveryProvider = DeliveryProvider(client=self)\n    self.chat: ChatProvider = ChatProvider(client=self)\n    self.account: AccountProvider = AccountProvider(client=self)\n\n    if token:\n        self.set_token(token)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_asset","title":"<code>get_asset(asset_id)</code>  <code>async</code>","text":"<p>Gets an asset with the passed ID.</p> <p>Parameters:</p> Name Type Description Default <code>asset_id</code> <code>int</code> <p>A Roblox asset ID.</p> required <p>Returns:</p> Type Description <code>EconomyAsset</code> <p>An Asset.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_asset(self, asset_id: int) -&gt; EconomyAsset:\n    \"\"\"\n    Gets an asset with the passed ID.\n\n    Arguments:\n        asset_id: A Roblox asset ID.\n\n    Returns:\n        An Asset.\n    \"\"\"\n    try:\n        asset_response = await self._requests.get(\n            url=self._url_generator.get_url(\n                \"economy\", f\"v2/assets/{asset_id}/details\"\n            )\n        )\n    except BadRequest as exception:\n        raise AssetNotFound(\n            message=\"Invalid asset.\",\n            response=exception.response\n        ) from None\n    asset_data = asset_response.json()\n    return EconomyAsset(client=self, data=asset_data)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_authenticated_user","title":"<code>get_authenticated_user(expand=True)</code>  <code>async</code>","text":"<p>Grabs the authenticated user.</p> <p>Parameters:</p> Name Type Description Default <code>expand</code> <code>bool</code> <p>Whether to return a User (2 requests) rather than a PartialUser (1 request)</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[User, PartialUser]</code> <p>The authenticated user.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_authenticated_user(\n        self, expand: bool = True\n) -&gt; Union[User, PartialUser]:\n    \"\"\"\n    Grabs the authenticated user.\n\n    Arguments:\n        expand: Whether to return a User (2 requests) rather than a PartialUser (1 request)\n\n    Returns:\n        The authenticated user.\n    \"\"\"\n    authenticated_user_response = await self._requests.get(\n        url=self._url_generator.get_url(\"users\", f\"v1/users/authenticated\")\n    )\n    authenticated_user_data = authenticated_user_response.json()\n\n    if expand:\n        return await self.get_user(authenticated_user_data[\"id\"])\n    else:\n        return PartialUser(client=self, data=authenticated_user_data)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_badge","title":"<code>get_badge(badge_id)</code>  <code>async</code>","text":"<p>Gets a badge with the passed ID.</p> <p>Parameters:</p> Name Type Description Default <code>badge_id</code> <code>int</code> <p>A Roblox badge ID.</p> required <p>Returns:</p> Type Description <code>Badge</code> <p>A Badge.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_badge(self, badge_id: int) -&gt; Badge:\n    \"\"\"\n    Gets a badge with the passed ID.\n\n    Arguments:\n        badge_id: A Roblox badge ID.\n\n    Returns:\n        A Badge.\n    \"\"\"\n    try:\n        badge_response = await self._requests.get(\n            url=self._url_generator.get_url(\n                \"badges\", f\"v1/badges/{badge_id}\"\n            )\n        )\n    except NotFound as exception:\n        raise BadgeNotFound(\n            message=\"Invalid badge.\",\n            response=exception.response\n        ) from None\n    badge_data = badge_response.json()\n    return Badge(client=self, data=badge_data)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_asset","title":"<code>get_base_asset(asset_id)</code>","text":"<p>Gets a base asset.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>asset_id</code> <code>int</code> <p>A Roblox asset ID.</p> required <p>Returns:</p> Type Description <code>BaseAsset</code> <p>A BaseAsset.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_asset(self, asset_id: int) -&gt; BaseAsset:\n    \"\"\"\n    Gets a base asset.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        asset_id: A Roblox asset ID.\n\n    Returns:\n        A BaseAsset.\n    \"\"\"\n    return BaseAsset(client=self, asset_id=asset_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_badge","title":"<code>get_base_badge(badge_id)</code>","text":"<p>Gets a base badge.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>badge_id</code> <code>int</code> <p>A Roblox badge ID.</p> required <p>Returns:</p> Type Description <code>BaseBadge</code> <p>A BaseBadge.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_badge(self, badge_id: int) -&gt; BaseBadge:\n    \"\"\"\n    Gets a base badge.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        badge_id: A Roblox badge ID.\n\n    Returns:\n        A BaseBadge.\n    \"\"\"\n    return BaseBadge(client=self, badge_id=badge_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_gamepass","title":"<code>get_base_gamepass(gamepass_id)</code>","text":"<p>Gets a base gamepass.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>gamepass_id</code> <code>int</code> <p>A Roblox gamepass ID.</p> required Source code in <code>roblox/client.py</code> <pre><code>def get_base_gamepass(self, gamepass_id: int) -&gt; BaseGamePass:\n    \"\"\"\n    Gets a base gamepass.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        gamepass_id: A Roblox gamepass ID.\n\n    Returns: A BaseGamePass.\n    \"\"\"\n    return BaseGamePass(client=self, gamepass_id=gamepass_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_group","title":"<code>get_base_group(group_id)</code>","text":"<p>Gets a base group.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>int</code> <p>A Roblox group ID.</p> required <p>Returns:</p> Type Description <code>BaseGroup</code> <p>A BaseGroup.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_group(self, group_id: int) -&gt; BaseGroup:\n    \"\"\"\n    Gets a base group.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        group_id: A Roblox group ID.\n\n    Returns:\n        A BaseGroup.\n    \"\"\"\n    return BaseGroup(client=self, group_id=group_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_place","title":"<code>get_base_place(place_id)</code>","text":"<p>Gets a base place.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>place_id</code> <code>int</code> <p>A Roblox place ID.</p> required <p>Returns:</p> Type Description <code>BasePlace</code> <p>A BasePlace.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_place(self, place_id: int) -&gt; BasePlace:\n    \"\"\"\n    Gets a base place.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        place_id: A Roblox place ID.\n\n    Returns:\n        A BasePlace.\n    \"\"\"\n    return BasePlace(client=self, place_id=place_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_plugin","title":"<code>get_base_plugin(plugin_id)</code>","text":"<p>Gets a base plugin.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>plugin_id</code> <code>int</code> <p>A Roblox plugin ID.</p> required <p>Returns:</p> Type Description <code>BasePlugin</code> <p>A BasePlugin.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_plugin(self, plugin_id: int) -&gt; BasePlugin:\n    \"\"\"\n    Gets a base plugin.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        plugin_id: A Roblox plugin ID.\n\n    Returns:\n        A BasePlugin.\n    \"\"\"\n    return BasePlugin(client=self, plugin_id=plugin_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_universe","title":"<code>get_base_universe(universe_id)</code>","text":"<p>Gets a base universe.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>universe_id</code> <code>int</code> <p>A Roblox universe ID.</p> required <p>Returns:</p> Type Description <code>BaseUniverse</code> <p>A BaseUniverse.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_universe(self, universe_id: int) -&gt; BaseUniverse:\n    \"\"\"\n    Gets a base universe.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        universe_id: A Roblox universe ID.\n\n    Returns:\n        A BaseUniverse.\n    \"\"\"\n    return BaseUniverse(client=self, universe_id=universe_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_base_user","title":"<code>get_base_user(user_id)</code>","text":"<p>Gets a base user.</p> <p>Note</p> <p>This method does not send any requests - it just generates an object. For more information on bases, please see Bases.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>A Roblox user ID.</p> required <p>Returns:</p> Type Description <code>BaseUser</code> <p>A BaseUser.</p> Source code in <code>roblox/client.py</code> <pre><code>def get_base_user(self, user_id: int) -&gt; BaseUser:\n    \"\"\"\n    Gets a base user.\n\n    !!! note\n        This method does not send any requests - it just generates an object.\n        For more information on bases, please see [Bases](../tutorials/bases.md).\n\n    Arguments:\n        user_id: A Roblox user ID.\n\n    Returns:\n        A BaseUser.\n    \"\"\"\n    return BaseUser(client=self, user_id=user_id)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_group","title":"<code>get_group(group_id)</code>  <code>async</code>","text":"<p>Gets a group by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>int</code> <p>A Roblox group ID.</p> required <p>Returns:</p> Type Description <code>Group</code> <p>A Group.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_group(self, group_id: int) -&gt; Group:\n    \"\"\"\n    Gets a group by its ID.\n\n    Arguments:\n        group_id: A Roblox group ID.\n\n    Returns:\n        A Group.\n    \"\"\"\n    try:\n        group_response = await self._requests.get(\n            url=self._url_generator.get_url(\"groups\", f\"v1/groups/{group_id}\")\n        )\n    except BadRequest as exception:\n        raise GroupNotFound(\n            message=\"Invalid group.\",\n            response=exception.response\n        ) from None\n    group_data = group_response.json()\n    return Group(client=self, data=group_data)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_place","title":"<code>get_place(place_id)</code>  <code>async</code>","text":"<p>Gets a place with the passed ID.</p> <p>Parameters:</p> Name Type Description Default <code>place_id</code> <code>int</code> <p>A Roblox place ID.</p> required <p>Returns:</p> Type Description <code>Place</code> <p>A Place.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_place(self, place_id: int) -&gt; Place:\n    \"\"\"\n    Gets a place with the passed ID.\n\n    Arguments:\n        place_id: A Roblox place ID.\n\n    Returns:\n        A Place.\n    \"\"\"\n    places = await self.get_places(place_ids=[place_id])\n    try:\n        return places[0]\n    except IndexError:\n        raise PlaceNotFound(\"Invalid place.\") from None\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_places","title":"<code>get_places(place_ids)</code>  <code>async</code>","text":"<p>Grabs a list of places corresponding to each ID in the list.</p> <p>Parameters:</p> Name Type Description Default <code>place_ids</code> <code>List[int]</code> <p>A list of Roblox place IDs.</p> required <p>Returns:</p> Type Description <code>List[Place]</code> <p>A list of Places.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_places(self, place_ids: List[int]) -&gt; List[Place]:\n    \"\"\"\n    Grabs a list of places corresponding to each ID in the list.\n\n    Arguments:\n        place_ids: A list of Roblox place IDs.\n\n    Returns:\n        A list of Places.\n    \"\"\"\n    places_response = await self._requests.get(\n        url=self._url_generator.get_url(\n            \"games\", f\"v1/games/multiget-place-details\"\n        ),\n        params={\"placeIds\": place_ids},\n    )\n    places_data = places_response.json()\n    return [\n        Place(client=self, data=place_data) for place_data in places_data\n    ]\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_plugin","title":"<code>get_plugin(plugin_id)</code>  <code>async</code>","text":"<p>Grabs a plugin with the passed ID.</p> <p>Parameters:</p> Name Type Description Default <code>plugin_id</code> <code>int</code> <p>A Roblox plugin ID.</p> required <p>Returns:</p> Type Description <code>Plugin</code> <p>A Plugin.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_plugin(self, plugin_id: int) -&gt; Plugin:\n    \"\"\"\n    Grabs a plugin with the passed ID.\n\n    Arguments:\n        plugin_id: A Roblox plugin ID.\n\n    Returns:\n        A Plugin.\n    \"\"\"\n    plugins = await self.get_plugins([plugin_id])\n    try:\n        return plugins[0]\n    except IndexError:\n        raise PluginNotFound(\"Invalid plugin.\") from None\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_plugins","title":"<code>get_plugins(plugin_ids)</code>  <code>async</code>","text":"<p>Grabs a list of plugins corresponding to each ID in the list.</p> <p>Parameters:</p> Name Type Description Default <code>plugin_ids</code> <code>List[int]</code> <p>A list of Roblox plugin IDs.</p> required <p>Returns:</p> Type Description <code>List[Plugin]</code> <p>A list of Plugins.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_plugins(self, plugin_ids: List[int]) -&gt; List[Plugin]:\n    \"\"\"\n    Grabs a list of plugins corresponding to each ID in the list.\n\n    Arguments:\n        plugin_ids: A list of Roblox plugin IDs.\n\n    Returns:\n        A list of Plugins.\n    \"\"\"\n    plugins_response = await self._requests.get(\n        url=self._url_generator.get_url(\n            \"develop\", \"v1/plugins\"\n        ),\n        params={\n            \"pluginIds\": plugin_ids\n        }\n    )\n    plugins_data = plugins_response.json()[\"data\"]\n    return [Plugin(client=self, data=plugin_data) for plugin_data in plugins_data]\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_universe","title":"<code>get_universe(universe_id)</code>  <code>async</code>","text":"<p>Gets a universe with the passed ID.</p> <p>Parameters:</p> Name Type Description Default <code>universe_id</code> <code>int</code> <p>A Roblox universe ID.</p> required <p>Returns:</p> Type Description <code>Universe</code> <p>A Universe.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_universe(self, universe_id: int) -&gt; Universe:\n    \"\"\"\n    Gets a universe with the passed ID.\n\n    Arguments:\n        universe_id: A Roblox universe ID.\n\n    Returns:\n        A Universe.\n    \"\"\"\n    universes = await self.get_universes(universe_ids=[universe_id])\n    try:\n        return universes[0]\n    except IndexError:\n        raise UniverseNotFound(\"Invalid universe.\") from None\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_universes","title":"<code>get_universes(universe_ids)</code>  <code>async</code>","text":"<p>Grabs a list of universes corresponding to each ID in the list.</p> <p>Parameters:</p> Name Type Description Default <code>universe_ids</code> <code>List[int]</code> <p>A list of Roblox universe IDs.</p> required <p>Returns:</p> Type Description <code>List[Universe]</code> <p>A list of Universes.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_universes(self, universe_ids: List[int]) -&gt; List[Universe]:\n    \"\"\"\n    Grabs a list of universes corresponding to each ID in the list.\n\n    Arguments:\n        universe_ids: A list of Roblox universe IDs.\n\n    Returns:\n        A list of Universes.\n    \"\"\"\n    universes_response = await self._requests.get(\n        url=self._url_generator.get_url(\"games\", \"v1/games\"),\n        params={\"universeIds\": universe_ids},\n    )\n    universes_data = universes_response.json()[\"data\"]\n    return [\n        Universe(client=self, data=universe_data)\n        for universe_data in universes_data\n    ]\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_user","title":"<code>get_user(user_id)</code>  <code>async</code>","text":"<p>Gets a user with the specified user ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>A Roblox user ID.</p> required <p>Returns:</p> Type Description <code>User</code> <p>A user object.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_user(self, user_id: int) -&gt; User:\n    \"\"\"\n    Gets a user with the specified user ID.\n\n    Arguments:\n        user_id: A Roblox user ID.\n\n    Returns:\n        A user object.\n    \"\"\"\n    try:\n        user_response = await self._requests.get(\n            url=self.url_generator.get_url(\"users\", f\"v1/users/{user_id}\")\n        )\n    except NotFound as exception:\n        raise UserNotFound(\n            message=\"Invalid user.\",\n            response=exception.response\n        ) from None\n    user_data = user_response.json()\n    return User(client=self, data=user_data)\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_user_by_username","title":"<code>get_user_by_username(username, exclude_banned_users=False, expand=True)</code>  <code>async</code>","text":"<p>Grabs a user corresponding to the passed username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>A Roblox username.</p> required <code>exclude_banned_users</code> <code>bool</code> <p>Whether to exclude banned users from the data.</p> <code>False</code> <code>expand</code> <code>bool</code> <p>Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request)</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[RequestedUsernamePartialUser, User]</code> <p>A User or RequestedUsernamePartialUser depending on the expand argument.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_user_by_username(\n        self, username: str, exclude_banned_users: bool = False, expand: bool = True\n) -&gt; Union[RequestedUsernamePartialUser, User]:\n    \"\"\"\n    Grabs a user corresponding to the passed username.\n\n    Arguments:\n        username: A Roblox username.\n        exclude_banned_users: Whether to exclude banned users from the data.\n        expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request)\n\n    Returns:\n        A User or RequestedUsernamePartialUser depending on the expand argument.\n    \"\"\"\n    users = await self.get_users_by_usernames(\n        usernames=[username],\n        exclude_banned_users=exclude_banned_users,\n        expand=expand,\n    )\n    try:\n        return users[0]\n    except IndexError:\n        raise UserNotFound(\"Invalid username.\") from None\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_users","title":"<code>get_users(user_ids, exclude_banned_users=False, expand=False)</code>  <code>async</code>","text":"<p>Grabs a list of users corresponding to each user ID in the list.</p> <p>Parameters:</p> Name Type Description Default <code>user_ids</code> <code>List[int]</code> <p>A list of Roblox user IDs.</p> required <code>exclude_banned_users</code> <code>bool</code> <p>Whether to exclude banned users from the data.</p> <code>False</code> <code>expand</code> <code>bool</code> <p>Whether to return a list of Users (2 requests) rather than PartialUsers (1 request)</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[List[PartialUser], List[User]]</code> <p>A List of Users or partial users.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_users(\n        self,\n        user_ids: List[int],\n        exclude_banned_users: bool = False,\n        expand: bool = False,\n) -&gt; Union[List[PartialUser], List[User]]:\n    \"\"\"\n    Grabs a list of users corresponding to each user ID in the list.\n\n    Arguments:\n        user_ids: A list of Roblox user IDs.\n        exclude_banned_users: Whether to exclude banned users from the data.\n        expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request)\n\n    Returns:\n        A List of Users or partial users.\n    \"\"\"\n    users_response = await self._requests.post(\n        url=self._url_generator.get_url(\"users\", f\"v1/users\"),\n        json={\"userIds\": user_ids, \"excludeBannedUsers\": exclude_banned_users},\n    )\n    users_data = users_response.json()[\"data\"]\n\n    if expand:\n        return [await self.get_user(user_data[\"id\"]) for user_data in users_data]\n    else:\n        return [\n            PartialUser(client=self, data=user_data)\n            for user_data in users_data\n        ]\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.get_users_by_usernames","title":"<code>get_users_by_usernames(usernames, exclude_banned_users=False, expand=False)</code>  <code>async</code>","text":"<p>Grabs a list of users corresponding to each username in the list.</p> <p>Parameters:</p> Name Type Description Default <code>usernames</code> <code>List[str]</code> <p>A list of Roblox usernames.</p> required <code>exclude_banned_users</code> <code>bool</code> <p>Whether to exclude banned users from the data.</p> <code>False</code> <code>expand</code> <code>bool</code> <p>Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request)</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[List[RequestedUsernamePartialUser], List[User]]</code> <p>A list of User or RequestedUsernamePartialUser, depending on the expand argument.</p> Source code in <code>roblox/client.py</code> <pre><code>async def get_users_by_usernames(\n        self,\n        usernames: List[str],\n        exclude_banned_users: bool = False,\n        expand: bool = False,\n) -&gt; Union[List[RequestedUsernamePartialUser], List[User]]:\n    \"\"\"\n    Grabs a list of users corresponding to each username in the list.\n\n    Arguments:\n        usernames: A list of Roblox usernames.\n        exclude_banned_users: Whether to exclude banned users from the data.\n        expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request)\n\n    Returns:\n        A list of User or RequestedUsernamePartialUser, depending on the expand argument.\n    \"\"\"\n    users_response = await self._requests.post(\n        url=self._url_generator.get_url(\"users\", f\"v1/usernames/users\"),\n        json={\"usernames\": usernames, \"excludeBannedUsers\": exclude_banned_users},\n    )\n    users_data = users_response.json()[\"data\"]\n\n    if expand:\n        return [await self.get_user(user_data[\"id\"]) for user_data in users_data]\n    else:\n        return [\n            RequestedUsernamePartialUser(client=self, data=user_data)\n            for user_data in users_data\n        ]\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.set_token","title":"<code>set_token(token=None)</code>","text":"<p>Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Optional[str]</code> <p>A .ROBLOSECURITY token to authenticate the client with.</p> <code>None</code> Source code in <code>roblox/client.py</code> <pre><code>def set_token(self, token: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Authenticates the client with the passed .ROBLOSECURITY token.\n    This method does not send any requests and will not throw if the token is invalid.\n\n    Arguments:\n        token: A .ROBLOSECURITY token to authenticate the client with.\n\n    \"\"\"\n    self._requests.session.cookies[\".ROBLOSECURITY\"] = token\n</code></pre>"},{"location":"reference/client/#roblox.client.Client.user_search","title":"<code>user_search(keyword, page_size=10, max_items=None)</code>","text":"<p>Search for users with a keyword.</p> <p>Parameters:</p> Name Type Description Default <code>keyword</code> <code>str</code> <p>A keyword to search for.</p> required <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing RequestedUsernamePartialUser.</p> Source code in <code>roblox/client.py</code> <pre><code>def user_search(self, keyword: str, page_size: int = 10,\n                max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Search for users with a keyword.\n\n    Arguments:\n        keyword: A keyword to search for.\n        page_size: How many members should be returned for each page.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing RequestedUsernamePartialUser.\n    \"\"\"\n    return PageIterator(\n        client=self,\n        url=self._url_generator.get_url(\"users\", f\"v1/users/search\"),\n        page_size=page_size,\n        max_items=max_items,\n        extra_parameters={\"keyword\": keyword},\n        handler=lambda client, data: PreviousUsernamesPartialUser(client=client, data=data),\n    )\n</code></pre>"},{"location":"reference/conversations/","title":"conversations","text":"<p>Contains objects related to Roblox chat conversations.</p>"},{"location":"reference/conversations/#roblox.conversations.Conversation","title":"<code>Conversation</code>","text":"<p>             Bases: <code>BaseConversation</code></p> <p>Represents a Roblox chat conversation.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>Chat conversation ID.</p> <code>title</code> <code>str</code> <p>Chat conversation title.</p> <code>initiator</code> <code>PartialUser</code> <p>Conversation initiator entity.</p> <code>has_unread_messages</code> <code>bool</code> <p>Whether the conversation have any unread messages.</p> <code>participants</code> <code>List[PartialUser]</code> <p>Participants involved in the conversation.</p> <code>conversation_type</code> <code>ConversationType</code> <p>Type of the conversation.</p> <code>conversation_title</code> <code>ConversationTitle</code> <p>Specifies if the conversation title is generated by default.</p> <code>last_updated</code> <code>datetime</code> <p>Specifies the datetime when the conversation was last updated.</p> <code>conversation_universe</code> <code>Optional[ChatPartialUniverse]</code> <p>Specifies the universe associated with the conversation.</p> Source code in <code>roblox/conversations.py</code> <pre><code>class Conversation(BaseConversation):\n    \"\"\"\n    Represents a Roblox chat conversation.\n\n    Attributes:\n        id: Chat conversation ID.\n        title: Chat conversation title.\n        initiator: Conversation initiator entity.\n        has_unread_messages: Whether the conversation have any unread messages.\n        participants: Participants involved in the conversation.\n        conversation_type: Type of the conversation.\n        conversation_title: Specifies if the conversation title is generated by default.\n        last_updated: Specifies the datetime when the conversation was last updated.\n        conversation_universe: Specifies the universe associated with the conversation.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client object.\n            data: The conversation data.\n        \"\"\"\n        super().__init__(client=client, conversation_id=self.id)\n        self.id: int = data[\"id\"]\n        self.title: str = data[\"title\"]\n\n        # Technically the initiator could be a group, but in practice that doesn't happen\n        # so this is a partialuser\n        # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model,\n        # where it can either be from User or System.\n        self.initiator: PartialUser = PartialUser(client, data[\"initiator\"])\n\n        self.has_unread_messages: bool = data[\"hasUnreadMessages\"]\n        self.participants: List[PartialUser] = [PartialUser(\n            client=client,\n            data=participant_data\n        ) for participant_data in data[\"participants\"]]\n\n        self.conversation_type: ConversationType = ConversationType(data[\"conversationType\"])\n        self.conversation_title: ConversationTitle = ConversationTitle(\n            data=data[\"conversationTitle\"]\n        )\n        self.last_updated: datetime = parse(data[\"lastUpdated\"])\n        self.conversation_universe: Optional[ChatPartialUniverse] = data[\n                                                                        \"conversationUniverse\"] and ChatPartialUniverse(\n            client=client,\n            data=data[\"conversationUniverse\"]\n        )\n</code></pre>"},{"location":"reference/conversations/#roblox.conversations.Conversation.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client object.</p> required <code>data</code> <code>dict</code> <p>The conversation data.</p> required Source code in <code>roblox/conversations.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client object.\n        data: The conversation data.\n    \"\"\"\n    super().__init__(client=client, conversation_id=self.id)\n    self.id: int = data[\"id\"]\n    self.title: str = data[\"title\"]\n\n    # Technically the initiator could be a group, but in practice that doesn't happen\n    # so this is a partialuser\n    # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model,\n    # where it can either be from User or System.\n    self.initiator: PartialUser = PartialUser(client, data[\"initiator\"])\n\n    self.has_unread_messages: bool = data[\"hasUnreadMessages\"]\n    self.participants: List[PartialUser] = [PartialUser(\n        client=client,\n        data=participant_data\n    ) for participant_data in data[\"participants\"]]\n\n    self.conversation_type: ConversationType = ConversationType(data[\"conversationType\"])\n    self.conversation_title: ConversationTitle = ConversationTitle(\n        data=data[\"conversationTitle\"]\n    )\n    self.last_updated: datetime = parse(data[\"lastUpdated\"])\n    self.conversation_universe: Optional[ChatPartialUniverse] = data[\n                                                                    \"conversationUniverse\"] and ChatPartialUniverse(\n        client=client,\n        data=data[\"conversationUniverse\"]\n    )\n</code></pre>"},{"location":"reference/conversations/#roblox.conversations.ConversationTitle","title":"<code>ConversationTitle</code>","text":"<p>A chat conversation's title.</p> <p>Attributes:</p> Name Type Description <code>title_for_viewer</code> <code>str</code> <p>Specifies the title for the conversation specific to the viewer.</p> <code>is_default_title</code> <code>bool</code> <p>Specifies if the title displayed for the user is generated as a default title or was edited by               the user.</p> Source code in <code>roblox/conversations.py</code> <pre><code>class ConversationTitle:\n    \"\"\"\n    A chat conversation's title.\n\n    Attributes:\n        title_for_viewer: Specifies the title for the conversation specific to the viewer.\n        is_default_title: Specifies if the title displayed for the user is generated as a default title or was edited by\n                          the user.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        \"\"\"\n        Arguments:\n            data: The raw input data.\n        \"\"\"\n        self.title_for_viewer: str = data[\"titleForViewer\"]\n        self.is_default_title: bool = data[\"isDefaultTitle\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} title_for_viewer={self.title_for_viewer!r} is_default_title={self.is_default_title}&gt;\"\n</code></pre>"},{"location":"reference/conversations/#roblox.conversations.ConversationTitle.__init__","title":"<code>__init__(data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The raw input data.</p> required Source code in <code>roblox/conversations.py</code> <pre><code>def __init__(self, data: dict):\n    \"\"\"\n    Arguments:\n        data: The raw input data.\n    \"\"\"\n    self.title_for_viewer: str = data[\"titleForViewer\"]\n    self.is_default_title: bool = data[\"isDefaultTitle\"]\n</code></pre>"},{"location":"reference/conversations/#roblox.conversations.ConversationType","title":"<code>ConversationType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>A chat conversation's type.</p> Source code in <code>roblox/conversations.py</code> <pre><code>class ConversationType(Enum):\n    \"\"\"\n    A chat conversation's type.\n    \"\"\"\n\n    multi_user_conversation = \"MultiUserConversation\"\n    \"\"\"Represents a chat with multiples users on the website.\"\"\"\n    one_to_one_conversation = \"OneToOneConversation\"\n    \"\"\"Represents a one-to-one conversation with person A and B.\"\"\"\n    cloud_edit_conversation = \"CloudEditConversation\"\n    \"\"\"Represents a chat in a team-create session.\"\"\"\n</code></pre>"},{"location":"reference/conversations/#roblox.conversations.ConversationType.cloud_edit_conversation","title":"<code>cloud_edit_conversation = 'CloudEditConversation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represents a chat in a team-create session.</p>"},{"location":"reference/conversations/#roblox.conversations.ConversationType.multi_user_conversation","title":"<code>multi_user_conversation = 'MultiUserConversation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represents a chat with multiples users on the website.</p>"},{"location":"reference/conversations/#roblox.conversations.ConversationType.one_to_one_conversation","title":"<code>one_to_one_conversation = 'OneToOneConversation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represents a one-to-one conversation with person A and B.</p>"},{"location":"reference/creatortype/","title":"creatortype","text":"<p>Contains client enums. fixme: this should be deprecated!</p>"},{"location":"reference/creatortype/#roblox.creatortype.CreatorType","title":"<code>CreatorType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Represents the type of creator for objects that can be owned by either a group or a user, like Assets.</p> Source code in <code>roblox/creatortype.py</code> <pre><code>class CreatorType(Enum):\n    \"\"\"\n    Represents the type of creator for objects that can be owned by either a group or a user, like Assets.\n    \"\"\"\n\n    group = \"Group\"\n    \"\"\"The creator is a group.\"\"\"\n    user = \"User\"\n    \"\"\"The creator is a user.\"\"\"\n</code></pre>"},{"location":"reference/creatortype/#roblox.creatortype.CreatorType.group","title":"<code>group = 'Group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The creator is a group.</p>"},{"location":"reference/creatortype/#roblox.creatortype.CreatorType.user","title":"<code>user = 'User'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The creator is a user.</p>"},{"location":"reference/delivery/","title":"delivery","text":"<p>Contains classes and functions related to Roblox asset delivery.</p>"},{"location":"reference/delivery/#roblox.delivery.BaseCDNHash","title":"<code>BaseCDNHash</code>","text":"<p>Represents a cdn_hash on a Roblox content delivery network.</p> <p>Attributes:</p> Name Type Description <code>cdn_hash</code> <code>str</code> <p>The CDN hash as a string.</p> Source code in <code>roblox/delivery.py</code> <pre><code>class BaseCDNHash:\n    \"\"\"\n    Represents a cdn_hash on a Roblox content delivery network.\n\n    Attributes:\n        cdn_hash: The CDN hash as a string.\n    \"\"\"\n\n    def __init__(self, client: Client, cdn_hash: str):\n        \"\"\"\n        Arguments:\n            client: The Client object.\n            cdn_hash: The CDN hash as a string.\n        \"\"\"\n\n        self._client: Client = client\n        self.cdn_hash: str = cdn_hash\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} cdn_hash={self.cdn_hash}&gt;\"\n\n    def get_cdn_number(self) -&gt; int:\n        \"\"\"\n        Returns the CDN number of this CDN hash.\n\n        Returns:\n            The computed number of the given cdn_hash\n        \"\"\"\n\n        return get_cdn_number(self.cdn_hash)\n\n    def _get_url(self, prefix: str, site: str = cdn_site) -&gt; str:\n        cdn_number: int = self.get_cdn_number()\n        return self._client.url_generator.get_url(f\"{prefix}{cdn_number}\", self.cdn_hash, site)\n\n    def get_url(self, site: str = cdn_site) -&gt; str:\n        \"\"\"\n        Gets the cdn_hash's URL. This should be implemented by subclasses.\n\n        Arguments:\n            site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc.\n\n        Returns:\n            The computed URL from the given cdn_hash attribute.\n        \"\"\"\n\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.BaseCDNHash.__init__","title":"<code>__init__(client, cdn_hash)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client object.</p> required <code>cdn_hash</code> <code>str</code> <p>The CDN hash as a string.</p> required Source code in <code>roblox/delivery.py</code> <pre><code>def __init__(self, client: Client, cdn_hash: str):\n    \"\"\"\n    Arguments:\n        client: The Client object.\n        cdn_hash: The CDN hash as a string.\n    \"\"\"\n\n    self._client: Client = client\n    self.cdn_hash: str = cdn_hash\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.BaseCDNHash.get_cdn_number","title":"<code>get_cdn_number()</code>","text":"<p>Returns the CDN number of this CDN hash.</p> <p>Returns:</p> Type Description <code>int</code> <p>The computed number of the given cdn_hash</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_cdn_number(self) -&gt; int:\n    \"\"\"\n    Returns the CDN number of this CDN hash.\n\n    Returns:\n        The computed number of the given cdn_hash\n    \"\"\"\n\n    return get_cdn_number(self.cdn_hash)\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.BaseCDNHash.get_url","title":"<code>get_url(site=cdn_site)</code>","text":"<p>Gets the cdn_hash's URL. This should be implemented by subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>site</code> <code>str</code> <p>Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc.</p> <code>cdn_site</code> <p>Returns:</p> Type Description <code>str</code> <p>The computed URL from the given cdn_hash attribute.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_url(self, site: str = cdn_site) -&gt; str:\n    \"\"\"\n    Gets the cdn_hash's URL. This should be implemented by subclasses.\n\n    Arguments:\n        site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc.\n\n    Returns:\n        The computed URL from the given cdn_hash attribute.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.ContentCDNHash","title":"<code>ContentCDNHash</code>","text":"<p>             Bases: <code>BaseCDNHash</code></p> <p>Represents a CDN hash on cX.rbxcdn.com.</p> Source code in <code>roblox/delivery.py</code> <pre><code>class ContentCDNHash(BaseCDNHash):\n    \"\"\"\n    Represents a CDN hash on cX.rbxcdn.com.\n    \"\"\"\n\n    def __init__(self, client: Client, cdn_hash: str):\n        super().__init__(client=client, cdn_hash=cdn_hash)\n\n    def get_url(self, site: str = cdn_site) -&gt; str:\n        \"\"\"\n        Returns:\n            This hash's URL.\n        \"\"\"\n\n        return self._get_url(\"c\", cdn_site)\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.ContentCDNHash.get_url","title":"<code>get_url(site=cdn_site)</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>This hash's URL.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_url(self, site: str = cdn_site) -&gt; str:\n    \"\"\"\n    Returns:\n        This hash's URL.\n    \"\"\"\n\n    return self._get_url(\"c\", cdn_site)\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider","title":"<code>DeliveryProvider</code>","text":"<p>Provides CDN hashes and other delivery-related objects.</p> Source code in <code>roblox/delivery.py</code> <pre><code>class DeliveryProvider:\n    \"\"\"\n    Provides CDN hashes and other delivery-related objects.\n    \"\"\"\n\n    def __init__(self, client: Client):\n        \"\"\"\n        Arguments:\n            client: The client object, which is passed to all objects this client generates.\n        \"\"\"\n        self._client: Client = client\n\n    def get_cdn_hash(self, cdn_hash: str) -&gt; BaseCDNHash:\n        \"\"\"\n        Gets a Roblox CDN cdn_hash.\n\n        Arguments:\n            cdn_hash: The cdn_hash.\n\n        Returns:\n            A BaseCDNHash.\n        \"\"\"\n\n        return BaseCDNHash(\n            client=self._client,\n            cdn_hash=cdn_hash\n        )\n\n    def get_cdn_hash_from_url(self, url: str, site: str = cdn_site) -&gt; BaseCDNHash:\n        \"\"\"\n        todo: turn this into something that actually splits into path.\n\n        Arguments:\n            url: A CDN url.\n            site: The site this cdn_hash is located at.\n\n        Returns:\n            The CDN cdn_hash for the supplied CDN URL.\n        \"\"\"\n\n        return self.get_cdn_hash(\n            cdn_hash=url.split(f\".{site}/\")[1]\n        )\n\n    def get_thumbnail_cdn_hash(self, cdn_hash: str) -&gt; ThumbnailCDNHash:\n        \"\"\"\n        Gets a Roblox CDN cdn_hash.\n\n        Arguments:\n            cdn_hash: The cdn_hash.\n\n        Returns:\n            A ThumbnailCDNHash.\n        \"\"\"\n\n        return ThumbnailCDNHash(\n            client=self._client,\n            cdn_hash=cdn_hash\n        )\n\n    def get_content_cdn_hash(self, cdn_hash: str) -&gt; ContentCDNHash:\n        \"\"\"\n        Gets a Roblox CDN cdn_hash.\n\n        Arguments:\n            cdn_hash: The cdn_hash.\n\n        Returns:\n            A ContentCDNHash.\n        \"\"\"\n\n        return ContentCDNHash(\n            client=self._client,\n            cdn_hash=cdn_hash\n        )\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider.__init__","title":"<code>__init__(client)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client object, which is passed to all objects this client generates.</p> required Source code in <code>roblox/delivery.py</code> <pre><code>def __init__(self, client: Client):\n    \"\"\"\n    Arguments:\n        client: The client object, which is passed to all objects this client generates.\n    \"\"\"\n    self._client: Client = client\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash","title":"<code>get_cdn_hash(cdn_hash)</code>","text":"<p>Gets a Roblox CDN cdn_hash.</p> <p>Parameters:</p> Name Type Description Default <code>cdn_hash</code> <code>str</code> <p>The cdn_hash.</p> required <p>Returns:</p> Type Description <code>BaseCDNHash</code> <p>A BaseCDNHash.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_cdn_hash(self, cdn_hash: str) -&gt; BaseCDNHash:\n    \"\"\"\n    Gets a Roblox CDN cdn_hash.\n\n    Arguments:\n        cdn_hash: The cdn_hash.\n\n    Returns:\n        A BaseCDNHash.\n    \"\"\"\n\n    return BaseCDNHash(\n        client=self._client,\n        cdn_hash=cdn_hash\n    )\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash_from_url","title":"<code>get_cdn_hash_from_url(url, site=cdn_site)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>A CDN url.</p> required <code>site</code> <code>str</code> <p>The site this cdn_hash is located at.</p> <code>cdn_site</code> <p>Returns:</p> Type Description <code>BaseCDNHash</code> <p>The CDN cdn_hash for the supplied CDN URL.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_cdn_hash_from_url(self, url: str, site: str = cdn_site) -&gt; BaseCDNHash:\n    \"\"\"\n    todo: turn this into something that actually splits into path.\n\n    Arguments:\n        url: A CDN url.\n        site: The site this cdn_hash is located at.\n\n    Returns:\n        The CDN cdn_hash for the supplied CDN URL.\n    \"\"\"\n\n    return self.get_cdn_hash(\n        cdn_hash=url.split(f\".{site}/\")[1]\n    )\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider.get_content_cdn_hash","title":"<code>get_content_cdn_hash(cdn_hash)</code>","text":"<p>Gets a Roblox CDN cdn_hash.</p> <p>Parameters:</p> Name Type Description Default <code>cdn_hash</code> <code>str</code> <p>The cdn_hash.</p> required <p>Returns:</p> Type Description <code>ContentCDNHash</code> <p>A ContentCDNHash.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_content_cdn_hash(self, cdn_hash: str) -&gt; ContentCDNHash:\n    \"\"\"\n    Gets a Roblox CDN cdn_hash.\n\n    Arguments:\n        cdn_hash: The cdn_hash.\n\n    Returns:\n        A ContentCDNHash.\n    \"\"\"\n\n    return ContentCDNHash(\n        client=self._client,\n        cdn_hash=cdn_hash\n    )\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.DeliveryProvider.get_thumbnail_cdn_hash","title":"<code>get_thumbnail_cdn_hash(cdn_hash)</code>","text":"<p>Gets a Roblox CDN cdn_hash.</p> <p>Parameters:</p> Name Type Description Default <code>cdn_hash</code> <code>str</code> <p>The cdn_hash.</p> required <p>Returns:</p> Type Description <code>ThumbnailCDNHash</code> <p>A ThumbnailCDNHash.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_thumbnail_cdn_hash(self, cdn_hash: str) -&gt; ThumbnailCDNHash:\n    \"\"\"\n    Gets a Roblox CDN cdn_hash.\n\n    Arguments:\n        cdn_hash: The cdn_hash.\n\n    Returns:\n        A ThumbnailCDNHash.\n    \"\"\"\n\n    return ThumbnailCDNHash(\n        client=self._client,\n        cdn_hash=cdn_hash\n    )\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.ThumbnailCDNHash","title":"<code>ThumbnailCDNHash</code>","text":"<p>             Bases: <code>BaseCDNHash</code></p> <p>Represents a CDN hash on tX.rbxcdn.com.</p> Source code in <code>roblox/delivery.py</code> <pre><code>class ThumbnailCDNHash(BaseCDNHash):\n    \"\"\"\n    Represents a CDN hash on tX.rbxcdn.com.\n    \"\"\"\n\n    def __init__(self, client: Client, cdn_hash: str):\n        super().__init__(client=client, cdn_hash=cdn_hash)\n\n    def get_url(self, site: str = cdn_site) -&gt; str:\n        \"\"\"\n        Returns this CDN hash's URL.\n        \"\"\"\n\n        return self._get_url(\"t\", cdn_site)\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.ThumbnailCDNHash.get_url","title":"<code>get_url(site=cdn_site)</code>","text":"<p>Returns this CDN hash's URL.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_url(self, site: str = cdn_site) -&gt; str:\n    \"\"\"\n    Returns this CDN hash's URL.\n    \"\"\"\n\n    return self._get_url(\"t\", cdn_site)\n</code></pre>"},{"location":"reference/delivery/#roblox.delivery.get_cdn_number","title":"<code>get_cdn_number(cdn_hash)</code>","text":"<p>Gets the number in the CDN where number represents X in tX.rbxcdn.com</p> <p>Parameters:</p> Name Type Description Default <code>cdn_hash</code> <code>str</code> <p>The CDN cdn_hash to generate a CDN number for.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The CDN number for the supplied cdn_hash.</p> Source code in <code>roblox/delivery.py</code> <pre><code>def get_cdn_number(cdn_hash: str) -&gt; int:\n    \"\"\"\n    Gets the number in the CDN where number represents X in tX.rbxcdn.com\n\n    Arguments:\n        cdn_hash: The CDN cdn_hash to generate a CDN number for.\n\n    Returns: \n        The CDN number for the supplied cdn_hash.\n    \"\"\"\n    i = 31\n    for char in cdn_hash[:32]:\n        i ^= ord(char)  # i ^= int(char, 16) also works\n    return i % 8\n</code></pre>"},{"location":"reference/friends/","title":"friends","text":"<p>Contains classes related to Roblox friend data and parsing.</p>"},{"location":"reference/friends/#roblox.friends.Friend","title":"<code>Friend</code>","text":"<p>             Bases: <code>User</code></p> <p>Represents a friend.</p> <p>Attributes:</p> Name Type Description <code>is_online</code> <code>Optional[bool]</code> <p>Whether the user is currently online.</p> <code>presence_type</code> <code>Optional[int]</code> <p>Their presence type. Don't use this.</p> <code>is_deleted</code> <code>bool</code> <p>Whether the account is deleted.</p> <code>friend_frequent_rank</code> <code>int</code> <p>Unknown</p> Source code in <code>roblox/friends.py</code> <pre><code>class Friend(User):\n    \"\"\"\n    Represents a friend.\n\n    Attributes:\n        is_online: Whether the user is currently online.\n        presence_type: Their presence type. Don't use this.\n        is_deleted: Whether the account is deleted.\n        friend_frequent_rank: Unknown\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            data: The data we get back from the endpoint.\n            client: The Client object, which is passed to all objects this Client generates.\n        \"\"\"\n        super().__init__(client=client, data=data)\n\n        self.is_online: Optional[bool] = data.get(\"isOnline\")\n        self.presence_type: Optional[int] = data.get(\"presenceType\")\n        self.is_deleted: bool = data[\"isDeleted\"]\n        self.friend_frequent_rank: int = data[\"friendFrequentRank\"]\n</code></pre>"},{"location":"reference/friends/#roblox.friends.Friend.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The data we get back from the endpoint.</p> required <code>client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> required Source code in <code>roblox/friends.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        data: The data we get back from the endpoint.\n        client: The Client object, which is passed to all objects this Client generates.\n    \"\"\"\n    super().__init__(client=client, data=data)\n\n    self.is_online: Optional[bool] = data.get(\"isOnline\")\n    self.presence_type: Optional[int] = data.get(\"presenceType\")\n    self.is_deleted: bool = data[\"isDeleted\"]\n    self.friend_frequent_rank: int = data[\"friendFrequentRank\"]\n</code></pre>"},{"location":"reference/gamepasses/","title":"gamepasses","text":"<p>Contains classes related to Roblox gamepass data and parsing.</p>"},{"location":"reference/gamepasses/#roblox.gamepasses.GamePass","title":"<code>GamePass</code>","text":"<p>             Bases: <code>BaseGamePass</code></p> <p>Represents a Roblox gamepass.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The gamepass ID.</p> <code>name</code> <code>str</code> <p>The gamepass name.</p> <code>display_name</code> <code>str</code> <p>The gamepass display name.</p> <code>price</code> <code>Optional[int]</code> <p>The gamepass price.</p> Source code in <code>roblox/gamepasses.py</code> <pre><code>class GamePass(BaseGamePass):\n    \"\"\"\n    Represents a Roblox gamepass.\n\n    Attributes:\n        id: The gamepass ID.\n        name: The gamepass name.\n        display_name: The gamepass display name.\n        price: The gamepass price.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        self.id: int = data[\"id\"]\n        super().__init__(client=self._client, gamepass_id=self.id)\n        self.name: str = data[\"name\"]\n        self.display_name: str = data[\"displayName\"]\n        # TODO: add product here\n        self.price: Optional[int] = data[\"price\"]\n</code></pre>"},{"location":"reference/groups/","title":"groups","text":"<p>Contains classes related to Roblox group data and parsing.</p>"},{"location":"reference/groups/#roblox.groups.Group","title":"<code>Group</code>","text":"<p>             Bases: <code>BaseGroup</code></p> <p>Represents a group.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>the id of the group.</p> <code>name</code> <code>str</code> <p>name of the group.</p> <code>description</code> <code>str</code> <p>description of the group.</p> <code>owner</code> <code>Optional[PartialUser]</code> <p>player who owns the group.</p> <code>shout</code> <code>Optional[Shout]</code> <p>the current group shout.</p> <code>member_count</code> <code>int</code> <p>amount of members in the group.</p> <code>is_builders_club_only</code> <code>bool</code> <p>can only people with builder club join.</p> <code>public_entry_allowed</code> <code>bool</code> <p>can you join without your join request having to be accepted.</p> <code>is_locked</code> <code>bool</code> <p>Is the group locked?</p> <code>has_verified_badge</code> <code>bool</code> <p>If the group has a verified badge.</p> Source code in <code>roblox/groups.py</code> <pre><code>class Group(BaseGroup):\n    \"\"\"\n    Represents a group.\n\n    Attributes:\n        id: the id of the group.\n        name: name of the group.\n        description: description of the group.\n        owner: player who owns the group.\n        shout: the current group shout.\n        member_count: amount of members in the group.\n        is_builders_club_only: can only people with builder club join.\n        public_entry_allowed: can you join without your join request having to be accepted.\n        is_locked: Is the group locked?\n        has_verified_badge: If the group has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            data: The data we get back from the endpoint.\n            client: The Client object, which is passed to all objects this Client generates.\n        \"\"\"\n        super().__init__(client, data[\"id\"])\n\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.owner: Optional[PartialUser] = PartialUser(client=client, data=data[\"owner\"]) if data.get(\"owner\") else \\\n            None\n        self.shout: Optional[Shout] = Shout(\n            client=self._client,\n            data=data[\"shout\"]\n        ) if data.get(\"shout\") else None\n\n        self.member_count: int = data[\"memberCount\"]\n        self.is_builders_club_only: bool = data[\"isBuildersClubOnly\"]\n        self.public_entry_allowed: bool = data[\"publicEntryAllowed\"]\n        self.is_locked: bool = data.get(\"isLocked\") or False\n        self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n\n    async def update_shout(self, message: str, update_self: bool = True) -&gt; Tuple[Optional[Shout], Optional[Shout]]:\n        \"\"\"\n        Updates the shout.\n\n        Arguments:\n            message: The new shout message.\n            update_self: Whether to update self.shout automatically.\n        Returns: \n            The old and new shout.\n        \"\"\"\n        shout_response = await self._client.requests.patch(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/status\"),\n            json={\n                \"message\": message\n            }\n        )\n\n        shout_data = shout_response.json()\n\n        old_shout: Optional[Shout] = self.shout\n        new_shout: Optional[Shout] = shout_data and Shout(\n            client=self._client,\n            data=shout_data\n        ) or None\n\n        if update_self:\n            self.shout = new_shout\n\n        return old_shout, new_shout\n</code></pre>"},{"location":"reference/groups/#roblox.groups.Group.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The data we get back from the endpoint.</p> required <code>client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> required Source code in <code>roblox/groups.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        data: The data we get back from the endpoint.\n        client: The Client object, which is passed to all objects this Client generates.\n    \"\"\"\n    super().__init__(client, data[\"id\"])\n\n    self._client: Client = client\n\n    self.id: int = data[\"id\"]\n    self.name: str = data[\"name\"]\n    self.description: str = data[\"description\"]\n    self.owner: Optional[PartialUser] = PartialUser(client=client, data=data[\"owner\"]) if data.get(\"owner\") else \\\n        None\n    self.shout: Optional[Shout] = Shout(\n        client=self._client,\n        data=data[\"shout\"]\n    ) if data.get(\"shout\") else None\n\n    self.member_count: int = data[\"memberCount\"]\n    self.is_builders_club_only: bool = data[\"isBuildersClubOnly\"]\n    self.public_entry_allowed: bool = data[\"publicEntryAllowed\"]\n    self.is_locked: bool = data.get(\"isLocked\") or False\n    self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n</code></pre>"},{"location":"reference/groups/#roblox.groups.Group.update_shout","title":"<code>update_shout(message, update_self=True)</code>  <code>async</code>","text":"<p>Updates the shout.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The new shout message.</p> required <code>update_self</code> <code>bool</code> <p>Whether to update self.shout automatically.</p> <code>True</code> Source code in <code>roblox/groups.py</code> <pre><code>async def update_shout(self, message: str, update_self: bool = True) -&gt; Tuple[Optional[Shout], Optional[Shout]]:\n    \"\"\"\n    Updates the shout.\n\n    Arguments:\n        message: The new shout message.\n        update_self: Whether to update self.shout automatically.\n    Returns: \n        The old and new shout.\n    \"\"\"\n    shout_response = await self._client.requests.patch(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/status\"),\n        json={\n            \"message\": message\n        }\n    )\n\n    shout_data = shout_response.json()\n\n    old_shout: Optional[Shout] = self.shout\n    new_shout: Optional[Shout] = shout_data and Shout(\n        client=self._client,\n        data=shout_data\n    ) or None\n\n    if update_self:\n        self.shout = new_shout\n\n    return old_shout, new_shout\n</code></pre>"},{"location":"reference/instances/","title":"instances","text":"<p>This module contains classes intended to parse and deal with data from Roblox item instance information endpoints.</p>"},{"location":"reference/instances/#roblox.instances.AssetInstance","title":"<code>AssetInstance</code>","text":"<p>             Bases: <code>ItemInstance</code></p> <p>Represents an instance of a Roblox asset.</p> Source code in <code>roblox/instances.py</code> <pre><code>class AssetInstance(ItemInstance):\n    \"\"\"\n    Represents an instance of a Roblox asset.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        super().__init__(client=self._client, data=data)\n\n        self.asset: BaseAsset = BaseAsset(client=self._client, asset_id=data[\"id\"])\n</code></pre>"},{"location":"reference/instances/#roblox.instances.BadgeInstance","title":"<code>BadgeInstance</code>","text":"<p>             Bases: <code>ItemInstance</code></p> <p>Represents an instance of a Roblox badge.</p> Source code in <code>roblox/instances.py</code> <pre><code>class BadgeInstance(ItemInstance):\n    \"\"\"\n    Represents an instance of a Roblox badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        super().__init__(client=self._client, data=data)\n\n        self.badge: BaseBadge = BaseBadge(client=self._client, badge_id=data[\"id\"])\n</code></pre>"},{"location":"reference/instances/#roblox.instances.GamePassInstance","title":"<code>GamePassInstance</code>","text":"<p>             Bases: <code>ItemInstance</code></p> <p>Represents an instance of a Roblox gamepass.</p> Source code in <code>roblox/instances.py</code> <pre><code>class GamePassInstance(ItemInstance):\n    \"\"\"\n    Represents an instance of a Roblox gamepass.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        super().__init__(client=self._client, data=data)\n\n        self.gamepass: BaseGamePass = BaseGamePass(client=self._client, gamepass_id=data[\"id\"])\n</code></pre>"},{"location":"reference/instances/#roblox.instances.InstanceType","title":"<code>InstanceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Represents an asset instance type.</p> Source code in <code>roblox/instances.py</code> <pre><code>class InstanceType(Enum):\n    \"\"\"\n    Represents an asset instance type.\n    \"\"\"\n    asset = \"Asset\"\n    gamepass = \"GamePass\"\n    badge = \"Badge\"\n</code></pre>"},{"location":"reference/instances/#roblox.instances.ItemInstance","title":"<code>ItemInstance</code>","text":"<p>             Bases: <code>BaseInstance</code></p> <p>Represents an instance of a Roblox item of some kind.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> Source code in <code>roblox/instances.py</code> <pre><code>class ItemInstance(BaseInstance):\n    \"\"\"\n    Represents an instance of a Roblox item of some kind.\n\n    Attributes:\n        _client: The Client object, which is passed to all objects this Client generates.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The data from the endpoint.\n        \"\"\"\n        self._client: Client = client\n\n        self.name: str = data[\"name\"]\n        self.type: str = data[\"type\"]  # fixme\n\n        super().__init__(client=self._client, instance_id=data[\"instanceId\"])\n</code></pre>"},{"location":"reference/instances/#roblox.instances.ItemInstance.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/instances.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The data from the endpoint.\n    \"\"\"\n    self._client: Client = client\n\n    self.name: str = data[\"name\"]\n    self.type: str = data[\"type\"]  # fixme\n\n    super().__init__(client=self._client, instance_id=data[\"instanceId\"])\n</code></pre>"},{"location":"reference/jobs/","title":"jobs","text":"<p>This module contains classes intended to parse and deal with data from Roblox server instance (or \"job\") endpoints.</p>"},{"location":"reference/jobs/#roblox.jobs.GameInstance","title":"<code>GameInstance</code>","text":"<p>             Bases: <code>BaseJob</code></p> <p>Represents a game (or place) instance, or \"job\".</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The instance's job ID.</p> <code>capacity</code> <code>int</code> <p>The server's capacity.</p> <code>ping</code> <code>int</code> <p>The server's ping.</p> <code>fps</code> <code>float</code> <p>The server's FPS.</p> <code>show_slow_game_message</code> <code>bool</code> <p>Whether to show the \"slow game\" message.</p> <code>place</code> <code>BasePlace</code> <p>The server's place.</p> <code>current_players</code> <code>List[GameInstancePlayer]</code> <p>A list of the players in this server.</p> <code>can_join</code> <code>bool</code> <p>Whether the authenticated user can join this server.</p> <code>show_shutdown_button</code> <code>bool</code> <p>Whether to show the shutdown button on this server.</p> <code>friends_description</code> <code>str</code> <p>What text should be shown if this server is a \"friends are in\" server.</p> <code>friends_mouseover</code> <p>What text should be shown on mouseover if this server is a \"friends are in\" server.</p> <code>capacity_message</code> <code>str</code> <p>The server's capacity as a parsed message.</p> <code>join_script</code> <code>str</code> <p>JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game.</p> <code>app_join_script</code> <code>str</code> <p>JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game              through the Roblox mobile app.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class GameInstance(BaseJob):\n    \"\"\"\n    Represents a game (or place) instance, or \"job\".\n\n    Attributes:\n        id: The instance's job ID.\n        capacity: The server's capacity.\n        ping: The server's ping.\n        fps: The server's FPS.\n        show_slow_game_message: Whether to show the \"slow game\" message.\n        place: The server's place.\n        current_players: A list of the players in this server.\n        can_join: Whether the authenticated user can join this server.\n        show_shutdown_button: Whether to show the shutdown button on this server.\n        friends_description: What text should be shown if this server is a \"friends are in\" server.\n        friends_mouseover: What text should be shown on mouseover if this server is a \"friends are in\" server.\n        capacity_message: The server's capacity as a parsed message.\n        join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game.\n        app_join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game\n                         through the Roblox mobile app.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        self.id: str = data[\"Guid\"]\n\n        super().__init__(client=self._client, job_id=self.id)\n\n        self.capacity: int = data[\"Capacity\"]\n        self.ping: int = data[\"Ping\"]\n        self.fps: float = data[\"Fps\"]\n        self.show_slow_game_message: bool = data[\"ShowSlowGameMessage\"]\n        self.place: BasePlace = BasePlace(client=self._client, place_id=data[\"PlaceId\"])\n\n        self.current_players: List[GameInstancePlayer] = [\n            GameInstancePlayer(\n                client=self._client,\n                data=player_data\n            ) for player_data in data[\"CurrentPlayers\"]\n        ]\n\n        self.can_join: bool = data[\"UserCanJoin\"]\n        self.show_shutdown_button: bool = data[\"ShowShutdownButton\"]\n        self.friends_description: str = data[\"FriendsDescription\"]\n        self.friends_mouseover = data[\"FriendsMouseover\"]\n        self.capacity_message: str = data[\"PlayersCapacity\"]  # TODO: reconsider\n\n        self.join_script: str = data[\"JoinScript\"]\n        self.app_join_script: str = data[\"RobloxAppJoinScript\"]\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.GameInstancePlayer","title":"<code>GameInstancePlayer</code>","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The player's user ID.</p> <code>name</code> <code>str</code> <p>The player's username.</p> <code>thumbnail</code> <code>GameInstancePlayerThumbnail</code> <p>The player's thumbnail.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class GameInstancePlayer(BaseUser):\n    \"\"\"\n    Represents a single player in a game instance.\n    Data, like user ID and username, may be filled with placeholder data.\n    Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used.\n\n    Attributes:\n        id: The player's user ID.\n        name: The player's username.\n        thumbnail: The player's thumbnail.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        self.id: int = data[\"Id\"]\n        super().__init__(client=self._client, user_id=self.id)\n\n        self.name: str = data[\"Username\"]\n        self.thumbnail: GameInstancePlayerThumbnail = GameInstancePlayerThumbnail(\n            client=self._client,\n            data=data[\"Thumbnail\"]\n        )\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.GameInstancePlayerThumbnail","title":"<code>GameInstancePlayerThumbnail</code>","text":"<p>Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>The thumbnail's URL.</p> <code>final</code> <code>bool</code> <p>Whether the thumbnail is finalized or not.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class GameInstancePlayerThumbnail:\n    \"\"\"\n    Represent a player in a game instance's thumbnail.\n    As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset\n    information.\n\n    Attributes:\n        url: The thumbnail's URL.\n        final: Whether the thumbnail is finalized or not.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n\n        self.url: str = data[\"Url\"]\n        self.final: bool = data[\"IsFinal\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} url={self.url!r} final={self.final}\"\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.GameInstances","title":"<code>GameInstances</code>","text":"<p>Represents a game/place's active server instances.</p> <p>Attributes:</p> Name Type Description <code>place</code> <code>BasePlace</code> <p>The place.</p> <code>show_shutdown_all_button</code> <code>bool</code> <p>Whether to show the \"Shutdown All\" button on the server list.</p> <code>is_game_instance_list_unavailable</code> <code>bool</code> <p>Whether the list is unavailable.</p> <code>collection</code> <code>List[GameInstance]</code> <p>A list of the game instances.</p> <code>total_collection_size</code> <code>int</code> <p>How many active servers there are.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class GameInstances:\n    \"\"\"\n    Represents a game/place's active server instances.\n\n    Attributes:\n        place: The place.\n        show_shutdown_all_button: Whether to show the \"Shutdown All\" button on the server list.\n        is_game_instance_list_unavailable: Whether the list is unavailable.\n        collection: A list of the game instances.\n        total_collection_size: How many active servers there are.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n\n        self.place: BasePlace = BasePlace(client=self._client, place_id=data[\"PlaceId\"])\n        self.show_shutdown_all_button: bool = data[\"ShowShutdownAllButton\"]\n        self.is_game_instance_list_unavailable: bool = data[\"IsGameInstanceListUnavailable\"]\n        self.collection: List[GameInstance] = [\n            GameInstance(\n                client=self._client,\n                data=instance_data\n            ) for instance_data in data[\"Collection\"]\n        ]\n        self.total_collection_size: int = data[\"TotalCollectionSize\"]\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.PrivateServer","title":"<code>PrivateServer</code>","text":"<p>             Bases: <code>Server</code></p> <p>Represents a private server.</p> <p>Attributes:</p> Name Type Description <code>id</code> <p>The private server's job id.</p> <code>vip_server_id</code> <code>int</code> <p>The private server's vipServerId.</p> <code>max_players</code> <code>int</code> <p>The maximum number of players that can be in the server at once.</p> <code>playing</code> <code>int</code> <p>The amount of players in the server.</p> <code>player_tokens</code> <code>int</code> <p>A list of thumbnail tokens for all the players in the server.</p> <code>players</code> <code>int</code> <p>A list of ServerPlayer objects representing the players in the server. Only friends of the authenticated user will show up here.</p> <code>fps</code> <code>int</code> <p>The server's fps.</p> <code>ping</code> <code>int</code> <p>The server's ping.</p> <code>name</code> <code>str</code> <p>The private server's name.</p> <code>access_code</code> <code>str</code> <p>The private server's access code.</p> <code>owner</code> <code>PartialUser</code> <p>A PartialUser object representing the owner of the private server.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class PrivateServer(Server):\n    \"\"\"\n    Represents a private server.\n\n    Attributes:\n        id: The private server's job id.\n        vip_server_id: The private server's vipServerId.\n        max_players: The maximum number of players that can be in the server at once.\n        playing: The amount of players in the server.\n        player_tokens: A list of thumbnail tokens for all the players in the server.\n        players: A list of ServerPlayer objects representing the players in the server. Only friends of the authenticated user will show up here.\n        fps: The server's fps.\n        ping: The server's ping.\n        name: The private server's name.\n        access_code: The private server's access code.\n        owner: A PartialUser object representing the owner of the private server.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            data: A PrivateServerResponse object.\n        \"\"\"\n\n        super().__init__(client=client, data=data)\n\n        self.name: str = data[\"name\"]\n        self.vip_server_id: int = data[\"vipServerId\"]\n        self.access_code: str = data[\"accessCode\"]\n        self.owner: PartialUser = PartialUser(client=self._client, data=data[\"owner\"])\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.PrivateServer.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>data</code> <code>dict</code> <p>A PrivateServerResponse object.</p> required Source code in <code>roblox/jobs.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        data: A PrivateServerResponse object.\n    \"\"\"\n\n    super().__init__(client=client, data=data)\n\n    self.name: str = data[\"name\"]\n    self.vip_server_id: int = data[\"vipServerId\"]\n    self.access_code: str = data[\"accessCode\"]\n    self.owner: PartialUser = PartialUser(client=self._client, data=data[\"owner\"])\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.Server","title":"<code>Server</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a public server.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[str]</code> <p>The server's job id.</p> <code>max_players</code> <code>int</code> <p>The maximum number of players that can be in the server at once.</p> <code>playing</code> <code>int</code> <p>The amount of players in the server.</p> <code>player_tokens</code> <code>List[str]</code> <p>A list of thumbnail tokens for all the players in the server.</p> <code>players</code> <code>List[ServerPlayer]</code> <p>A list of ServerPlayer objects representing the players in the server. Only friends of the authenticated user will show up here.</p> <code>fps</code> <code>float</code> <p>The server's fps.</p> <code>ping</code> <code>Optional[int]</code> <p>The server's ping.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class Server(BaseItem):\n    \"\"\"\n    Represents a public server.\n\n    Attributes:\n        id: The server's job id.\n        max_players: The maximum number of players that can be in the server at once.\n        playing: The amount of players in the server.\n        player_tokens: A list of thumbnail tokens for all the players in the server.\n        players: A list of ServerPlayer objects representing the players in the server. Only friends of the authenticated user will show up here.\n        fps: The server's fps.\n        ping: The server's ping.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            data: A GameServerResponse object.\n        \"\"\"\n\n        self._client: Client = client\n\n        self.id: Optional[str] = data.get(\"id\")\n        self.max_players: int = data[\"maxPlayers\"]\n        self.playing: int = data.get(\"playing\", 0)\n        self.player_tokens: List[str] = data[\"playerTokens\"]\n        self.players: List[ServerPlayer] = [\n            ServerPlayer(client=self._client, data=player_data) \n            for player_data in data[\"players\"]\n        ]\n\n        self.fps: float = data.get(\"fps\")\n        self.ping: Optional[int] = data.get(\"ping\")\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.Server.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>data</code> <code>dict</code> <p>A GameServerResponse object.</p> required Source code in <code>roblox/jobs.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        data: A GameServerResponse object.\n    \"\"\"\n\n    self._client: Client = client\n\n    self.id: Optional[str] = data.get(\"id\")\n    self.max_players: int = data[\"maxPlayers\"]\n    self.playing: int = data.get(\"playing\", 0)\n    self.player_tokens: List[str] = data[\"playerTokens\"]\n    self.players: List[ServerPlayer] = [\n        ServerPlayer(client=self._client, data=player_data) \n        for player_data in data[\"players\"]\n    ]\n\n    self.fps: float = data.get(\"fps\")\n    self.ping: Optional[int] = data.get(\"ping\")\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.ServerPlayer","title":"<code>ServerPlayer</code>","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a player in a server.</p> <p>Attributes:</p> Name Type Description <code>id</code> <p>The player's user id.</p> <code>name</code> <code>str</code> <p>The player's username.</p> <code>display_name</code> <code>str</code> <p>The player's display name.</p> <code>player_token</code> <code>str</code> <p>The player's token.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class ServerPlayer(BaseUser):\n    \"\"\"\n    Represents a player in a server.\n\n    Attributes:\n        id: The player's user id.\n        name: The player's username.\n        display_name: The player's display name.\n        player_token: The player's token.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            data: A GameServerPlayerResponse object.\n        \"\"\"\n\n        super().__init__(client=client, user_id=data[\"id\"])\n\n        self.player_token: str = data[\"playerToken\"]\n        self.name: str = data[\"name\"]\n        self.display_name: str = data[\"displayName\"]\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.ServerPlayer.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>data</code> <code>dict</code> <p>A GameServerPlayerResponse object.</p> required Source code in <code>roblox/jobs.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        data: A GameServerPlayerResponse object.\n    \"\"\"\n\n    super().__init__(client=client, user_id=data[\"id\"])\n\n    self.player_token: str = data[\"playerToken\"]\n    self.name: str = data[\"name\"]\n    self.display_name: str = data[\"displayName\"]\n</code></pre>"},{"location":"reference/jobs/#roblox.jobs.ServerType","title":"<code>ServerType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Represents the type of server.</p> Source code in <code>roblox/jobs.py</code> <pre><code>class ServerType(Enum):\n    \"\"\"\n    Represents the type of server.\n    \"\"\"\n\n    public = \"Public\"\n    friend = \"Friend\"\n</code></pre>"},{"location":"reference/members/","title":"members","text":"<p>This module contains classes intended to parse and deal with data from Roblox group member endpoints.</p>"},{"location":"reference/members/#roblox.members.Member","title":"<code>Member</code>","text":"<p>             Bases: <code>MemberRelationship</code></p> <p>Represents a group member.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The member's ID.</p> <code>name</code> <code>str</code> <p>The member's name.</p> <code>display_name</code> <code>str</code> <p>The member's display name.</p> <code>role</code> <code>PartialRole</code> <p>The member's role.</p> <code>group</code> <code>BaseGroup</code> <p>The member's group.</p> <code>has_verified_badge</code> <code>bool</code> <p>If the member has a verified badge.</p> Source code in <code>roblox/members.py</code> <pre><code>class Member(MemberRelationship):\n    \"\"\"\n    Represents a group member.\n\n    Attributes:\n        id: The member's ID.\n        name: The member's name.\n        display_name: The member's display name.\n        role: The member's role.\n        group: The member's group.\n        has_verified_badge: If the member has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict, group: BaseGroup):\n        self._client: Client = client\n\n        self.id: int = data[\"user\"][\"userId\"]\n        self.name: str = data[\"user\"][\"username\"]\n        self.display_name: str = data[\"user\"][\"displayName\"]\n        self.has_verified_badge: bool = data[\"user\"][\"hasVerifiedBadge\"]\n\n        super().__init__(client=self._client, user=self.id, group=group)\n\n        self.role: PartialRole = PartialRole(client=self._client, data=data[\"role\"])\n        self.group: BaseGroup = group\n</code></pre>"},{"location":"reference/members/#roblox.members.MemberRelationship","title":"<code>MemberRelationship</code>","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a relationship between a user and a group.</p> <p>Attributes:</p> Name Type Description <code>group</code> <code>BaseGroup</code> <p>The corresponding group.</p> Source code in <code>roblox/members.py</code> <pre><code>class MemberRelationship(BaseUser):\n    \"\"\"\n    Represents a relationship between a user and a group.\n\n    Attributes:\n        group: The corresponding group.\n    \"\"\"\n\n    def __init__(self, client: Client, user: Union[BaseUser, int], group: Union[BaseGroup, int]):\n        self._client: Client = client\n        super().__init__(client=self._client, user_id=int(user))\n\n        self.group: BaseGroup\n\n        if isinstance(group, int):\n            self.group = BaseGroup(client=self._client, group_id=group)\n        else:\n            self.group = group\n\n    async def set_role(self, role: RoleOrRoleId):\n        \"\"\"\n        Sets this member's role.\n\n        Arguments:\n            role: The new role this member should be assigned.\n        \"\"\"\n        await self.group.set_role(self, role)\n\n    async def set_rank(self, rank: int):\n        \"\"\"\n        Sets this member's rank.\n\n        Arguments:\n            rank: The new rank this member should be assigned. Should be in the range of 0-255.\n        \"\"\"\n        await self.group.set_rank(self, rank)\n\n    async def kick(self):\n        \"\"\"\n        Kicks this member from the group.\n        \"\"\"\n        await self.group.kick_user(self)\n\n    async def delete_all_messages(self):\n        \"\"\"\n        Deletes all wall posts created by this member in the group.\n        \"\"\"\n        await self.group.delete_all_messages(self)\n</code></pre>"},{"location":"reference/members/#roblox.members.MemberRelationship.delete_all_messages","title":"<code>delete_all_messages()</code>  <code>async</code>","text":"<p>Deletes all wall posts created by this member in the group.</p> Source code in <code>roblox/members.py</code> <pre><code>async def delete_all_messages(self):\n    \"\"\"\n    Deletes all wall posts created by this member in the group.\n    \"\"\"\n    await self.group.delete_all_messages(self)\n</code></pre>"},{"location":"reference/members/#roblox.members.MemberRelationship.kick","title":"<code>kick()</code>  <code>async</code>","text":"<p>Kicks this member from the group.</p> Source code in <code>roblox/members.py</code> <pre><code>async def kick(self):\n    \"\"\"\n    Kicks this member from the group.\n    \"\"\"\n    await self.group.kick_user(self)\n</code></pre>"},{"location":"reference/members/#roblox.members.MemberRelationship.set_rank","title":"<code>set_rank(rank)</code>  <code>async</code>","text":"<p>Sets this member's rank.</p> <p>Parameters:</p> Name Type Description Default <code>rank</code> <code>int</code> <p>The new rank this member should be assigned. Should be in the range of 0-255.</p> required Source code in <code>roblox/members.py</code> <pre><code>async def set_rank(self, rank: int):\n    \"\"\"\n    Sets this member's rank.\n\n    Arguments:\n        rank: The new rank this member should be assigned. Should be in the range of 0-255.\n    \"\"\"\n    await self.group.set_rank(self, rank)\n</code></pre>"},{"location":"reference/members/#roblox.members.MemberRelationship.set_role","title":"<code>set_role(role)</code>  <code>async</code>","text":"<p>Sets this member's role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>RoleOrRoleId</code> <p>The new role this member should be assigned.</p> required Source code in <code>roblox/members.py</code> <pre><code>async def set_role(self, role: RoleOrRoleId):\n    \"\"\"\n    Sets this member's role.\n\n    Arguments:\n        role: The new role this member should be assigned.\n    \"\"\"\n    await self.group.set_role(self, role)\n</code></pre>"},{"location":"reference/places/","title":"places","text":"<p>This module contains classes intended to parse and deal with data from Roblox place information endpoints.</p>"},{"location":"reference/places/#roblox.places.Place","title":"<code>Place</code>","text":"<p>             Bases: <code>BasePlace</code></p> <p>Represents a Roblox place.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>id of the place.</p> <code>name</code> <code>str</code> <p>Name of the place.</p> <code>description</code> <code>str</code> <p>Description of the place.</p> <code>url</code> <code>str</code> <p>URL for the place.</p> <code>builder</code> <code>str</code> <p>The name of the user or group who owns the place.</p> <code>builder_id</code> <code>int</code> <p>The ID of the player or group who owns the place.</p> <code>is_playable</code> <code>bool</code> <p>Whether the authenticated user can play this game.</p> <code>reason_prohibited</code> <code>str</code> <p>If the place is not playable, contains the reason why the user cannot play the game.</p> <code>universe</code> <code>BaseUniverse</code> <p>The BaseUniverse that contains this place.</p> <code>universe_root_place</code> <code>BasePlace</code> <p>The root place that the universe contains.</p> <code>price</code> <code>int</code> <p>How much it costs to play the game.</p> <code>image_token</code> <code>str</code> <p>Can be used to generate thumbnails for this place.</p> <code>has_verified_badge</code> <code>bool</code> <p>If the place has a verified badge.</p> Source code in <code>roblox/places.py</code> <pre><code>class Place(BasePlace):\n    \"\"\"\n    Represents a Roblox place.\n\n    Attributes:\n        id: id of the place.\n        name: Name of the place.\n        description: Description of the place.\n        url: URL for the place.\n        builder: The name of the user or group who owns the place.\n        builder_id: The ID of the player or group who owns the place.\n        is_playable: Whether the authenticated user can play this game.\n        reason_prohibited: If the place is not playable, contains the reason why the user cannot play the game.\n        universe: The BaseUniverse that contains this place.\n        universe_root_place: The root place that the universe contains.\n        price: How much it costs to play the game.\n        image_token: Can be used to generate thumbnails for this place.\n        has_verified_badge: If the place has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client object, which is passed to all objects this Client generates.\n            data: data to make the magic happen.\n        \"\"\"\n        super().__init__(client=client, place_id=data[\"placeId\"])\n\n        self._client: Client = client\n\n        self.id: int = data[\"placeId\"]\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.url: str = data[\"url\"]\n\n        self.builder: str = data[\"builder\"]\n        self.builder_id: int = data[\"builderId\"]\n\n        self.is_playable: bool = data[\"isPlayable\"]\n        self.reason_prohibited: str = data[\"reasonProhibited\"]\n        self.universe: BaseUniverse = BaseUniverse(client=self._client, universe_id=data[\"universeId\"])\n        self.universe_root_place: BasePlace = BasePlace(client=self._client, place_id=data[\"universeRootPlaceId\"])\n\n        self.price: int = data[\"price\"]\n        self.image_token: str = data[\"imageToken\"]\n        self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n</code></pre>"},{"location":"reference/places/#roblox.places.Place.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> required <code>data</code> <code>dict</code> <p>data to make the magic happen.</p> required Source code in <code>roblox/places.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client object, which is passed to all objects this Client generates.\n        data: data to make the magic happen.\n    \"\"\"\n    super().__init__(client=client, place_id=data[\"placeId\"])\n\n    self._client: Client = client\n\n    self.id: int = data[\"placeId\"]\n    self.name: str = data[\"name\"]\n    self.description: str = data[\"description\"]\n    self.url: str = data[\"url\"]\n\n    self.builder: str = data[\"builder\"]\n    self.builder_id: int = data[\"builderId\"]\n\n    self.is_playable: bool = data[\"isPlayable\"]\n    self.reason_prohibited: str = data[\"reasonProhibited\"]\n    self.universe: BaseUniverse = BaseUniverse(client=self._client, universe_id=data[\"universeId\"])\n    self.universe_root_place: BasePlace = BasePlace(client=self._client, place_id=data[\"universeRootPlaceId\"])\n\n    self.price: int = data[\"price\"]\n    self.image_token: str = data[\"imageToken\"]\n    self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n</code></pre>"},{"location":"reference/plugins/","title":"plugins","text":"<p>This module contains classes intended to parse and deal with data from Roblox plugin information endpoints.</p>"},{"location":"reference/plugins/#roblox.plugins.Plugin","title":"<code>Plugin</code>","text":"<p>             Bases: <code>BasePlugin</code></p> <p>Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the plugin.</p> <code>name</code> <code>str</code> <p>The name of the plugin.</p> <code>description</code> <code>str</code> <p>The plugin's description.</p> <code>comments_enabled</code> <code>bool</code> <p>Whether comments are enabled or disabled.</p> <code>version_id</code> <code>int</code> <p>The plugin's current version ID.</p> <code>created</code> <code>datetime</code> <p>When the plugin was created.</p> <code>updated</code> <code>datetime</code> <p>When the plugin was updated.</p> Source code in <code>roblox/plugins.py</code> <pre><code>class Plugin(BasePlugin):\n    \"\"\"\n    Represents a Roblox plugin.\n    It is intended to parse data from https://develop.roblox.com/v1/plugins.\n\n    Attributes:\n        id: The ID of the plugin.\n        name: The name of the plugin.\n        description: The plugin's description.\n        comments_enabled: Whether comments are enabled or disabled.\n        version_id: The plugin's current version ID.\n        created: When the plugin was created.\n        updated: When the plugin was updated.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Attributes:\n            client: The Client object, which is passed to all objects this Client generates.\n            data: data to make the magic happen.\n        \"\"\"\n        super().__init__(client=client, plugin_id=data[\"id\"])\n\n        self.id: int = data[\"id\"]\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.comments_enabled: bool = data[\"commentsEnabled\"]\n        self.version_id: int = data[\"versionId\"]\n        self.created: datetime = parse(data[\"created\"])\n        self.updated: datetime = parse(data[\"updated\"])\n</code></pre>"},{"location":"reference/plugins/#roblox.plugins.Plugin.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Attributes:</p> Name Type Description <code>client</code> <p>The Client object, which is passed to all objects this Client generates.</p> <code>data</code> <p>data to make the magic happen.</p> Source code in <code>roblox/plugins.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Attributes:\n        client: The Client object, which is passed to all objects this Client generates.\n        data: data to make the magic happen.\n    \"\"\"\n    super().__init__(client=client, plugin_id=data[\"id\"])\n\n    self.id: int = data[\"id\"]\n    self.name: str = data[\"name\"]\n    self.description: str = data[\"description\"]\n    self.comments_enabled: bool = data[\"commentsEnabled\"]\n    self.version_id: int = data[\"versionId\"]\n    self.created: datetime = parse(data[\"created\"])\n    self.updated: datetime = parse(data[\"updated\"])\n</code></pre>"},{"location":"reference/presence/","title":"presence","text":"<p>This module contains classes intended to parse and deal with data from Roblox presence endpoints.</p>"},{"location":"reference/presence/#roblox.presence.Presence","title":"<code>Presence</code>","text":"<p>Represents a user's presence.</p> <p>Attributes:</p> Name Type Description <code>user_presence_type</code> <code>PresenceType</code> <p>The type of the presence.</p> <code>last_location</code> <code>str</code> <p>A string representing the user's last location.</p> <code>place</code> <code>Optional[BasePlace]</code> <p>The place the user is playing or editing.</p> <code>root_place</code> <code>Optional[BasePlace]</code> <p>The root place of the parent universe of the last place the user is playing or editing.</p> <code>job</code> <code>Optional[BaseJob]</code> <p>The job of the root place that the user is playing or editing.</p> <code>universe</code> <code>Optional[BaseUniverse]</code> <p>The universe the user is playing or editing.</p> <code>last_online</code> <code>datetime</code> <p>When the user was last online.</p> <code>user</code> <code>BaseUser</code> <p>The user this presence belongs to.</p> Source code in <code>roblox/presence.py</code> <pre><code>class Presence:\n    \"\"\"\n    Represents a user's presence.\n\n    Attributes:\n        user_presence_type: The type of the presence.\n        last_location: A string representing the user's last location.\n        place: The place the user is playing or editing.\n        root_place: The root place of the parent universe of the last place the user is playing or editing.\n        job: The job of the root place that the user is playing or editing.\n        universe: The universe the user is playing or editing.\n        last_online: When the user was last online.\n        user: The user this presence belongs to.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: Client object.\n            data: The data from the request.\n        \"\"\"\n        self._client: Client = client\n\n        self.user_presence_type: PresenceType = PresenceType(data[\"userPresenceType\"])\n        self.last_location: str = data[\"lastLocation\"]\n\n        self.place: Optional[BasePlace] = BasePlace(\n            client=client,\n            place_id=data[\"placeId\"]\n        ) if data.get(\"placeId\") else None\n\n        self.root_place: Optional[BasePlace] = BasePlace(\n            client=client,\n            place_id=data[\"rootPlaceId\"]\n        ) if data.get(\"rootPlaceId\") else None\n\n        self.job: Optional[BaseJob] = BaseJob(self._client, data[\"gameId\"]) if data.get(\"gameId\") else None\n\n        self.universe: Optional[BaseUniverse] = BaseUniverse(\n            client=client,\n            universe_id=data[\"universeId\"]\n        ) if data.get(\"universeId\") else None\n\n        self.user: BaseUser = client.get_base_user(data[\"userId\"])\n        self.last_online: datetime = parse(data[\"lastOnline\"])\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} user_presence_type={self.user_presence_type}&gt;\"\n</code></pre>"},{"location":"reference/presence/#roblox.presence.Presence.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Client object.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/presence.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: Client object.\n        data: The data from the request.\n    \"\"\"\n    self._client: Client = client\n\n    self.user_presence_type: PresenceType = PresenceType(data[\"userPresenceType\"])\n    self.last_location: str = data[\"lastLocation\"]\n\n    self.place: Optional[BasePlace] = BasePlace(\n        client=client,\n        place_id=data[\"placeId\"]\n    ) if data.get(\"placeId\") else None\n\n    self.root_place: Optional[BasePlace] = BasePlace(\n        client=client,\n        place_id=data[\"rootPlaceId\"]\n    ) if data.get(\"rootPlaceId\") else None\n\n    self.job: Optional[BaseJob] = BaseJob(self._client, data[\"gameId\"]) if data.get(\"gameId\") else None\n\n    self.universe: Optional[BaseUniverse] = BaseUniverse(\n        client=client,\n        universe_id=data[\"universeId\"]\n    ) if data.get(\"universeId\") else None\n\n    self.user: BaseUser = client.get_base_user(data[\"userId\"])\n    self.last_online: datetime = parse(data[\"lastOnline\"])\n</code></pre>"},{"location":"reference/presence/#roblox.presence.PresenceProvider","title":"<code>PresenceProvider</code>","text":"<p>The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information.</p> Source code in <code>roblox/presence.py</code> <pre><code>class PresenceProvider:\n    \"\"\"\n    The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions\n    for fetching user presence information.\n    \"\"\"\n\n    def __init__(self, client: Client):\n        self._client: Client = client\n\n    async def get_user_presences(self, users: List[UserOrUserId]) -&gt; List[Presence]:\n        \"\"\"\n        Grabs a list of Presence objects corresponding to each user in the list.\n\n        Arguments:\n            users: The list of users you want to get Presences from.\n\n        Returns:\n            A list of Presences.\n        \"\"\"\n\n        presences_response = await self._client.requests.post(\n            url=self._client.url_generator.get_url(\"presence\", \"v1/presence/users\"),\n            json={\n                \"userIds\": list(map(int, users))\n            }\n        )\n        presences_data = presences_response.json()[\"userPresences\"]\n        return [Presence(client=self._client, data=presence_data) for presence_data in presences_data]\n</code></pre>"},{"location":"reference/presence/#roblox.presence.PresenceProvider.get_user_presences","title":"<code>get_user_presences(users)</code>  <code>async</code>","text":"<p>Grabs a list of Presence objects corresponding to each user in the list.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>List[UserOrUserId]</code> <p>The list of users you want to get Presences from.</p> required <p>Returns:</p> Type Description <code>List[Presence]</code> <p>A list of Presences.</p> Source code in <code>roblox/presence.py</code> <pre><code>async def get_user_presences(self, users: List[UserOrUserId]) -&gt; List[Presence]:\n    \"\"\"\n    Grabs a list of Presence objects corresponding to each user in the list.\n\n    Arguments:\n        users: The list of users you want to get Presences from.\n\n    Returns:\n        A list of Presences.\n    \"\"\"\n\n    presences_response = await self._client.requests.post(\n        url=self._client.url_generator.get_url(\"presence\", \"v1/presence/users\"),\n        json={\n            \"userIds\": list(map(int, users))\n        }\n    )\n    presences_data = presences_response.json()[\"userPresences\"]\n    return [Presence(client=self._client, data=presence_data) for presence_data in presences_data]\n</code></pre>"},{"location":"reference/presence/#roblox.presence.PresenceType","title":"<code>PresenceType</code>","text":"<p>             Bases: <code>IntEnum</code></p> <p>Represents a user's presence type.</p> Source code in <code>roblox/presence.py</code> <pre><code>class PresenceType(IntEnum):\n    \"\"\"\n    Represents a user's presence type.\n    \"\"\"\n    offline = 0\n    online = 1\n    in_game = 2\n    in_studio = 3\n</code></pre>"},{"location":"reference/promotionchannels/","title":"promotionchannels","text":"<p>This module contains classes intended to parse and deal with data from Roblox promotion channel endpoints.</p>"},{"location":"reference/promotionchannels/#roblox.promotionchannels.UserPromotionChannels","title":"<code>UserPromotionChannels</code>","text":"<p>Represents a user's promotion channels.</p> <p>Attributes:</p> Name Type Description <code>facebook</code> <code>Optional[str]</code> <p>A link to the user's Facebook profile.</p> <code>twitter</code> <code>Optional[str]</code> <p>A Twitter handle.</p> <code>youtube</code> <code>Optional[str]</code> <p>A link to the user's YouTube channel.</p> <code>twitch</code> <code>Optional[str]</code> <p>A link to the user's Twitch channel.</p> Source code in <code>roblox/promotionchannels.py</code> <pre><code>class UserPromotionChannels:\n    \"\"\"\n    Represents a user's promotion channels.\n\n    Attributes:\n        facebook: A link to the user's Facebook profile.\n        twitter: A Twitter handle.\n        youtube: A link to the user's YouTube channel.\n        twitch: A link to the user's Twitch channel.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.facebook: Optional[str] = data[\"facebook\"]\n        self.twitter: Optional[str] = data[\"twitter\"]\n        self.youtube: Optional[str] = data[\"youtube\"]\n        self.twitch: Optional[str] = data[\"twitch\"]\n        self.guilded: Optional[str] = data[\"guilded\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__}&gt;\"\n</code></pre>"},{"location":"reference/resale/","title":"resale","text":"<p>Contains classes related to Roblox resale.</p>"},{"location":"reference/resale/#roblox.resale.AssetResaleData","title":"<code>AssetResaleData</code>","text":"<p>Represents an asset's resale data.</p> <p>Attributes:</p> Name Type Description <code>asset_stock</code> <code>int</code> <p>The asset's stock.</p> <code>sales</code> <code>int</code> <p>The asset's sales.</p> <code>number_remaining</code> <code>int</code> <p>On a Limited U item that hasn't ran out, this is the amount remaining.</p> <code>recent_average_price</code> <code>int</code> <p>The item's recent average price.</p> <code>original_price</code> <code>int</code> <p>What price this item was originally sold at.</p> <code>price_data_points</code> <code>List[dict]</code> <p>A list of tuples containing a limited item's price points over time.</p> Source code in <code>roblox/resale.py</code> <pre><code>class AssetResaleData:\n    \"\"\"\n    Represents an asset's resale data.\n\n    Attributes:\n        asset_stock: The asset's stock.\n        sales: The asset's sales.\n        number_remaining: On a Limited U item that hasn't ran out, this is the amount remaining.\n        recent_average_price: The item's recent average price.\n        original_price: What price this item was originally sold at.\n        price_data_points: A list of tuples containing a limited item's price points over time.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.asset_stock: int = data[\"assetStock\"]\n        self.sales: int = data[\"sales\"]\n        self.number_remaining: int = data[\"numberRemaining\"]\n        self.recent_average_price: int = data[\"recentAveragePrice\"]\n        self.original_price: int = data[\"originalPrice\"]\n        self.price_data_points: List[dict] = data[\"priceDataPoints\"]\n</code></pre>"},{"location":"reference/robloxbadges/","title":"robloxbadges","text":"<p>This module contains classes intended to parse and deal with data from Roblox badge endpoints.</p>"},{"location":"reference/robloxbadges/#roblox.robloxbadges.RobloxBadge","title":"<code>RobloxBadge</code>","text":"<p>             Bases: <code>BaseRobloxBadge</code></p> <p>Represents a Roblox roblox badge.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The badge's ID.</p> <code>name</code> <code>str</code> <p>The badge's name.</p> <code>description</code> <code>str</code> <p>The badge's description.</p> <code>image_url</code> <code>str</code> <p>A link to the badge's image.</p> Source code in <code>roblox/robloxbadges.py</code> <pre><code>class RobloxBadge(BaseRobloxBadge):\n    \"\"\"\n    Represents a Roblox roblox badge.\n\n    Attributes:\n        id: The badge's ID.\n        name: The badge's name.\n        description: The badge's description.\n        image_url: A link to the badge's image.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        self.id: int = data[\"id\"]\n        super().__init__(client=self._client, roblox_badge_id=self.id)\n\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.image_url: str = data[\"imageUrl\"]\n</code></pre>"},{"location":"reference/roles/","title":"roles","text":"<p>This module contains classes intended to parse and deal with data from Roblox group role endpoints.</p>"},{"location":"reference/roles/#roblox.roles.Role","title":"<code>Role</code>","text":"<p>             Bases: <code>BaseRole</code></p> <p>Represents a Roblox group's role.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The role's ID.</p> <code>group</code> <code>Optional[BaseGroup]</code> <p>The group that this role is a part of.</p> <code>name</code> <code>str</code> <p>The role's name.</p> <code>description</code> <code>Optional[str]</code> <p>The role's description.</p> <code>rank</code> <code>int</code> <p>The rank, from 0-255, of this role.</p> <code>member_count</code> <code>Optional[int]</code> <p>How many members exist with this role.</p> Source code in <code>roblox/roles.py</code> <pre><code>class Role(BaseRole):\n    \"\"\"\n    Represents a Roblox group's role.\n\n    Attributes:\n        id: The role's ID.\n        group: The group that this role is a part of.\n        name: The role's name.\n        description: The role's description.\n        rank: The rank, from 0-255, of this role.\n        member_count: How many members exist with this role.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict, group: BaseGroup = None):\n        \"\"\"\n        Arguments:\n            client: The Client object.\n            data: The raw role data.\n            group: The parent group.\n        \"\"\"\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n        super().__init__(client=self._client, role_id=self.id)\n\n        self.group: Optional[BaseGroup] = group\n        self.name: str = data[\"name\"]\n        self.description: Optional[str] = data.get(\"description\")\n        self.rank: int = data[\"rank\"]\n        self.member_count: Optional[int] = data.get(\"memberCount\")\n\n    def get_members(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                    max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets all members with this role.\n\n        Arguments:\n            page_size: How many users should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing all members with this role.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.group.id}/roles/{self.id}/users\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: PartialUser(client=client, data=data)\n        )\n</code></pre>"},{"location":"reference/roles/#roblox.roles.Role.__init__","title":"<code>__init__(client, data, group=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client object.</p> required <code>data</code> <code>dict</code> <p>The raw role data.</p> required <code>group</code> <code>BaseGroup</code> <p>The parent group.</p> <code>None</code> Source code in <code>roblox/roles.py</code> <pre><code>def __init__(self, client: Client, data: dict, group: BaseGroup = None):\n    \"\"\"\n    Arguments:\n        client: The Client object.\n        data: The raw role data.\n        group: The parent group.\n    \"\"\"\n    self._client: Client = client\n\n    self.id: int = data[\"id\"]\n    super().__init__(client=self._client, role_id=self.id)\n\n    self.group: Optional[BaseGroup] = group\n    self.name: str = data[\"name\"]\n    self.description: Optional[str] = data.get(\"description\")\n    self.rank: int = data[\"rank\"]\n    self.member_count: Optional[int] = data.get(\"memberCount\")\n</code></pre>"},{"location":"reference/roles/#roblox.roles.Role.get_members","title":"<code>get_members(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets all members with this role.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many users should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing all members with this role.</p> Source code in <code>roblox/roles.py</code> <pre><code>def get_members(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets all members with this role.\n\n    Arguments:\n        page_size: How many users should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing all members with this role.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.group.id}/roles/{self.id}/users\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: PartialUser(client=client, data=data)\n    )\n</code></pre>"},{"location":"reference/shout/","title":"shout","text":"<p>Contains the Shout object, which represents a group's shout.</p>"},{"location":"reference/shout/#roblox.shout.Shout","title":"<code>Shout</code>","text":"<p>Represents a Group Shout.</p> <p>Attributes:</p> Name Type Description <code>body</code> <code>str</code> <p>The text of the shout.</p> <code>created</code> <code>datetime</code> <p>When the shout was created.</p> <code>updated</code> <code>datetime</code> <p>When the shout was updated.</p> <code>poster</code> <code>PartialUser</code> <p>Who posted the shout.</p> Source code in <code>roblox/shout.py</code> <pre><code>class Shout:\n    \"\"\"\n    Represents a Group Shout.\n\n    Attributes:\n        body: The text of the shout.\n        created: When the shout was created.\n        updated: When the shout was updated.\n        poster: Who posted the shout.\n    \"\"\"\n\n    def __init__(\n            self,\n            client: Client,\n            data: dict\n    ):\n        \"\"\"\n        Arguments:\n            client: Client object.\n            data: The data from the request.\n        \"\"\"\n        self._client: Client = client\n\n        self.body: str = data[\"body\"]\n        self.created: datetime = parse(data[\"created\"])\n        self.updated: datetime = parse(data[\"updated\"])\n        self.poster: PartialUser = PartialUser(\n            client=self._client,\n            data=data[\"poster\"]\n        )\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} created={self.created} updated={self.updated} body={self.body!r} \" \\\n               f\"poster={self.poster!r}&gt;\"\n</code></pre>"},{"location":"reference/shout/#roblox.shout.Shout.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Client object.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/shout.py</code> <pre><code>def __init__(\n        self,\n        client: Client,\n        data: dict\n):\n    \"\"\"\n    Arguments:\n        client: Client object.\n        data: The data from the request.\n    \"\"\"\n    self._client: Client = client\n\n    self.body: str = data[\"body\"]\n    self.created: datetime = parse(data[\"created\"])\n    self.updated: datetime = parse(data[\"updated\"])\n    self.poster: PartialUser = PartialUser(\n        client=self._client,\n        data=data[\"poster\"]\n    )\n</code></pre>"},{"location":"reference/sociallinks/","title":"sociallinks","text":"<p>Contains objects related to Roblox social links.</p>"},{"location":"reference/sociallinks/#roblox.sociallinks.SocialLink","title":"<code>SocialLink</code>","text":"<p>             Bases: <code>BaseUniverseSocialLink</code></p> <p>Represents a universe or group's social links.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The social link's ID.</p> <code>title</code> <code>str</code> <p>The social link's title.</p> <code>url</code> <code>str</code> <p>The social link's URL.</p> <code>type</code> <code>SocialLinkType</code> <p>The social link's type.</p> Source code in <code>roblox/sociallinks.py</code> <pre><code>class SocialLink(BaseUniverseSocialLink):\n    \"\"\"\n    Represents a universe or group's social links.\n\n    Attributes:\n        id: The social link's ID.\n        title: The social link's title.\n        url: The social link's URL.\n        type: The social link's type.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n        self.id: int = data[\"id\"]\n        super().__init__(client=self._client, social_link_id=self.id)\n        self.title: str = data[\"title\"]\n        self.url: str = data[\"url\"]\n        self.type: SocialLinkType = SocialLinkType(data[\"type\"])\n</code></pre>"},{"location":"reference/sociallinks/#roblox.sociallinks.SocialLinkType","title":"<code>SocialLinkType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Represents a type of social link.</p> Source code in <code>roblox/sociallinks.py</code> <pre><code>class SocialLinkType(Enum):\n    \"\"\"\n    Represents a type of social link.\n    \"\"\"\n\n    facebook = \"Facebook\"\n    twitter = \"Twitter\"\n    youtube = \"YouTube\"\n    twitch = \"Twitch\"\n    discord = \"Discord\"\n    roblox_group = \"RobloxGroup\"\n</code></pre>"},{"location":"reference/threedthumbnails/","title":"threedthumbnails","text":"<p>Contains classes related to 3D thumbnails.</p>"},{"location":"reference/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnail","title":"<code>ThreeDThumbnail</code>","text":"<p>Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails.</p> <p>Attributes:</p> Name Type Description <code>mtl</code> <code>ThumbnailCDNHash</code> <p>A CDN hash pointing to the MTL data.</p> <code>obj</code> <code>ThumbnailCDNHash</code> <p>A CDN hash pointing to the OBJ data.</p> <code>textures</code> <code>List[ThumbnailCDNHash]</code> <p>A list of CDN hashes pointing to PNG texture data.</p> <code>camera</code> <code>ThreeDThumbnailCamera</code> <p>The camera object.</p> <code>aabb</code> <code>ThreeDThumbnailAABB</code> <p>The AABB object.</p> Source code in <code>roblox/threedthumbnails.py</code> <pre><code>class ThreeDThumbnail:\n    \"\"\"\n    Represents a user's 3D Thumbnail data.\n    For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails.\n\n    Attributes:\n        mtl: A CDN hash pointing to the MTL data.\n        obj: A CDN hash pointing to the OBJ data.\n        textures: A list of CDN hashes pointing to PNG texture data.\n        camera: The camera object.\n        aabb: The AABB object.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n\n        self.mtl: ThumbnailCDNHash = self._client.delivery.get_thumbnail_cdn_hash(data[\"mtl\"])\n        self.obj: ThumbnailCDNHash = self._client.delivery.get_thumbnail_cdn_hash(data[\"obj\"])\n        self.textures: List[ThumbnailCDNHash] = [\n            self._client.delivery.get_thumbnail_cdn_hash(cdn_hash) for cdn_hash in data[\"textures\"]\n        ]\n        self.camera: ThreeDThumbnailCamera = ThreeDThumbnailCamera(data[\"camera\"])\n        self.aabb: ThreeDThumbnailAABB = ThreeDThumbnailAABB(data[\"aabb\"])\n</code></pre>"},{"location":"reference/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailAABB","title":"<code>ThreeDThumbnailAABB</code>","text":"<p>Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. <pre><code>THREE.Vector3(json.aabb.max.x, json.aabb.max.y, json.aabb.max.z).length() * 4;\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>min</code> <code>ThreeDThumbnailVector3</code> <p>The minimum render position.</p> <code>max</code> <code>ThreeDThumbnailVector3</code> <p>The maximum render position.</p> Source code in <code>roblox/threedthumbnails.py</code> <pre><code>class ThreeDThumbnailAABB:\n    \"\"\"\n    Represents AABB data in a 3D thumbnail.\n    Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails.\n    ```js\n    THREE.Vector3(json.aabb.max.x, json.aabb.max.y, json.aabb.max.z).length() * 4;\n    ```\n\n    Attributes:\n        min: The minimum render position.\n        max: The maximum render position.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.min: ThreeDThumbnailVector3 = ThreeDThumbnailVector3(data[\"min\"])\n        self.max: ThreeDThumbnailVector3 = ThreeDThumbnailVector3(data[\"max\"])\n</code></pre>"},{"location":"reference/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailCamera","title":"<code>ThreeDThumbnailCamera</code>","text":"<p>Represents a camera in a 3D thumbnail.</p> <p>Attributes:</p> Name Type Description <code>fov</code> <code>float</code> <p>The camera's field of view.</p> <code>position</code> <code>ThreeDThumbnailVector3</code> <p>The camera's position.</p> <code>direction</code> <code>ThreeDThumbnailVector3</code> <p>The camera's direction.</p> Source code in <code>roblox/threedthumbnails.py</code> <pre><code>class ThreeDThumbnailCamera:\n    \"\"\"\n    Represents a camera in a 3D thumbnail.\n\n    Attributes:\n        fov: The camera's field of view.\n        position: The camera's position.\n        direction: The camera's direction.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.fov: float = data[\"fov\"]\n        self.position: ThreeDThumbnailVector3 = ThreeDThumbnailVector3(data[\"position\"])\n        self.direction: ThreeDThumbnailVector3 = ThreeDThumbnailVector3(data[\"direction\"])\n</code></pre>"},{"location":"reference/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailVector3","title":"<code>ThreeDThumbnailVector3</code>","text":"<p>Represents a Vector3 used in a 3D thumbnail.</p> <p>Attributes:</p> Name Type Description <code>x</code> <code>float</code> <p>The X component of the vector.</p> <code>y</code> <code>float</code> <p>The Y component of the vector.</p> <code>z</code> <code>float</code> <p>The Z component of the vector.</p> Source code in <code>roblox/threedthumbnails.py</code> <pre><code>class ThreeDThumbnailVector3:\n    \"\"\"\n    Represents a Vector3 used in a 3D thumbnail.\n\n    Attributes:\n        x: The X component of the vector.\n        y: The Y component of the vector.\n        z: The Z component of the vector.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.x: float = data[\"x\"]\n        self.y: float = data[\"y\"]\n        self.z: float = data[\"z\"]\n</code></pre>"},{"location":"reference/thumbnails/","title":"thumbnails","text":"<p>Contains objects related to Roblox thumbnails.</p>"},{"location":"reference/thumbnails/#roblox.thumbnails.AvatarThumbnailType","title":"<code>AvatarThumbnailType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Type of avatar thumbnail.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class AvatarThumbnailType(Enum):\n    \"\"\"\n    Type of avatar thumbnail.\n    \"\"\"\n\n    full_body = \"full_body\"\n    headshot = \"headshot\"\n    bust = \"bust\"\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.Thumbnail","title":"<code>Thumbnail</code>","text":"<p>Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/.</p> <p>Attributes:</p> Name Type Description <code>target_id</code> <code>int</code> <p>The id of the target of the image.</p> <code>state</code> <code>ThumbnailState</code> <p>The current state of the image.</p> <code>image_url</code> <code>Optional[str]</code> <p>Url of the image.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class Thumbnail:\n    \"\"\"\n    Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/.\n\n    Attributes:\n        target_id: The id of the target of the image.\n        state: The current state of the image.\n        image_url: Url of the image.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: Client object.\n            data: The data from the request.\n        \"\"\"\n        self._client: Client = client\n\n        self.target_id: int = data[\"targetId\"]\n        self.state: ThumbnailState = ThumbnailState(data[\"state\"])\n        self.image_url: Optional[str] = data[\"imageUrl\"]\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} target_id={self.target_id} name={self.state!r} \" \\\n               f\"image_url={self.image_url!r}&gt;\"\n\n    async def get_3d_data(self) -&gt; ThreeDThumbnail:\n        \"\"\"\n        Generates 3D thumbnail data for this endpoint.\n\n        Returns:\n            A ThreeDThumbnail.\n        \"\"\"\n        threed_response = await self._client.requests.get(\n            url=self.image_url\n        )\n        threed_data = threed_response.json()\n        return ThreeDThumbnail(\n            client=self._client,\n            data=threed_data\n        )\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.Thumbnail.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Client object.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/thumbnails.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: Client object.\n        data: The data from the request.\n    \"\"\"\n    self._client: Client = client\n\n    self.target_id: int = data[\"targetId\"]\n    self.state: ThumbnailState = ThumbnailState(data[\"state\"])\n    self.image_url: Optional[str] = data[\"imageUrl\"]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.Thumbnail.get_3d_data","title":"<code>get_3d_data()</code>  <code>async</code>","text":"<p>Generates 3D thumbnail data for this endpoint.</p> <p>Returns:</p> Type Description <code>ThreeDThumbnail</code> <p>A ThreeDThumbnail.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_3d_data(self) -&gt; ThreeDThumbnail:\n    \"\"\"\n    Generates 3D thumbnail data for this endpoint.\n\n    Returns:\n        A ThreeDThumbnail.\n    \"\"\"\n    threed_response = await self._client.requests.get(\n        url=self.image_url\n    )\n    threed_data = threed_response.json()\n    return ThreeDThumbnail(\n        client=self._client,\n        data=threed_data\n    )\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailFormat","title":"<code>ThumbnailFormat</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Format returned by the endpoint.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class ThumbnailFormat(Enum):\n    \"\"\"\n    Format returned by the endpoint.\n    \"\"\"\n\n    png = \"Png\"\n    jpeg = \"Jpeg\"\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider","title":"<code>ThumbnailProvider</code>","text":"<p>The ThumbnailProvider that provides multiple functions for generating user thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class ThumbnailProvider:\n    \"\"\"\n    The ThumbnailProvider that provides multiple functions for generating user thumbnails.\n    \"\"\"\n\n    def __init__(self, client: Client):\n        \"\"\"\n        Arguments:\n            client: Client object.\n        \"\"\"\n        self._client: Client = client\n\n    async def get_asset_thumbnails(\n            self,\n            assets: List[AssetOrAssetId],\n            return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n            size: SizeTupleOrString = (30, 30),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns asset thumbnails for the asset ID passed.\n        Supported sizes:  \n        - 30x30  \n        - 42x42  \n        - 50x50  \n        - 60x62  \n        - 75x75  \n        - 110x110  \n        - 140x140  \n        - 150x150  \n        - 160x100  \n        - 160x600  \n        - 250x250  \n        - 256x144  \n        - 300x250  \n        - 304x166  \n        - 384x216  \n        - 396x216  \n        - 420x420  \n        - 480x270  \n        - 512x512  \n        - 576x324  \n        - 700x700  \n        - 728x90  \n        - 768x432  \n\n        Arguments:\n            assets: Assets you want the thumbnails of.\n            return_policy: How you want it returns look at enum.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: if the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/assets\"),\n            params={\n                \"assetIds\": list(map(int, assets)),\n                \"returnPolicy\": return_policy.value,\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_asset_thumbnail_3d(self, asset: AssetOrAssetId) -&gt; Thumbnail:\n        \"\"\"\n        Returns a 3D asset thumbnail for the user ID passed.\n\n        Arguments:\n            asset: Asset you want the thumbnails of.\n\n        Returns:\n            A Thumbnail.\n        \"\"\"\n        thumbnail_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\n                \"thumbnails\", \"v1/assets-thumbnail-3d\"\n            ),\n            params={\"assetId\": int(asset)},\n        )\n        thumbnail_data = thumbnail_response.json()\n        return Thumbnail(client=self._client, data=thumbnail_data)\n\n    async def get_badge_icons(\n            self,\n            badges: List[BadgeOrBadgeId],\n            size: SizeTupleOrString = (150, 150),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns badge icons for each badge ID passed.\n        Supported sizes:  \n        - 150x150  \n\n        Arguments:\n            badges: Badges you want the thumbnails of.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: if the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/badges/icons\"),\n            params={\n                \"badgeIds\": list(map(int, badges)),\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_gamepass_icons(\n            self,\n            gamepasses: List[GamePassOrGamePassId],\n            # TODO Make size enum\n            size: SizeTupleOrString = (150, 150),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns gamepass icons for each gamepass ID passed.\n        Supported sizes:  \n        - 150x150  \n\n        Arguments:\n            gamepasses: Gamepasses you want the thumbnails of.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: If the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/game-passes\"),\n            params={\n                \"gamePassIds\": list(map(int, gamepasses)),\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_universe_icons(\n            self,\n            universes: List[UniverseOrUniverseId],\n            return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n            size: SizeTupleOrString = (50, 50),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns universe icons for each universe ID passed.\n        Supported sizes:  \n        - 50x50  \n        - 128x128  \n        - 150x150  \n        - 256x256  \n        - 512x512  \n        - 768x432  \n\n        Arguments:\n            universes: Universes you want the thumbnails of.\n            return_policy: How you want it returns look at enum.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: If the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/games/icons\"),\n            params={\n                \"universeIds\": list(map(int, universes)),\n                \"returnPolicy\": return_policy.value,\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_universe_thumbnails(\n            self,\n            universes: List[UniverseOrUniverseId],\n            size: SizeTupleOrString = (768, 432),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n            count_per_universe: int = None,\n            defaults: bool = None,\n    ) -&gt; List[UniverseThumbnails]:\n        \"\"\"\n        Returns universe thumbnails for each universe ID passed.\n        Supported sizes:  \n        - 768x432  \n        - 576x324  \n        - 480x270  \n        - 384x216  \n        - 256x144  \n\n        Arguments:\n            universes: Universes you want the thumbnails of.\n            size: size of the image.\n            image_format: Format of the image.\n            count_per_universe: Unknown.\n            is_circular: If the image is a circle yes or no.\n            defaults: Whether to return default thumbnails.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\n                \"thumbnails\", \"v1/games/multiget/thumbnails\"\n            ),\n            params={\n                \"universeIds\": list(map(int, universes)),\n                \"countPerUniverse\": count_per_universe,\n                \"defaults\": defaults,\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            UniverseThumbnails(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_group_icons(\n            self,\n            groups: List[GroupOrGroupId],\n            size: SizeTupleOrString = (150, 150),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns icons for each group ID passed.\n        Supported sizes:  \n        - 150x150  \n        - 420x420  \n\n        Arguments:\n            groups: Groups you want the thumbnails of.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: If the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/groups/icons\"),\n            params={\n                \"groupIds\": list(map(int, groups)),\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_place_icons(\n            self,\n            places: List[PlaceOrPlaceId],\n            return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n            size: SizeTupleOrString = (50, 50),\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns icons for each place ID passed.\n        Supported sizes:  \n        - 50x50  \n        - 128x128  \n        - 150x150  \n        - 256x256  \n        - 512x512  \n        - 768x432  \n\n        Arguments:\n            places: Places you want the thumbnails of.\n            return_policy: How you want it returns look at enum.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: if the image is a circle yes or no.\n        Returns:\n            A List of Thumbnails.\n        \"\"\"\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/places/gameicons\"),\n            params={\n                \"placeIds\": list(map(int, places)),\n                \"returnPolicy\": return_policy.value,\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_user_avatar_thumbnails(\n            self,\n            users: List[UserOrUserId],\n            type: AvatarThumbnailType = AvatarThumbnailType.full_body,\n            size: SizeTupleOrString = None,\n            image_format: ThumbnailFormat = ThumbnailFormat.png,\n            is_circular: bool = False,\n    ) -&gt; List[Thumbnail]:\n        \"\"\"\n        Returns avatar thumbnails for each user ID passed.\n        The valid sizes depend on the `type` parameter.\n\n        | Size | full_body | headshot | bust |\n        |---|---|---|---|\n        | 30x30 | \u2714\ufe0f | \u274c | \u274c |\n        | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f |\n        | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c |\n        | 140x140 | \u2714\ufe0f | \u274c | \u274c |\n        | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 150x200 | \u2714\ufe0f | \u274c | \u274c |\n        | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 250x250 | \u2714\ufe0f | \u274c | \u274c |\n        | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n        | 720x720 | \u2714\ufe0f | \u274c | \u274c |\n\n        Arguments:\n            users: Id of the users you want the thumbnails of.\n            type: Type of avatar thumbnail you want look at enum.\n            size: size of the image.\n            image_format: Format of the image.\n            is_circular: If the image is a circle yes or no.\n\n        Returns:\n            A list of Thumbnails.\n        \"\"\"\n        uri: str\n        if type == AvatarThumbnailType.full_body:\n            uri = \"avatar\"\n            size = size or (30, 30)\n        elif type == AvatarThumbnailType.bust:\n            uri = \"avatar-bust\"\n            size = size or (48, 48)\n        elif type == AvatarThumbnailType.headshot:\n            uri = \"avatar-headshot\"\n            size = size or (48, 48)\n        else:\n            raise ValueError(\"Avatar type is invalid.\")\n\n        thumbnails_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", f\"v1/users/{uri}\"),\n            params={\n                \"userIds\": list(map(int, users)),\n                \"size\": _to_size_string(size),\n                \"format\": image_format.value,\n                \"isCircular\": is_circular,\n            },\n        )\n\n        thumbnails_data = thumbnails_response.json()[\"data\"]\n        return [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in thumbnails_data\n        ]\n\n    async def get_user_avatar_thumbnail_3d(self, user: UserOrUserId) -&gt; Thumbnail:\n        \"\"\"\n        Returns the user's thumbnail in 3d.\n\n        Arguments:\n            user: User you want the 3d thumbnail of.\n\n        Returns:\n            A Thumbnail.\n        \"\"\"\n        thumbnail_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"thumbnails\", \"v1/users/avatar-3d\"),\n            params={\n                \"userId\": int(user)\n            },\n        )\n        thumbnail_data = thumbnail_response.json()\n        return Thumbnail(client=self._client, data=thumbnail_data)\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.__init__","title":"<code>__init__(client)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Client object.</p> required Source code in <code>roblox/thumbnails.py</code> <pre><code>def __init__(self, client: Client):\n    \"\"\"\n    Arguments:\n        client: Client object.\n    \"\"\"\n    self._client: Client = client\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnail_3d","title":"<code>get_asset_thumbnail_3d(asset)</code>  <code>async</code>","text":"<p>Returns a 3D asset thumbnail for the user ID passed.</p> <p>Parameters:</p> Name Type Description Default <code>asset</code> <code>AssetOrAssetId</code> <p>Asset you want the thumbnails of.</p> required <p>Returns:</p> Type Description <code>Thumbnail</code> <p>A Thumbnail.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_asset_thumbnail_3d(self, asset: AssetOrAssetId) -&gt; Thumbnail:\n    \"\"\"\n    Returns a 3D asset thumbnail for the user ID passed.\n\n    Arguments:\n        asset: Asset you want the thumbnails of.\n\n    Returns:\n        A Thumbnail.\n    \"\"\"\n    thumbnail_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\n            \"thumbnails\", \"v1/assets-thumbnail-3d\"\n        ),\n        params={\"assetId\": int(asset)},\n    )\n    thumbnail_data = thumbnail_response.json()\n    return Thumbnail(client=self._client, data=thumbnail_data)\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnails","title":"<code>get_asset_thumbnails(assets, return_policy=ThumbnailReturnPolicy.place_holder, size=(30, 30), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432  </p> <p>Parameters:</p> Name Type Description Default <code>assets</code> <code>List[AssetOrAssetId]</code> <p>Assets you want the thumbnails of.</p> required <code>return_policy</code> <code>ThumbnailReturnPolicy</code> <p>How you want it returns look at enum.</p> <code>place_holder</code> <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(30, 30)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>if the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_asset_thumbnails(\n        self,\n        assets: List[AssetOrAssetId],\n        return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n        size: SizeTupleOrString = (30, 30),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns asset thumbnails for the asset ID passed.\n    Supported sizes:  \n    - 30x30  \n    - 42x42  \n    - 50x50  \n    - 60x62  \n    - 75x75  \n    - 110x110  \n    - 140x140  \n    - 150x150  \n    - 160x100  \n    - 160x600  \n    - 250x250  \n    - 256x144  \n    - 300x250  \n    - 304x166  \n    - 384x216  \n    - 396x216  \n    - 420x420  \n    - 480x270  \n    - 512x512  \n    - 576x324  \n    - 700x700  \n    - 728x90  \n    - 768x432  \n\n    Arguments:\n        assets: Assets you want the thumbnails of.\n        return_policy: How you want it returns look at enum.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: if the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/assets\"),\n        params={\n            \"assetIds\": list(map(int, assets)),\n            \"returnPolicy\": return_policy.value,\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_badge_icons","title":"<code>get_badge_icons(badges, size=(150, 150), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns badge icons for each badge ID passed. Supported sizes: - 150x150  </p> <p>Parameters:</p> Name Type Description Default <code>badges</code> <code>List[BadgeOrBadgeId]</code> <p>Badges you want the thumbnails of.</p> required <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(150, 150)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>if the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_badge_icons(\n        self,\n        badges: List[BadgeOrBadgeId],\n        size: SizeTupleOrString = (150, 150),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns badge icons for each badge ID passed.\n    Supported sizes:  \n    - 150x150  \n\n    Arguments:\n        badges: Badges you want the thumbnails of.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: if the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/badges/icons\"),\n        params={\n            \"badgeIds\": list(map(int, badges)),\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_gamepass_icons","title":"<code>get_gamepass_icons(gamepasses, size=(150, 150), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150  </p> <p>Parameters:</p> Name Type Description Default <code>gamepasses</code> <code>List[GamePassOrGamePassId]</code> <p>Gamepasses you want the thumbnails of.</p> required <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(150, 150)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>If the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_gamepass_icons(\n        self,\n        gamepasses: List[GamePassOrGamePassId],\n        # TODO Make size enum\n        size: SizeTupleOrString = (150, 150),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns gamepass icons for each gamepass ID passed.\n    Supported sizes:  \n    - 150x150  \n\n    Arguments:\n        gamepasses: Gamepasses you want the thumbnails of.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: If the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/game-passes\"),\n        params={\n            \"gamePassIds\": list(map(int, gamepasses)),\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_group_icons","title":"<code>get_group_icons(groups, size=(150, 150), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420  </p> <p>Parameters:</p> Name Type Description Default <code>groups</code> <code>List[GroupOrGroupId]</code> <p>Groups you want the thumbnails of.</p> required <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(150, 150)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>If the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_group_icons(\n        self,\n        groups: List[GroupOrGroupId],\n        size: SizeTupleOrString = (150, 150),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns icons for each group ID passed.\n    Supported sizes:  \n    - 150x150  \n    - 420x420  \n\n    Arguments:\n        groups: Groups you want the thumbnails of.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: If the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/groups/icons\"),\n        params={\n            \"groupIds\": list(map(int, groups)),\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_place_icons","title":"<code>get_place_icons(places, return_policy=ThumbnailReturnPolicy.place_holder, size=(50, 50), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432  </p> <p>Parameters:</p> Name Type Description Default <code>places</code> <code>List[PlaceOrPlaceId]</code> <p>Places you want the thumbnails of.</p> required <code>return_policy</code> <code>ThumbnailReturnPolicy</code> <p>How you want it returns look at enum.</p> <code>place_holder</code> <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(50, 50)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>if the image is a circle yes or no.</p> <code>False</code> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_place_icons(\n        self,\n        places: List[PlaceOrPlaceId],\n        return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n        size: SizeTupleOrString = (50, 50),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns icons for each place ID passed.\n    Supported sizes:  \n    - 50x50  \n    - 128x128  \n    - 150x150  \n    - 256x256  \n    - 512x512  \n    - 768x432  \n\n    Arguments:\n        places: Places you want the thumbnails of.\n        return_policy: How you want it returns look at enum.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: if the image is a circle yes or no.\n    Returns:\n        A List of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/places/gameicons\"),\n        params={\n            \"placeIds\": list(map(int, places)),\n            \"returnPolicy\": return_policy.value,\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_icons","title":"<code>get_universe_icons(universes, return_policy=ThumbnailReturnPolicy.place_holder, size=(50, 50), image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432  </p> <p>Parameters:</p> Name Type Description Default <code>universes</code> <code>List[UniverseOrUniverseId]</code> <p>Universes you want the thumbnails of.</p> required <code>return_policy</code> <code>ThumbnailReturnPolicy</code> <p>How you want it returns look at enum.</p> <code>place_holder</code> <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(50, 50)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>If the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_universe_icons(\n        self,\n        universes: List[UniverseOrUniverseId],\n        return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,\n        size: SizeTupleOrString = (50, 50),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns universe icons for each universe ID passed.\n    Supported sizes:  \n    - 50x50  \n    - 128x128  \n    - 150x150  \n    - 256x256  \n    - 512x512  \n    - 768x432  \n\n    Arguments:\n        universes: Universes you want the thumbnails of.\n        return_policy: How you want it returns look at enum.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: If the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/games/icons\"),\n        params={\n            \"universeIds\": list(map(int, universes)),\n            \"returnPolicy\": return_policy.value,\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_thumbnails","title":"<code>get_universe_thumbnails(universes, size=(768, 432), image_format=ThumbnailFormat.png, is_circular=False, count_per_universe=None, defaults=None)</code>  <code>async</code>","text":"<p>Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144  </p> <p>Parameters:</p> Name Type Description Default <code>universes</code> <code>List[UniverseOrUniverseId]</code> <p>Universes you want the thumbnails of.</p> required <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>(768, 432)</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>count_per_universe</code> <code>int</code> <p>Unknown.</p> <code>None</code> <code>is_circular</code> <code>bool</code> <p>If the image is a circle yes or no.</p> <code>False</code> <code>defaults</code> <code>bool</code> <p>Whether to return default thumbnails.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[UniverseThumbnails]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_universe_thumbnails(\n        self,\n        universes: List[UniverseOrUniverseId],\n        size: SizeTupleOrString = (768, 432),\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n        count_per_universe: int = None,\n        defaults: bool = None,\n) -&gt; List[UniverseThumbnails]:\n    \"\"\"\n    Returns universe thumbnails for each universe ID passed.\n    Supported sizes:  \n    - 768x432  \n    - 576x324  \n    - 480x270  \n    - 384x216  \n    - 256x144  \n\n    Arguments:\n        universes: Universes you want the thumbnails of.\n        size: size of the image.\n        image_format: Format of the image.\n        count_per_universe: Unknown.\n        is_circular: If the image is a circle yes or no.\n        defaults: Whether to return default thumbnails.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\n            \"thumbnails\", \"v1/games/multiget/thumbnails\"\n        ),\n        params={\n            \"universeIds\": list(map(int, universes)),\n            \"countPerUniverse\": count_per_universe,\n            \"defaults\": defaults,\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        UniverseThumbnails(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatar_thumbnail_3d","title":"<code>get_user_avatar_thumbnail_3d(user)</code>  <code>async</code>","text":"<p>Returns the user's thumbnail in 3d.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserOrUserId</code> <p>User you want the 3d thumbnail of.</p> required <p>Returns:</p> Type Description <code>Thumbnail</code> <p>A Thumbnail.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_user_avatar_thumbnail_3d(self, user: UserOrUserId) -&gt; Thumbnail:\n    \"\"\"\n    Returns the user's thumbnail in 3d.\n\n    Arguments:\n        user: User you want the 3d thumbnail of.\n\n    Returns:\n        A Thumbnail.\n    \"\"\"\n    thumbnail_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", \"v1/users/avatar-3d\"),\n        params={\n            \"userId\": int(user)\n        },\n    )\n    thumbnail_data = thumbnail_response.json()\n    return Thumbnail(client=self._client, data=thumbnail_data)\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatar_thumbnails","title":"<code>get_user_avatar_thumbnails(users, type=AvatarThumbnailType.full_body, size=None, image_format=ThumbnailFormat.png, is_circular=False)</code>  <code>async</code>","text":"<p>Returns avatar thumbnails for each user ID passed. The valid sizes depend on the <code>type</code> parameter.</p> Size full_body headshot bust 30x30 \u2714\ufe0f \u274c \u274c 48x48 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 50x50 \u274c \u2714\ufe0f \u2714\ufe0f 60x60 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 75x75 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 100x100 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 110x110 \u2714\ufe0f \u2714\ufe0f \u274c 140x140 \u2714\ufe0f \u274c \u274c 150x150 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 150x200 \u2714\ufe0f \u274c \u274c 180x180 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 250x250 \u2714\ufe0f \u274c \u274c 352x352 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 420x420 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 720x720 \u2714\ufe0f \u274c \u274c <p>Parameters:</p> Name Type Description Default <code>users</code> <code>List[UserOrUserId]</code> <p>Id of the users you want the thumbnails of.</p> required <code>type</code> <code>AvatarThumbnailType</code> <p>Type of avatar thumbnail you want look at enum.</p> <code>full_body</code> <code>size</code> <code>SizeTupleOrString</code> <p>size of the image.</p> <code>None</code> <code>image_format</code> <code>ThumbnailFormat</code> <p>Format of the image.</p> <code>png</code> <code>is_circular</code> <code>bool</code> <p>If the image is a circle yes or no.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Thumbnail]</code> <p>A list of Thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>async def get_user_avatar_thumbnails(\n        self,\n        users: List[UserOrUserId],\n        type: AvatarThumbnailType = AvatarThumbnailType.full_body,\n        size: SizeTupleOrString = None,\n        image_format: ThumbnailFormat = ThumbnailFormat.png,\n        is_circular: bool = False,\n) -&gt; List[Thumbnail]:\n    \"\"\"\n    Returns avatar thumbnails for each user ID passed.\n    The valid sizes depend on the `type` parameter.\n\n    | Size | full_body | headshot | bust |\n    |---|---|---|---|\n    | 30x30 | \u2714\ufe0f | \u274c | \u274c |\n    | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f |\n    | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c |\n    | 140x140 | \u2714\ufe0f | \u274c | \u274c |\n    | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 150x200 | \u2714\ufe0f | \u274c | \u274c |\n    | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 250x250 | \u2714\ufe0f | \u274c | \u274c |\n    | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f |\n    | 720x720 | \u2714\ufe0f | \u274c | \u274c |\n\n    Arguments:\n        users: Id of the users you want the thumbnails of.\n        type: Type of avatar thumbnail you want look at enum.\n        size: size of the image.\n        image_format: Format of the image.\n        is_circular: If the image is a circle yes or no.\n\n    Returns:\n        A list of Thumbnails.\n    \"\"\"\n    uri: str\n    if type == AvatarThumbnailType.full_body:\n        uri = \"avatar\"\n        size = size or (30, 30)\n    elif type == AvatarThumbnailType.bust:\n        uri = \"avatar-bust\"\n        size = size or (48, 48)\n    elif type == AvatarThumbnailType.headshot:\n        uri = \"avatar-headshot\"\n        size = size or (48, 48)\n    else:\n        raise ValueError(\"Avatar type is invalid.\")\n\n    thumbnails_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"thumbnails\", f\"v1/users/{uri}\"),\n        params={\n            \"userIds\": list(map(int, users)),\n            \"size\": _to_size_string(size),\n            \"format\": image_format.value,\n            \"isCircular\": is_circular,\n        },\n    )\n\n    thumbnails_data = thumbnails_response.json()[\"data\"]\n    return [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in thumbnails_data\n    ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy","title":"<code>ThumbnailReturnPolicy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The return policy for place/universe thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class ThumbnailReturnPolicy(Enum):\n    \"\"\"\n    The return policy for place/universe thumbnails.\n    \"\"\"\n\n    place_holder = \"PlaceHolder\"\n    auto_generated = \"AutoGenerated\"\n    force_auto_generated = \"ForceAutoGenerated\"\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.ThumbnailState","title":"<code>ThumbnailState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The current state of the thumbnail.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class ThumbnailState(Enum):\n    \"\"\"\n    The current state of the thumbnail.\n    \"\"\"\n\n    completed = \"Completed\"\n    in_review = \"InReview\"\n    pending = \"Pending\"\n    error = \"Error\"\n    moderated = \"Moderated\"\n    blocked = \"Blocked\"\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.UniverseThumbnails","title":"<code>UniverseThumbnails</code>","text":"<p>Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails.</p> <p>Attributes:</p> Name Type Description <code>universe_id</code> <code>int</code> <p>The id of the target of the image.</p> <code>error</code> <code>Optional[str]</code> <p>The errors you got.</p> <code>thumbnails</code> <code>List[Thumbnail]</code> <p>List of thumbnails.</p> Source code in <code>roblox/thumbnails.py</code> <pre><code>class UniverseThumbnails:\n    \"\"\"\n    Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails.\n\n    Attributes:\n        universe_id: The id of the target of the image.\n        error: The errors you got.\n        thumbnails: List of thumbnails.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: Shared object.\n            data: The data from the request.\n        \"\"\"\n        self._client: Client = client\n        # todo add base universe maby\n        self.universe_id: int = data[\"universeId\"]\n        self.error: Optional[str] = data[\"error\"]\n        self.thumbnails: List[Thumbnail] = [\n            Thumbnail(client=self._client, data=thumbnail_data)\n            for thumbnail_data in data[\"thumbnails\"]\n        ]\n</code></pre>"},{"location":"reference/thumbnails/#roblox.thumbnails.UniverseThumbnails.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Shared object.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/thumbnails.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: Shared object.\n        data: The data from the request.\n    \"\"\"\n    self._client: Client = client\n    # todo add base universe maby\n    self.universe_id: int = data[\"universeId\"]\n    self.error: Optional[str] = data[\"error\"]\n    self.thumbnails: List[Thumbnail] = [\n        Thumbnail(client=self._client, data=thumbnail_data)\n        for thumbnail_data in data[\"thumbnails\"]\n    ]\n</code></pre>"},{"location":"reference/universes/","title":"universes","text":"<p>This module contains classes intended to parse and deal with data from Roblox universe information endpoints.</p>"},{"location":"reference/universes/#roblox.universes.Universe","title":"<code>Universe</code>","text":"<p>             Bases: <code>BaseUniverse</code></p> <p>Represents the response data of https://games.roblox.com/v1/games.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of this specific universe</p> <code>root_place</code> <code>BasePlace</code> <p>The thumbnail provider object.</p> <code>name</code> <code>str</code> <p>The delivery provider object.</p> <code>description</code> <code>str</code> <p>The description of the game.</p> <code>creator_type</code> <code>Enum</code> <p>Is the creator a group or a user.</p> <code>creator</code> <code>Union[PartialUser, UniversePartialGroup]</code> <p>creator information.</p> <code>price</code> <code>Optional[int]</code> <p>how much you need to pay to play the game.</p> <code>allowed_gear_genres</code> <code>List[str]</code> <p>Unknown</p> <code>allowed_gear_categories</code> <code>List[str]</code> <p>Unknown</p> <code>is_genre_enforced</code> <code>bool</code> <p>Unknown</p> <code>copying_allowed</code> <code>bool</code> <p>are you allowed to copy the game.</p> <code>playing</code> <code>int</code> <p>amount of people currently playing the game.</p> <code>visits</code> <code>int</code> <p>amount of visits to the game.</p> <code>max_players</code> <code>int</code> <p>the maximum amount of players ber server.</p> <code>created</code> <code>datetime</code> <p>when the game was created.</p> <code>updated</code> <code>datetime</code> <p>when the game as been updated for the last time.</p> <code>studio_access_to_apis_allowed</code> <code>bool</code> <p>does studio have access to the apis.</p> <code>create_vip_servers_allowed</code> <code>bool</code> <p>can you create a vip server?</p> <code>universe_avatar_type</code> <code>UniverseAvatarType</code> <p>type of avatars in the game.</p> <code>genre</code> <code>UniverseGenre</code> <p>what genre the game is.</p> <code>is_all_genre</code> <code>bool</code> <p>if it is all genres?</p> <code>is_favorited_by_user</code> <code>bool</code> <p>if the authenticated user has it favorited.</p> <code>favorited_count</code> <code>int</code> <p>the total amount of people who favorited the game.</p> Source code in <code>roblox/universes.py</code> <pre><code>class Universe(BaseUniverse):\n    \"\"\"\n    Represents the response data of https://games.roblox.com/v1/games.\n\n    Attributes:\n        id: The ID of this specific universe\n        root_place: The thumbnail provider object.\n        name: The delivery provider object.\n        description: The description of the game.\n        creator_type: Is the creator a group or a user.\n        creator: creator information.\n        price: how much you need to pay to play the game.\n        allowed_gear_genres: Unknown\n        allowed_gear_categories: Unknown\n        is_genre_enforced: Unknown\n        copying_allowed: are you allowed to copy the game.\n        playing: amount of people currently playing the game.\n        visits: amount of visits to the game.\n        max_players: the maximum amount of players ber server.\n        created: when the game was created.\n        updated: when the game as been updated for the last time.\n        studio_access_to_apis_allowed: does studio have access to the apis.\n        create_vip_servers_allowed: can you create a vip server?\n        universe_avatar_type: type of avatars in the game.\n        genre: what genre the game is.\n        is_all_genre: if it is all genres?\n        is_favorited_by_user: if the authenticated user has it favorited.\n        favorited_count: the total amount of people who favorited the game.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The universe data.\n        \"\"\"\n\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n        super().__init__(client=client, universe_id=self.id)\n        self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n        self.name: str = data[\"name\"]\n        self.description: str = data[\"description\"]\n        self.creator_type: Enum = CreatorType(data[\"creator\"][\"type\"])\n        # isRNVAccount is not part of PartialUser, UniversePartialGroup\n        self.creator: Union[PartialUser, UniversePartialGroup]\n        if self.creator_type == CreatorType.group:\n            self.creator = UniversePartialGroup(client, data[\"creator\"])\n        elif self.creator_type == CreatorType.user:\n            self.creator = PartialUser(client, data[\"creator\"])\n        self.price: Optional[int] = data[\"price\"]\n        self.allowed_gear_genres: List[str] = data[\"allowedGearGenres\"]\n        self.allowed_gear_categories: List[str] = data[\"allowedGearCategories\"]\n        self.is_genre_enforced: bool = data[\"isGenreEnforced\"]\n        self.copying_allowed: bool = data[\"copyingAllowed\"]\n        self.playing: int = data[\"playing\"]\n        self.visits: int = data[\"visits\"]\n        self.max_players: int = data[\"maxPlayers\"]\n        self.created: datetime = parse(data[\"created\"])\n        self.updated: datetime = parse(data[\"updated\"])\n        self.studio_access_to_apis_allowed: bool = data[\"studioAccessToApisAllowed\"]\n        self.create_vip_servers_allowed: bool = data[\"createVipServersAllowed\"]\n        self.universe_avatar_type: UniverseAvatarType = UniverseAvatarType(data[\"universeAvatarType\"])\n        self.genre: UniverseGenre = UniverseGenre(data[\"genre\"])\n        self.is_all_genre: bool = data[\"isAllGenre\"]\n        # gameRating seems to be null across all games, so I omitted it from this class.\n        self.is_favorited_by_user: bool = data[\"isFavoritedByUser\"]\n        self.favorited_count: int = data[\"favoritedCount\"]\n</code></pre>"},{"location":"reference/universes/#roblox.universes.Universe.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The universe data.</p> required Source code in <code>roblox/universes.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The universe data.\n    \"\"\"\n\n    self._client: Client = client\n\n    self.id: int = data[\"id\"]\n    super().__init__(client=client, universe_id=self.id)\n    self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n    self.name: str = data[\"name\"]\n    self.description: str = data[\"description\"]\n    self.creator_type: Enum = CreatorType(data[\"creator\"][\"type\"])\n    # isRNVAccount is not part of PartialUser, UniversePartialGroup\n    self.creator: Union[PartialUser, UniversePartialGroup]\n    if self.creator_type == CreatorType.group:\n        self.creator = UniversePartialGroup(client, data[\"creator\"])\n    elif self.creator_type == CreatorType.user:\n        self.creator = PartialUser(client, data[\"creator\"])\n    self.price: Optional[int] = data[\"price\"]\n    self.allowed_gear_genres: List[str] = data[\"allowedGearGenres\"]\n    self.allowed_gear_categories: List[str] = data[\"allowedGearCategories\"]\n    self.is_genre_enforced: bool = data[\"isGenreEnforced\"]\n    self.copying_allowed: bool = data[\"copyingAllowed\"]\n    self.playing: int = data[\"playing\"]\n    self.visits: int = data[\"visits\"]\n    self.max_players: int = data[\"maxPlayers\"]\n    self.created: datetime = parse(data[\"created\"])\n    self.updated: datetime = parse(data[\"updated\"])\n    self.studio_access_to_apis_allowed: bool = data[\"studioAccessToApisAllowed\"]\n    self.create_vip_servers_allowed: bool = data[\"createVipServersAllowed\"]\n    self.universe_avatar_type: UniverseAvatarType = UniverseAvatarType(data[\"universeAvatarType\"])\n    self.genre: UniverseGenre = UniverseGenre(data[\"genre\"])\n    self.is_all_genre: bool = data[\"isAllGenre\"]\n    # gameRating seems to be null across all games, so I omitted it from this class.\n    self.is_favorited_by_user: bool = data[\"isFavoritedByUser\"]\n    self.favorited_count: int = data[\"favoritedCount\"]\n</code></pre>"},{"location":"reference/universes/#roblox.universes.UniverseAvatarType","title":"<code>UniverseAvatarType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The current avatar type of the universe.</p> Source code in <code>roblox/universes.py</code> <pre><code>class UniverseAvatarType(Enum):\n    \"\"\"\n    The current avatar type of the universe.\n    \"\"\"\n\n    R6 = \"MorphToR6\"\n    R15 = \"MorphToR15\"\n    player_choice = \"PlayerChoice\"\n</code></pre>"},{"location":"reference/universes/#roblox.universes.UniverseGenre","title":"<code>UniverseGenre</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The universe's genre.</p> Source code in <code>roblox/universes.py</code> <pre><code>class UniverseGenre(Enum):\n    \"\"\"\n    The universe's genre.\n    \"\"\"\n\n    all = \"All\"\n    building = \"Building\"\n    horror = \"Horror\"\n    town_and_city = \"Town and City\"\n    military = \"Military\"\n    comedy = \"Comedy\"\n    medieval = \"Medieval\"\n    adventure = \"Adventure\"\n    sci_fi = \"Sci-Fi\"\n    naval = \"Naval\"\n    fps = \"FPS\"\n    rpg = \"RPG\"\n    sports = \"Sports\"\n    fighting = \"Fighting\"\n    western = \"Western\"\n</code></pre>"},{"location":"reference/users/","title":"users","text":"<p>This module contains classes intended to parse and deal with data from Roblox user information endpoints.</p>"},{"location":"reference/users/#roblox.users.User","title":"<code>User</code>","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents a single conversation.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the current user.</p> <code>name</code> <code>str</code> <p>The name of the current user.</p> <code>display_name</code> <code>str</code> <p>The display name of the current user.</p> <code>external_app_display_name</code> <code>Optional[str]</code> <p>The external app display name of the current user.</p> <code>is_banned</code> <code>bool</code> <p>If the user is banned.</p> <code>description</code> <code>str</code> <p>The description the current user wrote for themself.</p> <code>created</code> <code>datetime</code> <p>When the user created their account.</p> <code>has_verified_badge</code> <code>bool</code> <p>If the user has a verified badge.</p> Source code in <code>roblox/users.py</code> <pre><code>class User(BaseUser):\n    \"\"\"\n    Represents a single conversation.\n\n    Attributes:\n        id: The id of the current user.\n        name: The name of the current user.\n        display_name: The display name of the current user.\n        external_app_display_name: The external app display name of the current user.\n        is_banned: If the user is banned.\n        description: The description the current user wrote for themself.\n        created: When the user created their account.\n        has_verified_badge: If the user has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: Client object.\n            data: The data from the request.\n        \"\"\"\n        super().__init__(client=client, user_id=data[\"id\"])\n\n        self._client: Client = client\n\n        self.name: str = data[\"name\"]\n        self.display_name: str = data[\"displayName\"]\n        self.external_app_display_name: Optional[str] = data[\"externalAppDisplayName\"]\n        self.id: int = data[\"id\"]\n        self.is_banned: bool = data[\"isBanned\"]\n        self.description: str = data[\"description\"]\n        self.created: datetime = parse(data[\"created\"])\n        self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n</code></pre>"},{"location":"reference/users/#roblox.users.User.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Client object.</p> required <code>data</code> <code>dict</code> <p>The data from the request.</p> required Source code in <code>roblox/users.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: Client object.\n        data: The data from the request.\n    \"\"\"\n    super().__init__(client=client, user_id=data[\"id\"])\n\n    self._client: Client = client\n\n    self.name: str = data[\"name\"]\n    self.display_name: str = data[\"displayName\"]\n    self.external_app_display_name: Optional[str] = data[\"externalAppDisplayName\"]\n    self.id: int = data[\"id\"]\n    self.is_banned: bool = data[\"isBanned\"]\n    self.description: str = data[\"description\"]\n    self.created: datetime = parse(data[\"created\"])\n    self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n</code></pre>"},{"location":"reference/wall/","title":"wall","text":"<p>Contains objects related to Roblox group walls.</p>"},{"location":"reference/wall/#roblox.wall.WallPost","title":"<code>WallPost</code>","text":"<p>             Bases: <code>WallPostRelationship</code></p> <p>Represents a post on a Roblox group wall.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The post ID.</p> <code>poster</code> <code>Optional[Member]</code> <p>The member who made the post.</p> <code>body</code> <code>str</code> <p>Body of the post.</p> <code>created</code> <code>datetime</code> <p>Creation date of the post.</p> <code>updated</code> <code>datetime</code> <p>Last updated date of the post.</p> Source code in <code>roblox/wall.py</code> <pre><code>class WallPost(WallPostRelationship):\n    \"\"\"\n    Represents a post on a Roblox group wall.\n\n    Attributes:\n        id: The post ID.\n        poster: The member who made the post.\n        body: Body of the post.\n        created: Creation date of the post.\n        updated: Last updated date of the post.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict, group: BaseGroup):\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n\n        super().__init__(\n            client=self._client,\n            post_id=self.id,\n            group=group\n        )\n\n        self.poster: Optional[Member] = data[\"poster\"] and Member(\n            client=self._client,\n            data=data[\"poster\"],\n            group=self.group\n        ) or None\n        self.body: str = data[\"body\"]\n        self.created: datetime = parse(data[\"created\"])\n        self.updated: datetime = parse(data[\"updated\"])\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} id={self.id} body={self.body!r} group={self.group}&gt;\"\n</code></pre>"},{"location":"reference/wall/#roblox.wall.WallPostRelationship","title":"<code>WallPostRelationship</code>","text":"<p>Represents a Roblox wall post ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The post ID.</p> <code>group</code> <code>BaseGroup</code> <p>The group whose wall this post exists on.</p> Source code in <code>roblox/wall.py</code> <pre><code>class WallPostRelationship:\n    \"\"\"\n    Represents a Roblox wall post ID.\n\n    Attributes:\n        id: The post ID.\n        group: The group whose wall this post exists on.\n    \"\"\"\n\n    def __init__(self, client: Client, post_id: int, group: Union[BaseGroup, int]):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            post_id: The post ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = post_id\n\n        self.group: BaseGroup\n\n        if isinstance(group, int):\n            self.group = BaseGroup(client=self._client, group_id=group)\n        else:\n            self.group = group\n\n    async def delete(self):\n        \"\"\"\n        Deletes this wall post.\n        \"\"\"\n        await self._client.requests.delete(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.group.id}/wall/posts/{self.id}\")\n        )\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} id={self.id} group={self.group}&gt;\"\n</code></pre>"},{"location":"reference/wall/#roblox.wall.WallPostRelationship.__init__","title":"<code>__init__(client, post_id, group)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>post_id</code> <code>int</code> <p>The post ID.</p> required Source code in <code>roblox/wall.py</code> <pre><code>def __init__(self, client: Client, post_id: int, group: Union[BaseGroup, int]):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        post_id: The post ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = post_id\n\n    self.group: BaseGroup\n\n    if isinstance(group, int):\n        self.group = BaseGroup(client=self._client, group_id=group)\n    else:\n        self.group = group\n</code></pre>"},{"location":"reference/wall/#roblox.wall.WallPostRelationship.delete","title":"<code>delete()</code>  <code>async</code>","text":"<p>Deletes this wall post.</p> Source code in <code>roblox/wall.py</code> <pre><code>async def delete(self):\n    \"\"\"\n    Deletes this wall post.\n    \"\"\"\n    await self._client.requests.delete(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.group.id}/wall/posts/{self.id}\")\n    )\n</code></pre>"},{"location":"reference/bases/","title":"bases","text":"<p>Contains base objects representing IDs on Roblox. As IDs represent objects on Roblox, you only need the ID of something to send requests for them. These bases represent one of those IDs.</p>"},{"location":"reference/bases/baseasset/","title":"baseasset","text":"<p>This file contains the BaseAsset object, which represents a Roblox asset ID.</p>"},{"location":"reference/bases/baseasset/#roblox.bases.baseasset.BaseAsset","title":"<code>BaseAsset</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox asset ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The asset ID.</p> Source code in <code>roblox/bases/baseasset.py</code> <pre><code>class BaseAsset(BaseItem):\n    \"\"\"\n    Represents a Roblox asset ID.\n\n    Attributes:\n        id: The asset ID.\n    \"\"\"\n\n    def __init__(self, client: Client, asset_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            asset_id: The asset ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = asset_id\n\n    async def get_resale_data(self) -&gt; AssetResaleData:\n        \"\"\"\n        Gets the asset's limited resale data.\n        The asset must be a limited item for this information to be present.\n\n        Returns:\n            The asset's limited resale data.\n        \"\"\"\n        resale_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"economy\", f\"v1/assets/{self.id}/resale-data\")\n        )\n        resale_data = resale_response.json()\n        return AssetResaleData(data=resale_data)\n</code></pre>"},{"location":"reference/bases/baseasset/#roblox.bases.baseasset.BaseAsset.__init__","title":"<code>__init__(client, asset_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>asset_id</code> <code>int</code> <p>The asset ID.</p> required Source code in <code>roblox/bases/baseasset.py</code> <pre><code>def __init__(self, client: Client, asset_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        asset_id: The asset ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = asset_id\n</code></pre>"},{"location":"reference/bases/baseasset/#roblox.bases.baseasset.BaseAsset.get_resale_data","title":"<code>get_resale_data()</code>  <code>async</code>","text":"<p>Gets the asset's limited resale data. The asset must be a limited item for this information to be present.</p> <p>Returns:</p> Type Description <code>AssetResaleData</code> <p>The asset's limited resale data.</p> Source code in <code>roblox/bases/baseasset.py</code> <pre><code>async def get_resale_data(self) -&gt; AssetResaleData:\n    \"\"\"\n    Gets the asset's limited resale data.\n    The asset must be a limited item for this information to be present.\n\n    Returns:\n        The asset's limited resale data.\n    \"\"\"\n    resale_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"economy\", f\"v1/assets/{self.id}/resale-data\")\n    )\n    resale_data = resale_response.json()\n    return AssetResaleData(data=resale_data)\n</code></pre>"},{"location":"reference/bases/basebadge/","title":"basebadge","text":"<p>This file contains the BaseBadge object, which represents a Roblox badge ID.</p>"},{"location":"reference/bases/basebadge/#roblox.bases.basebadge.BaseBadge","title":"<code>BaseBadge</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox badge ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The badge ID.</p> Source code in <code>roblox/bases/basebadge.py</code> <pre><code>class BaseBadge(BaseItem):\n    \"\"\"\n    Represents a Roblox badge ID.\n\n    Attributes:\n        id: The badge ID.\n    \"\"\"\n\n    def __init__(self, client: Client, badge_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            badge_id: The badge ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = badge_id\n</code></pre>"},{"location":"reference/bases/basebadge/#roblox.bases.basebadge.BaseBadge.__init__","title":"<code>__init__(client, badge_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>badge_id</code> <code>int</code> <p>The badge ID.</p> required Source code in <code>roblox/bases/basebadge.py</code> <pre><code>def __init__(self, client: Client, badge_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        badge_id: The badge ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = badge_id\n</code></pre>"},{"location":"reference/bases/baseconversation/","title":"baseconversation","text":"<p>This file contains the BaseConversation object, which represents a Roblox conversation ID.</p>"},{"location":"reference/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation","title":"<code>BaseConversation</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox chat conversation ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The conversation ID.</p> Source code in <code>roblox/bases/baseconversation.py</code> <pre><code>class BaseConversation(BaseItem):\n    \"\"\"\n    Represents a Roblox chat conversation ID.\n\n    Attributes:\n        id: The conversation ID.\n    \"\"\"\n\n    def __init__(self, client: Client, conversation_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            conversation_id: The conversation ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = conversation_id\n</code></pre>"},{"location":"reference/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation.__init__","title":"<code>__init__(client, conversation_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>conversation_id</code> <code>int</code> <p>The conversation ID.</p> required Source code in <code>roblox/bases/baseconversation.py</code> <pre><code>def __init__(self, client: Client, conversation_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        conversation_id: The conversation ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = conversation_id\n</code></pre>"},{"location":"reference/bases/basegamepass/","title":"basegamepass","text":"<p>This file contains the BaseGamePass object, which represents a Roblox gamepass ID.</p>"},{"location":"reference/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass","title":"<code>BaseGamePass</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox gamepass ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The gamepass ID.</p> Source code in <code>roblox/bases/basegamepass.py</code> <pre><code>class BaseGamePass(BaseItem):\n    \"\"\"\n    Represents a Roblox gamepass ID.\n\n    Attributes:\n        id: The gamepass ID.\n    \"\"\"\n\n    def __init__(self, client: Client, gamepass_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            gamepass_id: The gamepass ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = gamepass_id\n</code></pre>"},{"location":"reference/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass.__init__","title":"<code>__init__(client, gamepass_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>gamepass_id</code> <code>int</code> <p>The gamepass ID.</p> required Source code in <code>roblox/bases/basegamepass.py</code> <pre><code>def __init__(self, client: Client, gamepass_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        gamepass_id: The gamepass ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = gamepass_id\n</code></pre>"},{"location":"reference/bases/basegroup/","title":"basegroup","text":"<p>This file contains the BaseGroup object, which represents a Roblox group ID. It also contains the GroupSettings object, which represents a group's settings.</p>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup","title":"<code>BaseGroup</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox group ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The group's ID.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>class BaseGroup(BaseItem):\n    \"\"\"\n    Represents a Roblox group ID.\n\n    Attributes:\n        id: The group's ID.\n    \"\"\"\n\n    def __init__(self, client: Client, group_id: int):\n        \"\"\"\n        Parameters:\n            client: The Client this object belongs to.\n            group_id: The group's ID.\n        \"\"\"\n        self._client: Client = client\n        self.id: int = group_id\n\n    async def get_settings(self) -&gt; GroupSettings:\n        \"\"\"\n        Gets all the settings of the selected group\n\n        Returns:\n            The group's settings.\n        \"\"\"\n        settings_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/settings\"),\n        )\n        settings_data = settings_response.json()\n        return GroupSettings(\n            client=self._client,\n            data=settings_data\n        )\n\n    async def update_settings(\n            self,\n            is_approval_required: Optional[bool] = None,\n            is_builders_club_required: Optional[bool] = None,\n            are_enemies_allowed: Optional[bool] = None,\n            are_group_funds_visible: Optional[bool] = None,\n            are_group_games_visible: Optional[bool] = None,\n    ) -&gt; None:\n        \"\"\"\n        Updates this group's settings. Passing `None` will default this setting to the value already present in the\n\n        Arguments:\n            is_approval_required: Whether approval is required via a join request before joining this group.\n            is_builders_club_required: Whether users are required to have a Premium subscription to join this group.\n            are_enemies_allowed: Whether this group can send and recieve enemy requests.\n            are_group_funds_visible: Whether the group fund balance is visible to external users.\n            are_group_games_visible: Whether group games are visible to external users.\n        \"\"\"\n        await self._client.requests.patch(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/settings\"),\n            json={\n                \"isApprovalRequired\": is_approval_required,\n                \"isBuildersClubRequired\": is_builders_club_required,\n                \"areEnemiesAllowed\": are_enemies_allowed,\n                \"areGroupFundsVisible\": are_group_funds_visible,\n                \"areGroupGamesVisible\": are_group_games_visible,\n            }\n        )\n\n    def get_members(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                    max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets all members of a group.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing the group's members.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: Member(client=client, data=data, group=self)\n        )\n\n    def get_member(self, user: Union[int, BaseUser]) -&gt; MemberRelationship:\n        \"\"\"\n        Gets a member of a group.\n\n        Arguments:\n            user: A BaseUser or a User ID.\n\n        Returns:\n            A member.\n        \"\"\"\n        return MemberRelationship(\n            client=self._client,\n            user=user,\n            group=self\n        )\n\n    async def get_member_by_username(self, username: str, exclude_banned_users: bool = False) -&gt; MemberRelationship:\n        \"\"\"\n        Gets a member of a group by username.\n\n        Arguments:\n            username: A Roblox username.\n            exclude_banned_users: Whether to exclude banned users from the data.\n\n        Returns:\n            A member.\n        \"\"\"\n\n        user: RequestedUsernamePartialUser = await self._client.get_user_by_username(\n            username=username,\n            exclude_banned_users=exclude_banned_users,\n            expand=False\n        )\n\n        return MemberRelationship(\n            client=self._client,\n            user=user,\n            group=self\n        )\n\n    async def get_roles(self) -&gt; List[Role]:\n        \"\"\"\n        Gets all roles of the group.\n\n        Returns:\n            A list of the group's roles.\n        \"\"\"\n        roles_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/roles\")\n        )\n        roles_data = roles_response.json()\n        return [Role(\n            client=self._client,\n            data=role_data,\n            group=self\n        ) for role_data in roles_data[\"roles\"]]\n\n    async def set_role(self, user: UserOrUserId, role: RoleOrRoleId) -&gt; None:\n        \"\"\"\n        Sets a users role.\n\n        Arguments:\n            user: The user who's rank will be changed.\n            role: The new role.\n        \"\"\"\n        await self._client.requests.patch(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users/{int(user)}\"),\n            json={\n                \"roleId\": int(role)\n            }\n        )\n\n    async def set_rank(self, user: UserOrUserId, rank: int) -&gt; None:\n        \"\"\"\n        Changes a member's role using a rank number.\n\n        Arguments:\n            user: The user who's rank will be changed.\n            rank: The rank number to change to. (1-255)\n        \"\"\"\n        roles = await self.get_roles()\n\n        role = next((role for role in roles if role.rank == rank), None)\n        if not role:\n            raise InvalidRole(f\"Role with rank number {rank} does not exist.\")\n\n        await self.set_role(int(user), role)\n\n    async def kick_user(self, user: UserOrUserId):\n        \"\"\"\n        Kicks a user from a group.\n\n        Arguments:\n            user: The user who will be kicked from the group.\n        \"\"\"\n        await self._client.requests.delete(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users/{int(user)}\")\n        )\n\n    async def delete_all_messages(self, user: UserOrUserId):\n        \"\"\"\n        Deletes all messages from a user in a group.\n\n        Arguments:\n            user: The user who will have their messages deleted.\n        \"\"\"\n        await self._client.requests.delete(\n            url=self._client.url_generator.get_url(\"groups\", f\"/v1/groups/{self.id}/wall/users/{int(user)}/posts\")\n        )\n\n    def get_wall_posts(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                       max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets wall posts of a group.\n\n        Arguments:\n            page_size: How many posts should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns: A PageIterator.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"groups\", f\"v2/groups/{self.id}/wall/posts\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: WallPost(client=client, data=data, group=self)\n        )\n\n    def get_wall_post(self, post_id: int) -&gt; WallPostRelationship:\n        \"\"\"\n        Gets a wall post from an ID.\n\n        Arguments:\n            post_id: A post ID.\n\n        Returns:\n            A basic wall post relationship.\n        \"\"\"\n        return WallPostRelationship(\n            client=self._client,\n            post_id=post_id,\n            group=self\n        )\n\n    def get_join_requests(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                          max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets all of this group's join requests.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing group join requests.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: JoinRequest(client=client, data=data, group=self)\n        )\n\n    async def get_join_request(self, user: Union[int, BaseUser]) -&gt; Optional[JoinRequest]:\n        \"\"\"\n        Gets a specific user's join request to this group.\n\n        Returns:\n            The user's join request, or None if they have no active join request.\n        \"\"\"\n        join_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n        )\n        join_data = join_response.json()\n        return join_data and JoinRequest(\n\n            client=self._client,\n            data=join_data,\n            group=self\n        ) or None\n\n    async def accept_user(self, user: Union[int, BaseUser, JoinRequest]):\n        \"\"\"\n        Accepts a user's request to join this group.\n\n        Arguments:\n            user: The user to accept into this group.\n        \"\"\"\n        await self._client.requests.post(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n        )\n\n    async def decline_user(self, user: Union[int, BaseUser, JoinRequest]):\n        \"\"\"\n        Declines a user's request to join this group.\n\n        Arguments:\n            user: The user to decline from this group.\n        \"\"\"\n        await self._client.requests.delete(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n        )\n\n    async def update_shout(self, message: str) -&gt; Optional[Shout]:\n        \"\"\"\n        Updates the shout.\n\n        Arguments:\n            message: The new shout message.\n        \"\"\"\n        shout_response = await self._client.requests.patch(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/status\"),\n            json={\n                \"message\": message\n            }\n        )\n        shout_data = shout_response.json()\n\n        new_shout: Optional[Shout] = shout_data and Shout(\n            client=self._client,\n            data=shout_data\n        ) or None\n\n        return new_shout\n\n    async def get_social_links(self) -&gt; List[SocialLink]:\n        \"\"\"\n        Gets the group's social links.\n\n        Returns:\n            A list of the universe's social links.\n        \"\"\"\n\n        links_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/social-links\")\n        )\n        links_data = links_response.json()[\"data\"]\n        return [SocialLink(client=self._client, data=link_data) for link_data in links_data]\n\n    def get_name_history(\n            self, \n            page_size: int = 10, \n            sort_order: SortOrder = SortOrder.Ascending, \n            max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Grabs the groups's name history.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing the groups's name history.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\n                \"groups\", f\"v1/groups/{self.id}/name-history\"\n            ),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: GroupNameHistoryItem(client=client, data=data),\n        )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.__init__","title":"<code>__init__(client, group_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>group_id</code> <code>int</code> <p>The group's ID.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def __init__(self, client: Client, group_id: int):\n    \"\"\"\n    Parameters:\n        client: The Client this object belongs to.\n        group_id: The group's ID.\n    \"\"\"\n    self._client: Client = client\n    self.id: int = group_id\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.accept_user","title":"<code>accept_user(user)</code>  <code>async</code>","text":"<p>Accepts a user's request to join this group.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[int, BaseUser, JoinRequest]</code> <p>The user to accept into this group.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def accept_user(self, user: Union[int, BaseUser, JoinRequest]):\n    \"\"\"\n    Accepts a user's request to join this group.\n\n    Arguments:\n        user: The user to accept into this group.\n    \"\"\"\n    await self._client.requests.post(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.decline_user","title":"<code>decline_user(user)</code>  <code>async</code>","text":"<p>Declines a user's request to join this group.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[int, BaseUser, JoinRequest]</code> <p>The user to decline from this group.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def decline_user(self, user: Union[int, BaseUser, JoinRequest]):\n    \"\"\"\n    Declines a user's request to join this group.\n\n    Arguments:\n        user: The user to decline from this group.\n    \"\"\"\n    await self._client.requests.delete(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.delete_all_messages","title":"<code>delete_all_messages(user)</code>  <code>async</code>","text":"<p>Deletes all messages from a user in a group.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserOrUserId</code> <p>The user who will have their messages deleted.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def delete_all_messages(self, user: UserOrUserId):\n    \"\"\"\n    Deletes all messages from a user in a group.\n\n    Arguments:\n        user: The user who will have their messages deleted.\n    \"\"\"\n    await self._client.requests.delete(\n        url=self._client.url_generator.get_url(\"groups\", f\"/v1/groups/{self.id}/wall/users/{int(user)}/posts\")\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_request","title":"<code>get_join_request(user)</code>  <code>async</code>","text":"<p>Gets a specific user's join request to this group.</p> <p>Returns:</p> Type Description <code>Optional[JoinRequest]</code> <p>The user's join request, or None if they have no active join request.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def get_join_request(self, user: Union[int, BaseUser]) -&gt; Optional[JoinRequest]:\n    \"\"\"\n    Gets a specific user's join request to this group.\n\n    Returns:\n        The user's join request, or None if they have no active join request.\n    \"\"\"\n    join_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests/users/{int(user)}\")\n    )\n    join_data = join_response.json()\n    return join_data and JoinRequest(\n\n        client=self._client,\n        data=join_data,\n        group=self\n    ) or None\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_requests","title":"<code>get_join_requests(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets all of this group's join requests.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing group join requests.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_join_requests(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                      max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets all of this group's join requests.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing group join requests.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/join-requests\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: JoinRequest(client=client, data=data, group=self)\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member","title":"<code>get_member(user)</code>","text":"<p>Gets a member of a group.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[int, BaseUser]</code> <p>A BaseUser or a User ID.</p> required <p>Returns:</p> Type Description <code>MemberRelationship</code> <p>A member.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_member(self, user: Union[int, BaseUser]) -&gt; MemberRelationship:\n    \"\"\"\n    Gets a member of a group.\n\n    Arguments:\n        user: A BaseUser or a User ID.\n\n    Returns:\n        A member.\n    \"\"\"\n    return MemberRelationship(\n        client=self._client,\n        user=user,\n        group=self\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member_by_username","title":"<code>get_member_by_username(username, exclude_banned_users=False)</code>  <code>async</code>","text":"<p>Gets a member of a group by username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>A Roblox username.</p> required <code>exclude_banned_users</code> <code>bool</code> <p>Whether to exclude banned users from the data.</p> <code>False</code> <p>Returns:</p> Type Description <code>MemberRelationship</code> <p>A member.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def get_member_by_username(self, username: str, exclude_banned_users: bool = False) -&gt; MemberRelationship:\n    \"\"\"\n    Gets a member of a group by username.\n\n    Arguments:\n        username: A Roblox username.\n        exclude_banned_users: Whether to exclude banned users from the data.\n\n    Returns:\n        A member.\n    \"\"\"\n\n    user: RequestedUsernamePartialUser = await self._client.get_user_by_username(\n        username=username,\n        exclude_banned_users=exclude_banned_users,\n        expand=False\n    )\n\n    return MemberRelationship(\n        client=self._client,\n        user=user,\n        group=self\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_members","title":"<code>get_members(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets all members of a group.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing the group's members.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_members(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets all members of a group.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing the group's members.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: Member(client=client, data=data, group=self)\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_name_history","title":"<code>get_name_history(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Grabs the groups's name history.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing the groups's name history.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_name_history(\n        self, \n        page_size: int = 10, \n        sort_order: SortOrder = SortOrder.Ascending, \n        max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Grabs the groups's name history.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing the groups's name history.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\n            \"groups\", f\"v1/groups/{self.id}/name-history\"\n        ),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: GroupNameHistoryItem(client=client, data=data),\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_roles","title":"<code>get_roles()</code>  <code>async</code>","text":"<p>Gets all roles of the group.</p> <p>Returns:</p> Type Description <code>List[Role]</code> <p>A list of the group's roles.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def get_roles(self) -&gt; List[Role]:\n    \"\"\"\n    Gets all roles of the group.\n\n    Returns:\n        A list of the group's roles.\n    \"\"\"\n    roles_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/roles\")\n    )\n    roles_data = roles_response.json()\n    return [Role(\n        client=self._client,\n        data=role_data,\n        group=self\n    ) for role_data in roles_data[\"roles\"]]\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_settings","title":"<code>get_settings()</code>  <code>async</code>","text":"<p>Gets all the settings of the selected group</p> <p>Returns:</p> Type Description <code>GroupSettings</code> <p>The group's settings.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def get_settings(self) -&gt; GroupSettings:\n    \"\"\"\n    Gets all the settings of the selected group\n\n    Returns:\n        The group's settings.\n    \"\"\"\n    settings_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/settings\"),\n    )\n    settings_data = settings_response.json()\n    return GroupSettings(\n        client=self._client,\n        data=settings_data\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_social_links","title":"<code>get_social_links()</code>  <code>async</code>","text":"<p>Gets the group's social links.</p> <p>Returns:</p> Type Description <code>List[SocialLink]</code> <p>A list of the universe's social links.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def get_social_links(self) -&gt; List[SocialLink]:\n    \"\"\"\n    Gets the group's social links.\n\n    Returns:\n        A list of the universe's social links.\n    \"\"\"\n\n    links_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/social-links\")\n    )\n    links_data = links_response.json()[\"data\"]\n    return [SocialLink(client=self._client, data=link_data) for link_data in links_data]\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_post","title":"<code>get_wall_post(post_id)</code>","text":"<p>Gets a wall post from an ID.</p> <p>Parameters:</p> Name Type Description Default <code>post_id</code> <code>int</code> <p>A post ID.</p> required <p>Returns:</p> Type Description <code>WallPostRelationship</code> <p>A basic wall post relationship.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_wall_post(self, post_id: int) -&gt; WallPostRelationship:\n    \"\"\"\n    Gets a wall post from an ID.\n\n    Arguments:\n        post_id: A post ID.\n\n    Returns:\n        A basic wall post relationship.\n    \"\"\"\n    return WallPostRelationship(\n        client=self._client,\n        post_id=post_id,\n        group=self\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_posts","title":"<code>get_wall_posts(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets wall posts of a group.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many posts should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def get_wall_posts(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                   max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets wall posts of a group.\n\n    Arguments:\n        page_size: How many posts should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns: A PageIterator.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"groups\", f\"v2/groups/{self.id}/wall/posts\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: WallPost(client=client, data=data, group=self)\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.kick_user","title":"<code>kick_user(user)</code>  <code>async</code>","text":"<p>Kicks a user from a group.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserOrUserId</code> <p>The user who will be kicked from the group.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def kick_user(self, user: UserOrUserId):\n    \"\"\"\n    Kicks a user from a group.\n\n    Arguments:\n        user: The user who will be kicked from the group.\n    \"\"\"\n    await self._client.requests.delete(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users/{int(user)}\")\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_rank","title":"<code>set_rank(user, rank)</code>  <code>async</code>","text":"<p>Changes a member's role using a rank number.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserOrUserId</code> <p>The user who's rank will be changed.</p> required <code>rank</code> <code>int</code> <p>The rank number to change to. (1-255)</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def set_rank(self, user: UserOrUserId, rank: int) -&gt; None:\n    \"\"\"\n    Changes a member's role using a rank number.\n\n    Arguments:\n        user: The user who's rank will be changed.\n        rank: The rank number to change to. (1-255)\n    \"\"\"\n    roles = await self.get_roles()\n\n    role = next((role for role in roles if role.rank == rank), None)\n    if not role:\n        raise InvalidRole(f\"Role with rank number {rank} does not exist.\")\n\n    await self.set_role(int(user), role)\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_role","title":"<code>set_role(user, role)</code>  <code>async</code>","text":"<p>Sets a users role.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserOrUserId</code> <p>The user who's rank will be changed.</p> required <code>role</code> <code>RoleOrRoleId</code> <p>The new role.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def set_role(self, user: UserOrUserId, role: RoleOrRoleId) -&gt; None:\n    \"\"\"\n    Sets a users role.\n\n    Arguments:\n        user: The user who's rank will be changed.\n        role: The new role.\n    \"\"\"\n    await self._client.requests.patch(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/users/{int(user)}\"),\n        json={\n            \"roleId\": int(role)\n        }\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_settings","title":"<code>update_settings(is_approval_required=None, is_builders_club_required=None, are_enemies_allowed=None, are_group_funds_visible=None, are_group_games_visible=None)</code>  <code>async</code>","text":"<p>Updates this group's settings. Passing <code>None</code> will default this setting to the value already present in the</p> <p>Parameters:</p> Name Type Description Default <code>is_approval_required</code> <code>Optional[bool]</code> <p>Whether approval is required via a join request before joining this group.</p> <code>None</code> <code>is_builders_club_required</code> <code>Optional[bool]</code> <p>Whether users are required to have a Premium subscription to join this group.</p> <code>None</code> <code>are_enemies_allowed</code> <code>Optional[bool]</code> <p>Whether this group can send and recieve enemy requests.</p> <code>None</code> <code>are_group_funds_visible</code> <code>Optional[bool]</code> <p>Whether the group fund balance is visible to external users.</p> <code>None</code> <code>are_group_games_visible</code> <code>Optional[bool]</code> <p>Whether group games are visible to external users.</p> <code>None</code> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def update_settings(\n        self,\n        is_approval_required: Optional[bool] = None,\n        is_builders_club_required: Optional[bool] = None,\n        are_enemies_allowed: Optional[bool] = None,\n        are_group_funds_visible: Optional[bool] = None,\n        are_group_games_visible: Optional[bool] = None,\n) -&gt; None:\n    \"\"\"\n    Updates this group's settings. Passing `None` will default this setting to the value already present in the\n\n    Arguments:\n        is_approval_required: Whether approval is required via a join request before joining this group.\n        is_builders_club_required: Whether users are required to have a Premium subscription to join this group.\n        are_enemies_allowed: Whether this group can send and recieve enemy requests.\n        are_group_funds_visible: Whether the group fund balance is visible to external users.\n        are_group_games_visible: Whether group games are visible to external users.\n    \"\"\"\n    await self._client.requests.patch(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/settings\"),\n        json={\n            \"isApprovalRequired\": is_approval_required,\n            \"isBuildersClubRequired\": is_builders_club_required,\n            \"areEnemiesAllowed\": are_enemies_allowed,\n            \"areGroupFundsVisible\": are_group_funds_visible,\n            \"areGroupGamesVisible\": are_group_games_visible,\n        }\n    )\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_shout","title":"<code>update_shout(message)</code>  <code>async</code>","text":"<p>Updates the shout.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The new shout message.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def update_shout(self, message: str) -&gt; Optional[Shout]:\n    \"\"\"\n    Updates the shout.\n\n    Arguments:\n        message: The new shout message.\n    \"\"\"\n    shout_response = await self._client.requests.patch(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/groups/{self.id}/status\"),\n        json={\n            \"message\": message\n        }\n    )\n    shout_data = shout_response.json()\n\n    new_shout: Optional[Shout] = shout_data and Shout(\n        client=self._client,\n        data=shout_data\n    ) or None\n\n    return new_shout\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.GroupNameHistoryItem","title":"<code>GroupNameHistoryItem</code>","text":"<p>Represents a group's previous name.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The group's previous name.</p> <code>created</code> <code>datetime</code> <p>A datetime object representing when this name was changed.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>class GroupNameHistoryItem:\n    \"\"\"\n    Represents a group's previous name.\n\n    Attributes:\n        name: The group's previous name.\n        created: A datetime object representing when this name was changed.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            data: The group's previous name data.\n        \"\"\"\n\n        self._client: Client = client\n        self.name: str = data[\"name\"]\n        self.created: datetime = parse(data[\"created\"])\n\n    def __repr__(self):\n        return f\"&lt;{self.__class__.__name__} name={self.name!r} created={self.created}&gt;\"\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.GroupNameHistoryItem.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>data</code> <code>dict</code> <p>The group's previous name data.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        data: The group's previous name data.\n    \"\"\"\n\n    self._client: Client = client\n    self.name: str = data[\"name\"]\n    self.created: datetime = parse(data[\"created\"])\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.GroupSettings","title":"<code>GroupSettings</code>","text":"<p>Represents a group's settings.</p> <p>Attributes:</p> Name Type Description <code>is_approval_required</code> <code>bool</code> <p>Whether approval is required to join this group.</p> <code>is_builders_club_required</code> <code>bool</code> <p>Whether a membership is required to join this group.</p> <code>are_enemies_allowed</code> <code>bool</code> <p>Whether group enemies are allowed.</p> <code>are_group_funds_visible</code> <code>bool</code> <p>Whether group funds are visible.</p> <code>are_group_games_visible</code> <code>bool</code> <p>Whether group games are visible.</p> <code>is_group_name_change_enabled</code> <code>bool</code> <p>Whether group name changes are enabled.</p> <code>can_change_group_name</code> <code>bool</code> <p>Whether the name of this group can be changed.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>class GroupSettings:\n    \"\"\"\n    Represents a group's settings.\n\n    Attributes:\n        is_approval_required: Whether approval is required to join this group.\n        is_builders_club_required: Whether a membership is required to join this group.\n        are_enemies_allowed: Whether group enemies are allowed.\n        are_group_funds_visible: Whether group funds are visible.\n        are_group_games_visible: Whether group games are visible.\n        is_group_name_change_enabled: Whether group name changes are enabled.\n        can_change_group_name: Whether the name of this group can be changed.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            data: The group settings data.\n        \"\"\"\n\n        self._client: Client = client\n        self.is_approval_required: bool = data[\"isApprovalRequired\"]\n        self.is_builders_club_required: bool = data[\"isBuildersClubRequired\"]\n        self.are_enemies_allowed: bool = data[\"areEnemiesAllowed\"]\n        self.are_group_funds_visible: bool = data[\"areGroupFundsVisible\"]\n        self.are_group_games_visible: bool = data[\"areGroupGamesVisible\"]\n        self.is_group_name_change_enabled: bool = data[\"isGroupNameChangeEnabled\"]\n        self.can_change_group_name: bool = data[\"canChangeGroupName\"]\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.GroupSettings.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>data</code> <code>dict</code> <p>The group settings data.</p> required Source code in <code>roblox/bases/basegroup.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        data: The group settings data.\n    \"\"\"\n\n    self._client: Client = client\n    self.is_approval_required: bool = data[\"isApprovalRequired\"]\n    self.is_builders_club_required: bool = data[\"isBuildersClubRequired\"]\n    self.are_enemies_allowed: bool = data[\"areEnemiesAllowed\"]\n    self.are_group_funds_visible: bool = data[\"areGroupFundsVisible\"]\n    self.are_group_games_visible: bool = data[\"areGroupGamesVisible\"]\n    self.is_group_name_change_enabled: bool = data[\"isGroupNameChangeEnabled\"]\n    self.can_change_group_name: bool = data[\"canChangeGroupName\"]\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.JoinRequest","title":"<code>JoinRequest</code>","text":"<p>Represents a group join request.</p> <p>Attributes:</p> Name Type Description <code>created</code> <code>datetime</code> <p>When this join request was sent.</p> <code>requester</code> <code>PartialUser</code> <p>The user that sent the join request.</p> <code>group</code> <code>BaseGroup</code> <p>The parent group that this join request is linked to.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>class JoinRequest:\n    \"\"\"\n    Represents a group join request.\n\n    Attributes:\n        created: When this join request was sent.\n        requester: The user that sent the join request.\n        group: The parent group that this join request is linked to.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict, group: Union[BaseGroup, int]):\n        self._client: Client = client\n        self.created: datetime = parse(data[\"created\"])\n        self.requester: PartialUser = PartialUser(client=self._client, data=data[\"requester\"])\n        self.group: BaseGroup\n        if isinstance(group, int):\n            self.group = BaseGroup(client=self._client, group_id=group)\n        else:\n            self.group = group\n\n    def __int__(self):\n        return self.requester.id\n\n    async def accept(self):\n        \"\"\"\n        Accepts this join request.\n        \"\"\"\n        await self.group.accept_user(self)\n\n    async def decline(self):\n        \"\"\"\n        Declines this join request.\n        \"\"\"\n        await self.group.decline_user(self)\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.JoinRequest.accept","title":"<code>accept()</code>  <code>async</code>","text":"<p>Accepts this join request.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def accept(self):\n    \"\"\"\n    Accepts this join request.\n    \"\"\"\n    await self.group.accept_user(self)\n</code></pre>"},{"location":"reference/bases/basegroup/#roblox.bases.basegroup.JoinRequest.decline","title":"<code>decline()</code>  <code>async</code>","text":"<p>Declines this join request.</p> Source code in <code>roblox/bases/basegroup.py</code> <pre><code>async def decline(self):\n    \"\"\"\n    Declines this join request.\n    \"\"\"\n    await self.group.decline_user(self)\n</code></pre>"},{"location":"reference/bases/baseinstance/","title":"baseinstance","text":"<p>This file contains the BaseInstance object, which represents a Roblox instance ID.</p>"},{"location":"reference/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance","title":"<code>BaseInstance</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox instance ID. Instance IDs represent the ownership of a single Roblox item.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The instance ID.</p> Source code in <code>roblox/bases/baseinstance.py</code> <pre><code>class BaseInstance(BaseItem):\n    \"\"\"\n    Represents a Roblox instance ID.\n    Instance IDs represent the ownership of a single Roblox item.\n\n    Attributes:\n        id: The instance ID.\n    \"\"\"\n\n    def __init__(self, client: Client, instance_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            instance_id: The asset instance ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = instance_id\n</code></pre>"},{"location":"reference/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance.__init__","title":"<code>__init__(client, instance_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>instance_id</code> <code>int</code> <p>The asset instance ID.</p> required Source code in <code>roblox/bases/baseinstance.py</code> <pre><code>def __init__(self, client: Client, instance_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        instance_id: The asset instance ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = instance_id\n</code></pre>"},{"location":"reference/bases/baseitem/","title":"baseitem","text":"<p>This file contains the BaseItem class, which all bases inherit.</p>"},{"location":"reference/bases/baseitem/#roblox.bases.baseitem.BaseItem","title":"<code>BaseItem</code>","text":"<p>This object represents a base Roblox item. All other bases inherit this object. This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal.</p> Source code in <code>roblox/bases/baseitem.py</code> <pre><code>class BaseItem:\n    \"\"\"\n    This object represents a base Roblox item. All other bases inherit this object.\n    This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal.\n    \"\"\"\n    id = None\n\n    def __repr__(self):\n        attributes_repr = \"\".join(f\" {key}={value!r}\" for key, value in self.__dict__.items() if not key.startswith(\"_\"))\n        return f\"&lt;{self.__class__.__name__}{attributes_repr}&gt;\"\n\n    def __int__(self):\n        return self.id\n\n    def __eq__(self, other):\n        return isinstance(other, self.__class__) and other.id == self.id\n\n    def __ne__(self, other):\n        if isinstance(other, self.__class__):\n            return other.id != self.id\n        return True\n</code></pre>"},{"location":"reference/bases/basejob/","title":"basejob","text":"<p>This file contains the BaseJob object, which represents a Roblox job ID.</p>"},{"location":"reference/bases/basejob/#roblox.bases.basejob.BaseJob","title":"<code>BaseJob</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents Roblox job ID.</p> <p>Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub here.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The job ID.</p> Source code in <code>roblox/bases/basejob.py</code> <pre><code>class BaseJob(BaseItem):\n    \"\"\"\n    Represents Roblox job ID.\n\n    Job IDs are UUIDs that represent a single game server instance.\n    Learn more on the Developer Hub [here](https://developer.roblox.com/en-us/api-reference/property/DataModel/JobId).\n\n    Attributes:\n        id: The job ID.\n    \"\"\"\n\n    def __init__(self, client: Client, job_id: str):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            job_id: The job ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: str = job_id\n</code></pre>"},{"location":"reference/bases/basejob/#roblox.bases.basejob.BaseJob.__init__","title":"<code>__init__(client, job_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>job_id</code> <code>str</code> <p>The job ID.</p> required Source code in <code>roblox/bases/basejob.py</code> <pre><code>def __init__(self, client: Client, job_id: str):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        job_id: The job ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: str = job_id\n</code></pre>"},{"location":"reference/bases/baseplace/","title":"baseplace","text":"<p>This file contains the BasePlace object, which represents a Roblox place ID.</p>"},{"location":"reference/bases/baseplace/#roblox.bases.baseplace.BasePlace","title":"<code>BasePlace</code>","text":"<p>             Bases: <code>BaseAsset</code></p> <p>Represents a Roblox place ID. Places are a form of Asset and as such this object derives from BaseAsset.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The place ID.</p> Source code in <code>roblox/bases/baseplace.py</code> <pre><code>class BasePlace(BaseAsset):\n    \"\"\"\n    Represents a Roblox place ID.\n    Places are a form of Asset and as such this object derives from BaseAsset.\n\n    Attributes:\n        id: The place ID.\n    \"\"\"\n\n    def __init__(self, client: Client, place_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            place_id: The place ID.\n        \"\"\"\n\n        super().__init__(client, place_id)\n\n        self._client: Client = client\n        self.id: int = place_id\n\n    async def get_instances(self, start_index: int = 0):\n        \"\"\"\n        Returns a list of this place's current active servers, known in the API as \"game instances\".\n        This list always contains 10 items or fewer.\n        For more items, add 10 to the start index and repeat until no more items are available.\n\n        !!! warning\n            This function has been deprecated. The Roblox endpoint used by this function has been removed. Please update any code using this method to use \n\n        Arguments:\n            start_index: Where to start in the server index.\n        \"\"\"\n        from ..jobs import GameInstances\n\n        instances_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"www\", f\"games/getgameinstancesjson\"),\n            params={\n                \"placeId\": self.id,\n                \"startIndex\": start_index\n            }\n        )\n        instances_data = instances_response.json()\n        return GameInstances(\n            client=self._client,\n            data=instances_data\n        )\n\n    def get_servers(\n            self,\n            server_type: ServerType,\n            page_size: int = 10, \n            sort_order: SortOrder = SortOrder.Descending, \n            exclude_full_games: bool = False,\n            max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Grabs the place's servers.\n\n        Arguments:\n            server_type: The type of servers to return.\n            page_size: How many servers should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            exclude_full_games: Whether to exclude full servers.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing servers.\n        \"\"\"\n        from ..jobs import Server\n\n        return PageIterator(\n            client=self._client,\n            url=self._client._url_generator.get_url(\"games\", f\"v1/games/{self.id}/servers/{server_type.value}\"),\n            page_size=page_size,\n            max_items=max_items,\n            sort_order=sort_order,\n            extra_parameters={\"excludeFullGames\": exclude_full_games},\n            handler=lambda client, data: Server(client=client, data=data),\n        )\n\n    def get_private_servers(\n            self,\n            page_size: int = 10, \n            sort_order: SortOrder = SortOrder.Descending, \n            max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Grabs the private servers of a place the authenticated user can access.\n\n        Arguments:\n            page_size: How many private servers should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing private servers.\n        \"\"\"\n        from ..jobs import PrivateServer\n\n        return PageIterator(\n            client=self._client,\n            url=self._client._url_generator.get_url(\"games\", f\"v1/games/{self.id}/private-servers\"),\n            page_size=page_size,\n            max_items=max_items,\n            sort_order=sort_order,\n            handler=lambda client, data: PrivateServer(client=client, data=data),\n        )\n</code></pre>"},{"location":"reference/bases/baseplace/#roblox.bases.baseplace.BasePlace.__init__","title":"<code>__init__(client, place_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>place_id</code> <code>int</code> <p>The place ID.</p> required Source code in <code>roblox/bases/baseplace.py</code> <pre><code>def __init__(self, client: Client, place_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        place_id: The place ID.\n    \"\"\"\n\n    super().__init__(client, place_id)\n\n    self._client: Client = client\n    self.id: int = place_id\n</code></pre>"},{"location":"reference/bases/baseplace/#roblox.bases.baseplace.BasePlace.get_instances","title":"<code>get_instances(start_index=0)</code>  <code>async</code>","text":"<p>Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available.</p> <p>Warning</p> <p>This function has been deprecated. The Roblox endpoint used by this function has been removed. Please update any code using this method to use </p> <p>Parameters:</p> Name Type Description Default <code>start_index</code> <code>int</code> <p>Where to start in the server index.</p> <code>0</code> Source code in <code>roblox/bases/baseplace.py</code> <pre><code>async def get_instances(self, start_index: int = 0):\n    \"\"\"\n    Returns a list of this place's current active servers, known in the API as \"game instances\".\n    This list always contains 10 items or fewer.\n    For more items, add 10 to the start index and repeat until no more items are available.\n\n    !!! warning\n        This function has been deprecated. The Roblox endpoint used by this function has been removed. Please update any code using this method to use \n\n    Arguments:\n        start_index: Where to start in the server index.\n    \"\"\"\n    from ..jobs import GameInstances\n\n    instances_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"www\", f\"games/getgameinstancesjson\"),\n        params={\n            \"placeId\": self.id,\n            \"startIndex\": start_index\n        }\n    )\n    instances_data = instances_response.json()\n    return GameInstances(\n        client=self._client,\n        data=instances_data\n    )\n</code></pre>"},{"location":"reference/bases/baseplace/#roblox.bases.baseplace.BasePlace.get_private_servers","title":"<code>get_private_servers(page_size=10, sort_order=SortOrder.Descending, max_items=None)</code>","text":"<p>Grabs the private servers of a place the authenticated user can access.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many private servers should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Descending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing private servers.</p> Source code in <code>roblox/bases/baseplace.py</code> <pre><code>def get_private_servers(\n        self,\n        page_size: int = 10, \n        sort_order: SortOrder = SortOrder.Descending, \n        max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Grabs the private servers of a place the authenticated user can access.\n\n    Arguments:\n        page_size: How many private servers should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing private servers.\n    \"\"\"\n    from ..jobs import PrivateServer\n\n    return PageIterator(\n        client=self._client,\n        url=self._client._url_generator.get_url(\"games\", f\"v1/games/{self.id}/private-servers\"),\n        page_size=page_size,\n        max_items=max_items,\n        sort_order=sort_order,\n        handler=lambda client, data: PrivateServer(client=client, data=data),\n    )\n</code></pre>"},{"location":"reference/bases/baseplace/#roblox.bases.baseplace.BasePlace.get_servers","title":"<code>get_servers(server_type, page_size=10, sort_order=SortOrder.Descending, exclude_full_games=False, max_items=None)</code>","text":"<p>Grabs the place's servers.</p> <p>Parameters:</p> Name Type Description Default <code>server_type</code> <code>ServerType</code> <p>The type of servers to return.</p> required <code>page_size</code> <code>int</code> <p>How many servers should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Descending</code> <code>exclude_full_games</code> <code>bool</code> <p>Whether to exclude full servers.</p> <code>False</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing servers.</p> Source code in <code>roblox/bases/baseplace.py</code> <pre><code>def get_servers(\n        self,\n        server_type: ServerType,\n        page_size: int = 10, \n        sort_order: SortOrder = SortOrder.Descending, \n        exclude_full_games: bool = False,\n        max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Grabs the place's servers.\n\n    Arguments:\n        server_type: The type of servers to return.\n        page_size: How many servers should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        exclude_full_games: Whether to exclude full servers.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing servers.\n    \"\"\"\n    from ..jobs import Server\n\n    return PageIterator(\n        client=self._client,\n        url=self._client._url_generator.get_url(\"games\", f\"v1/games/{self.id}/servers/{server_type.value}\"),\n        page_size=page_size,\n        max_items=max_items,\n        sort_order=sort_order,\n        extra_parameters={\"excludeFullGames\": exclude_full_games},\n        handler=lambda client, data: Server(client=client, data=data),\n    )\n</code></pre>"},{"location":"reference/bases/baseplugin/","title":"baseplugin","text":"<p>This file contains the BasePlugin object, which represents a Roblox plugin ID.</p>"},{"location":"reference/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin","title":"<code>BasePlugin</code>","text":"<p>             Bases: <code>BaseAsset</code></p> <p>Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The plugin ID.</p> Source code in <code>roblox/bases/baseplugin.py</code> <pre><code>class BasePlugin(BaseAsset):\n    \"\"\"\n    Represents a Roblox plugin ID.\n    Plugins are a form of Asset and as such this object derives from BaseAsset.\n\n    Attributes:\n        id: The plugin ID.\n    \"\"\"\n\n    def __init__(self, client: Client, plugin_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            plugin_id: The plugin ID.\n        \"\"\"\n\n        super().__init__(client, plugin_id)\n\n        self._client: Client = client\n        self.id: int = plugin_id\n\n    async def update(self, name: str = None, description: str = None, comments_enabled: str = None):\n        \"\"\"\n        Updates the plugin's data.\n\n        Arguments:\n            name: The new group name.\n            description: The new group description.\n            comments_enabled: Whether to enable comments.\n        \"\"\"\n        await self._client.requests.patch(\n            url=self._client.url_generator.get_url(\n                \"develop\", f\"v1/plugins/{self.id}\"\n            ),\n            json={\n                \"name\": name,\n                \"description\": description,\n                \"commentsEnabled\": comments_enabled\n            }\n        )\n</code></pre>"},{"location":"reference/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.__init__","title":"<code>__init__(client, plugin_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>plugin_id</code> <code>int</code> <p>The plugin ID.</p> required Source code in <code>roblox/bases/baseplugin.py</code> <pre><code>def __init__(self, client: Client, plugin_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        plugin_id: The plugin ID.\n    \"\"\"\n\n    super().__init__(client, plugin_id)\n\n    self._client: Client = client\n    self.id: int = plugin_id\n</code></pre>"},{"location":"reference/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.update","title":"<code>update(name=None, description=None, comments_enabled=None)</code>  <code>async</code>","text":"<p>Updates the plugin's data.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The new group name.</p> <code>None</code> <code>description</code> <code>str</code> <p>The new group description.</p> <code>None</code> <code>comments_enabled</code> <code>str</code> <p>Whether to enable comments.</p> <code>None</code> Source code in <code>roblox/bases/baseplugin.py</code> <pre><code>async def update(self, name: str = None, description: str = None, comments_enabled: str = None):\n    \"\"\"\n    Updates the plugin's data.\n\n    Arguments:\n        name: The new group name.\n        description: The new group description.\n        comments_enabled: Whether to enable comments.\n    \"\"\"\n    await self._client.requests.patch(\n        url=self._client.url_generator.get_url(\n            \"develop\", f\"v1/plugins/{self.id}\"\n        ),\n        json={\n            \"name\": name,\n            \"description\": description,\n            \"commentsEnabled\": comments_enabled\n        }\n    )\n</code></pre>"},{"location":"reference/bases/baserobloxbadge/","title":"baserobloxbadge","text":"<p>This file contains the BaseRobloxBadge object, which represents a Roblox roblox badge ID.</p>"},{"location":"reference/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge","title":"<code>BaseRobloxBadge</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox roblox badge ID.</p> <p>Warning</p> <p>This is not a badge! It is a roblox badge.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The roblox badge ID.</p> Source code in <code>roblox/bases/baserobloxbadge.py</code> <pre><code>class BaseRobloxBadge(BaseItem):\n    \"\"\"\n    Represents a Roblox roblox badge ID.\n    !!! warning\n        This is not a badge! It is a **roblox badge**.\n\n    Attributes:\n        id: The roblox badge ID.\n    \"\"\"\n\n    def __init__(self, client: Client, roblox_badge_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            roblox_badge_id: The roblox badge ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = roblox_badge_id\n</code></pre>"},{"location":"reference/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge.__init__","title":"<code>__init__(client, roblox_badge_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>roblox_badge_id</code> <code>int</code> <p>The roblox badge ID.</p> required Source code in <code>roblox/bases/baserobloxbadge.py</code> <pre><code>def __init__(self, client: Client, roblox_badge_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        roblox_badge_id: The roblox badge ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = roblox_badge_id\n</code></pre>"},{"location":"reference/bases/baserole/","title":"baserole","text":"<p>This file contains the BaseRole object, which represents a Roblox group role ID.</p>"},{"location":"reference/bases/baserole/#roblox.bases.baserole.BaseRole","title":"<code>BaseRole</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox group role ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The role ID.</p> Source code in <code>roblox/bases/baserole.py</code> <pre><code>class BaseRole(BaseItem):\n    \"\"\"\n    Represents a Roblox group role ID.\n\n    Attributes:\n        id: The role ID.\n    \"\"\"\n\n    def __init__(self, client: Client, role_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            role_id: The role ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = role_id\n</code></pre>"},{"location":"reference/bases/baserole/#roblox.bases.baserole.BaseRole.__init__","title":"<code>__init__(client, role_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>role_id</code> <code>int</code> <p>The role ID.</p> required Source code in <code>roblox/bases/baserole.py</code> <pre><code>def __init__(self, client: Client, role_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        role_id: The role ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = role_id\n</code></pre>"},{"location":"reference/bases/basesociallink/","title":"basesociallink","text":"<p>This file contains the BaseUniverseSocialLink object, which represents a Roblox social link ID.</p>"},{"location":"reference/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink","title":"<code>BaseUniverseSocialLink</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox universe social link ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The universe social link ID.</p> Source code in <code>roblox/bases/basesociallink.py</code> <pre><code>class BaseUniverseSocialLink(BaseItem):\n    \"\"\"\n    Represents a Roblox universe social link ID.\n\n    Attributes:\n        id: The universe social link ID.\n    \"\"\"\n\n    def __init__(self, client: Client, social_link_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            social_link_id: The universe social link ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = social_link_id\n</code></pre>"},{"location":"reference/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink.__init__","title":"<code>__init__(client, social_link_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>social_link_id</code> <code>int</code> <p>The universe social link ID.</p> required Source code in <code>roblox/bases/basesociallink.py</code> <pre><code>def __init__(self, client: Client, social_link_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        social_link_id: The universe social link ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = social_link_id\n</code></pre>"},{"location":"reference/bases/baseuniverse/","title":"baseuniverse","text":"<p>This file contains the BaseUniverse object, which represents a Roblox universe ID. It also contains the UniverseLiveStats object, which represents a universe's live stats.</p>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse","title":"<code>BaseUniverse</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox universe ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The universe ID.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>class BaseUniverse(BaseItem):\n    \"\"\"\n    Represents a Roblox universe ID.\n\n    Attributes:\n        id: The universe ID.\n    \"\"\"\n\n    def __init__(self, client: Client, universe_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            universe_id: The universe ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = universe_id\n\n    async def get_favorite_count(self) -&gt; int:\n        \"\"\"\n        Grabs the universe's favorite count.\n\n        Returns:\n            The universe's favorite count.\n        \"\"\"\n        favorite_count_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/favorites/count\")\n        )\n        favorite_count_data = favorite_count_response.json()\n        return favorite_count_data[\"favoritesCount\"]\n\n    async def is_favorited(self) -&gt; bool:\n        \"\"\"\n        Grabs the authenticated user's favorite status for this game.\n\n        Returns:\n            Whether the authenticated user has favorited this game.\n        \"\"\"\n        is_favorited_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/favorites\")\n        )\n        is_favorited_data = is_favorited_response.json()\n        return is_favorited_data[\"isFavorited\"]\n\n    def get_badges(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                   max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets the universe's badges.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing this universe's badges.\n        \"\"\"\n\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"badges\", f\"v1/universes/{self.id}/badges\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=_universe_badges_handler,\n        )\n\n    async def get_live_stats(self) -&gt; UniverseLiveStats:\n        \"\"\"\n        Gets the universe's live stats.\n        This data does not update live. These are just the stats that are shown on the website's live stats display.\n\n        Returns:\n            The universe's live stats.\n        \"\"\"\n        stats_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"develop\", f\"v1/universes/{self.id}/live-stats\")\n        )\n        stats_data = stats_response.json()\n        return UniverseLiveStats(data=stats_data)\n\n    def get_gamepasses(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                       max_items: int = None) -&gt; PageIterator:\n        \"\"\"\n        Gets the universe's gamepasses.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing the universe's gamepasses.\n        \"\"\"\n\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/game-passes\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: GamePass(client, data),\n        )\n\n    async def get_social_links(self) -&gt; List[SocialLink]:\n        \"\"\"\n        Gets the universe's social links.\n\n        Returns:\n            A list of the universe's social links.\n        \"\"\"\n\n        links_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/social-links/list\")\n        )\n        links_data = links_response.json()[\"data\"]\n        return [SocialLink(client=self._client, data=link_data) for link_data in links_data]\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.__init__","title":"<code>__init__(client, universe_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>universe_id</code> <code>int</code> <p>The universe ID.</p> required Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>def __init__(self, client: Client, universe_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        universe_id: The universe ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = universe_id\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_badges","title":"<code>get_badges(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets the universe's badges.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing this universe's badges.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>def get_badges(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n               max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets the universe's badges.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing this universe's badges.\n    \"\"\"\n\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"badges\", f\"v1/universes/{self.id}/badges\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=_universe_badges_handler,\n    )\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_favorite_count","title":"<code>get_favorite_count()</code>  <code>async</code>","text":"<p>Grabs the universe's favorite count.</p> <p>Returns:</p> Type Description <code>int</code> <p>The universe's favorite count.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>async def get_favorite_count(self) -&gt; int:\n    \"\"\"\n    Grabs the universe's favorite count.\n\n    Returns:\n        The universe's favorite count.\n    \"\"\"\n    favorite_count_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/favorites/count\")\n    )\n    favorite_count_data = favorite_count_response.json()\n    return favorite_count_data[\"favoritesCount\"]\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_gamepasses","title":"<code>get_gamepasses(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets the universe's gamepasses.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing the universe's gamepasses.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>def get_gamepasses(self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending,\n                   max_items: int = None) -&gt; PageIterator:\n    \"\"\"\n    Gets the universe's gamepasses.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing the universe's gamepasses.\n    \"\"\"\n\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/game-passes\"),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: GamePass(client, data),\n    )\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_live_stats","title":"<code>get_live_stats()</code>  <code>async</code>","text":"<p>Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display.</p> <p>Returns:</p> Type Description <code>UniverseLiveStats</code> <p>The universe's live stats.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>async def get_live_stats(self) -&gt; UniverseLiveStats:\n    \"\"\"\n    Gets the universe's live stats.\n    This data does not update live. These are just the stats that are shown on the website's live stats display.\n\n    Returns:\n        The universe's live stats.\n    \"\"\"\n    stats_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"develop\", f\"v1/universes/{self.id}/live-stats\")\n    )\n    stats_data = stats_response.json()\n    return UniverseLiveStats(data=stats_data)\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_social_links","title":"<code>get_social_links()</code>  <code>async</code>","text":"<p>Gets the universe's social links.</p> <p>Returns:</p> Type Description <code>List[SocialLink]</code> <p>A list of the universe's social links.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>async def get_social_links(self) -&gt; List[SocialLink]:\n    \"\"\"\n    Gets the universe's social links.\n\n    Returns:\n        A list of the universe's social links.\n    \"\"\"\n\n    links_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/social-links/list\")\n    )\n    links_data = links_response.json()[\"data\"]\n    return [SocialLink(client=self._client, data=link_data) for link_data in links_data]\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.is_favorited","title":"<code>is_favorited()</code>  <code>async</code>","text":"<p>Grabs the authenticated user's favorite status for this game.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the authenticated user has favorited this game.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>async def is_favorited(self) -&gt; bool:\n    \"\"\"\n    Grabs the authenticated user's favorite status for this game.\n\n    Returns:\n        Whether the authenticated user has favorited this game.\n    \"\"\"\n    is_favorited_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"games\", f\"v1/games/{self.id}/favorites\")\n    )\n    is_favorited_data = is_favorited_response.json()\n    return is_favorited_data[\"isFavorited\"]\n</code></pre>"},{"location":"reference/bases/baseuniverse/#roblox.bases.baseuniverse.UniverseLiveStats","title":"<code>UniverseLiveStats</code>","text":"<p>Represents a universe's live stats.</p> <p>Attributes:</p> Name Type Description <code>total_player_count</code> <code>int</code> <p>The amount of players present in this universe's subplaces.</p> <code>game_count</code> <code>int</code> <p>The amount of active servers for this universe's subplaces.</p> <code>player_counts_by_device_type</code> <code>Dict[str, int]</code> <p>A dictionary where the keys are device types and the values are the amount of                           this universe's subplace's active players which are on that device type.</p> Source code in <code>roblox/bases/baseuniverse.py</code> <pre><code>class UniverseLiveStats:\n    \"\"\"\n    Represents a universe's live stats.\n\n    Attributes:\n        total_player_count: The amount of players present in this universe's subplaces.\n        game_count: The amount of active servers for this universe's subplaces.\n        player_counts_by_device_type: A dictionary where the keys are device types and the values are the amount of\n                                      this universe's subplace's active players which are on that device type.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.total_player_count: int = data[\"totalPlayerCount\"]\n        self.game_count: int = data[\"gameCount\"]\n        self.player_counts_by_device_type: Dict[str, int] = data[\"playerCountsByDeviceType\"]\n</code></pre>"},{"location":"reference/bases/baseuser/","title":"baseuser","text":"<p>This file contains the BaseUser object, which represents a Roblox user ID.</p>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser","title":"<code>BaseUser</code>","text":"<p>             Bases: <code>BaseItem</code></p> <p>Represents a Roblox user ID.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The user ID.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>class BaseUser(BaseItem):\n    \"\"\"\n    Represents a Roblox user ID.\n\n    Attributes:\n        id: The user ID.\n    \"\"\"\n\n    def __init__(self, client: Client, user_id: int):\n        \"\"\"\n        Arguments:\n            client: The Client this object belongs to.\n            user_id: The user ID.\n        \"\"\"\n\n        self._client: Client = client\n        self.id: int = user_id\n\n    def username_history(\n            self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Grabs the user's username history.\n\n        Arguments:\n            page_size: How many members should be returned for each page.\n            sort_order: Order in which data should be grabbed.\n            max_items: The maximum items to return when looping through this object.\n\n        Returns:\n            A PageIterator containing the user's username history.\n        \"\"\"\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\n                \"users\", f\"v1/users/{self.id}/username-history\"\n            ),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: data[\"name\"],\n        )\n\n    async def get_presence(self) -&gt; Optional[Presence]:\n        \"\"\"\n        Grabs the user's presence.\n\n        Returns:\n            The user's presence, if they have an active presence.\n        \"\"\"\n        presences = await self._client.presence.get_user_presences([self.id])\n        try:\n            return presences[0]\n        except IndexError:\n            return None\n\n    async def get_friends(self) -&gt; List[Friend]:\n        \"\"\"\n        Grabs the user's friends.\n\n        Returns:\n            A list of the user's friends.\n        \"\"\"\n\n        from ..friends import Friend\n        friends_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"friends\", f\"v1/users/{self.id}/friends\")\n        )\n        friends_data = friends_response.json()[\"data\"]\n        return [Friend(client=self._client, data=friend_data) for friend_data in friends_data]\n\n    async def get_currency(self) -&gt; int:\n        \"\"\"\n        Grabs the user's current Robux amount. Only works on the authenticated user.\n\n        Returns:\n            The user's Robux amount.\n        \"\"\"\n        currency_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"economy\", f\"v1/users/{self.id}/currency\")\n        )\n        currency_data = currency_response.json()\n        return currency_data[\"robux\"]\n\n    async def has_premium(self) -&gt; bool:\n        \"\"\"\n        Checks if the user has a Roblox Premium membership.\n\n        Returns:\n            Whether the user has Premium or not.\n        \"\"\"\n        premium_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"premiumfeatures\", f\"v1/users/{self.id}/validate-membership\")\n        )\n        premium_data = premium_response.text\n        return premium_data == \"true\"\n\n    async def get_item_instance(self, item_type: InstanceType, item_id: int) -&gt; Optional[ItemInstance]:\n        \"\"\"\n        Gets an item instance for a specific user.\n\n        Arguments:\n            item_type: The type of item to get an instance for.\n            item_id: The item's ID.\n\n        Returns: An ItemInstance, if it exists.\n        \"\"\"\n\n        item_type: str = item_type.value.lower()\n\n        # this is so we can have special classes for other types\n        item_class = instance_classes.get(item_type) or ItemInstance\n\n        instance_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"inventory\", f\"v1/users/{self.id}/items/{item_type}/{item_id}\")\n        )\n        instance_data = instance_response.json()[\"data\"]\n        if len(instance_data) &gt; 0:\n            return item_class(\n                client=self._client,\n                data=instance_data[0]\n            )\n        else:\n            return None\n\n    async def get_asset_instance(self, asset: AssetOrAssetId) -&gt; Optional[AssetInstance]:\n        \"\"\"\n        Checks if a user owns the asset, and returns details about the asset if they do.\n\n        Returns:\n            An asset instance, if the user owns this asset.\n        \"\"\"\n        return await self.get_item_instance(\n            item_type=InstanceType.asset,\n            item_id=int(asset)\n        )\n\n    async def get_gamepass_instance(self, gamepass: GamePassOrGamePassId) -&gt; Optional[GamePassInstance]:\n        \"\"\"\n        Checks if a user owns the gamepass, and returns details about the asset if they do.\n\n        Returns:\n            An gamepass instance, if the user owns this gamepass.\n        \"\"\"\n        return await self.get_item_instance(\n            item_type=InstanceType.gamepass,\n            item_id=int(gamepass)\n        )\n\n    async def get_badge_awarded_dates(self, badges: list[BaseBadge]) -&gt; List[PartialBadge]:\n        \"\"\"\n        Gets the dates that each badge in a list of badges were awarded to this user.\n\n        Returns:\n            A list of partial badges containing badge awarded dates.\n        \"\"\"\n        awarded_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"badges\", f\"v1/users/{self.id}/badges/awarded-dates\"),\n            params={\n                \"badgeIds\": [badge.id for badge in badges]\n            }\n        )\n        awarded_data: list = awarded_response.json()[\"data\"]\n        return [\n            PartialBadge(\n                client=self._client,\n                data=partial_data\n            ) for partial_data in awarded_data\n        ]\n\n    async def get_group_roles(self) -&gt; List[Role]:\n        \"\"\"\n        Gets a list of roles for all groups this user is in.\n\n        Returns:\n            A list of roles.\n        \"\"\"\n        from ..roles import Role\n        from ..groups import Group\n        roles_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"groups\", f\"v1/users/{self.id}/groups/roles\")\n        )\n        roles_data = roles_response.json()[\"data\"]\n        return [\n            Role(\n                client=self._client,\n                data=role_data[\"role\"],\n                group=Group(\n                    client=self._client,\n                    data=role_data[\"group\"]\n                )\n            ) for role_data in roles_data\n        ]\n\n    async def get_roblox_badges(self) -&gt; List[RobloxBadge]:\n        \"\"\"\n        Gets the user's Roblox badges.\n\n        Returns:\n            A list of Roblox badges.\n        \"\"\"\n\n        badges_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"accountinformation\", f\"v1/users/{self.id}/roblox-badges\")\n        )\n        badges_data = badges_response.json()\n        return [RobloxBadge(client=self._client, data=badge_data) for badge_data in badges_data]\n\n    async def get_promotion_channels(self) -&gt; UserPromotionChannels:\n        \"\"\"\n        Gets the user's promotion channels.\n\n        Returns:\n            The user's promotion channels.\n        \"\"\"\n        channels_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"accountinformation\", f\"v1/users/{self.id}/promotion-channels\")\n        )\n        channels_data = channels_response.json()\n        return UserPromotionChannels(\n            data=channels_data\n        )\n\n    async def _get_friend_channel_count(self, channel: str) -&gt; int:\n        count_response = await self._client.requests.get(\n            url=self._client.url_generator.get_url(\"friends\", f\"v1/users/{self.id}/{channel}/count\")\n        )\n        return count_response.json()[\"count\"]\n\n    def _get_friend_channel_iterator(\n            self,\n            channel: str,\n            page_size: int = 10,\n            sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n    ) -&gt; PageIterator:\n        from ..friends import Friend\n        return PageIterator(\n            client=self._client,\n            url=self._client.url_generator.get_url(\"friends\", f\"v1/users/{self.id}/{channel}\"),\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n            handler=lambda client, data: Friend(client=client, data=data)\n        )\n\n    async def get_friend_count(self) -&gt; int:\n        \"\"\"\n        Gets the user's friend count.\n\n        Returns:\n            The user's friend count.\n        \"\"\"\n        return await self._get_friend_channel_count(\"friends\")\n\n    async def get_follower_count(self) -&gt; int:\n        \"\"\"\n        Gets the user's follower count.\n\n        Returns:\n            The user's follower count.\n        \"\"\"\n        return await self._get_friend_channel_count(\"followers\")\n\n    async def get_following_count(self) -&gt; int:\n        \"\"\"\n        Gets the user's following count.\n\n        Returns:\n            The user's following count.\n        \"\"\"\n        return await self._get_friend_channel_count(\"followings\")\n\n    def get_followers(\n            self,\n            page_size: int = 10,\n            sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Gets the user's followers.\n\n        Returns:\n            A PageIterator containing everyone who follows this user.\n        \"\"\"\n        return self._get_friend_channel_iterator(\n            channel=\"followers\",\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n        )\n\n    def get_followings(\n            self,\n            page_size: int = 10,\n            sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n    ) -&gt; PageIterator:\n        \"\"\"\n        Gets the user's followings.\n\n        Returns:\n            A PageIterator containing everyone that this user is following.\n        \"\"\"\n        return self._get_friend_channel_iterator(\n            channel=\"followings\",\n            page_size=page_size,\n            sort_order=sort_order,\n            max_items=max_items,\n        )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.__init__","title":"<code>__init__(client, user_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client this object belongs to.</p> required <code>user_id</code> <code>int</code> <p>The user ID.</p> required Source code in <code>roblox/bases/baseuser.py</code> <pre><code>def __init__(self, client: Client, user_id: int):\n    \"\"\"\n    Arguments:\n        client: The Client this object belongs to.\n        user_id: The user ID.\n    \"\"\"\n\n    self._client: Client = client\n    self.id: int = user_id\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_asset_instance","title":"<code>get_asset_instance(asset)</code>  <code>async</code>","text":"<p>Checks if a user owns the asset, and returns details about the asset if they do.</p> <p>Returns:</p> Type Description <code>Optional[AssetInstance]</code> <p>An asset instance, if the user owns this asset.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_asset_instance(self, asset: AssetOrAssetId) -&gt; Optional[AssetInstance]:\n    \"\"\"\n    Checks if a user owns the asset, and returns details about the asset if they do.\n\n    Returns:\n        An asset instance, if the user owns this asset.\n    \"\"\"\n    return await self.get_item_instance(\n        item_type=InstanceType.asset,\n        item_id=int(asset)\n    )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_badge_awarded_dates","title":"<code>get_badge_awarded_dates(badges)</code>  <code>async</code>","text":"<p>Gets the dates that each badge in a list of badges were awarded to this user.</p> <p>Returns:</p> Type Description <code>List[PartialBadge]</code> <p>A list of partial badges containing badge awarded dates.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_badge_awarded_dates(self, badges: list[BaseBadge]) -&gt; List[PartialBadge]:\n    \"\"\"\n    Gets the dates that each badge in a list of badges were awarded to this user.\n\n    Returns:\n        A list of partial badges containing badge awarded dates.\n    \"\"\"\n    awarded_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"badges\", f\"v1/users/{self.id}/badges/awarded-dates\"),\n        params={\n            \"badgeIds\": [badge.id for badge in badges]\n        }\n    )\n    awarded_data: list = awarded_response.json()[\"data\"]\n    return [\n        PartialBadge(\n            client=self._client,\n            data=partial_data\n        ) for partial_data in awarded_data\n    ]\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_currency","title":"<code>get_currency()</code>  <code>async</code>","text":"<p>Grabs the user's current Robux amount. Only works on the authenticated user.</p> <p>Returns:</p> Type Description <code>int</code> <p>The user's Robux amount.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_currency(self) -&gt; int:\n    \"\"\"\n    Grabs the user's current Robux amount. Only works on the authenticated user.\n\n    Returns:\n        The user's Robux amount.\n    \"\"\"\n    currency_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"economy\", f\"v1/users/{self.id}/currency\")\n    )\n    currency_data = currency_response.json()\n    return currency_data[\"robux\"]\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_follower_count","title":"<code>get_follower_count()</code>  <code>async</code>","text":"<p>Gets the user's follower count.</p> <p>Returns:</p> Type Description <code>int</code> <p>The user's follower count.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_follower_count(self) -&gt; int:\n    \"\"\"\n    Gets the user's follower count.\n\n    Returns:\n        The user's follower count.\n    \"\"\"\n    return await self._get_friend_channel_count(\"followers\")\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followers","title":"<code>get_followers(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets the user's followers.</p> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing everyone who follows this user.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>def get_followers(\n        self,\n        page_size: int = 10,\n        sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Gets the user's followers.\n\n    Returns:\n        A PageIterator containing everyone who follows this user.\n    \"\"\"\n    return self._get_friend_channel_iterator(\n        channel=\"followers\",\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n    )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_following_count","title":"<code>get_following_count()</code>  <code>async</code>","text":"<p>Gets the user's following count.</p> <p>Returns:</p> Type Description <code>int</code> <p>The user's following count.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_following_count(self) -&gt; int:\n    \"\"\"\n    Gets the user's following count.\n\n    Returns:\n        The user's following count.\n    \"\"\"\n    return await self._get_friend_channel_count(\"followings\")\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followings","title":"<code>get_followings(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Gets the user's followings.</p> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing everyone that this user is following.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>def get_followings(\n        self,\n        page_size: int = 10,\n        sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Gets the user's followings.\n\n    Returns:\n        A PageIterator containing everyone that this user is following.\n    \"\"\"\n    return self._get_friend_channel_iterator(\n        channel=\"followings\",\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n    )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friend_count","title":"<code>get_friend_count()</code>  <code>async</code>","text":"<p>Gets the user's friend count.</p> <p>Returns:</p> Type Description <code>int</code> <p>The user's friend count.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_friend_count(self) -&gt; int:\n    \"\"\"\n    Gets the user's friend count.\n\n    Returns:\n        The user's friend count.\n    \"\"\"\n    return await self._get_friend_channel_count(\"friends\")\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friends","title":"<code>get_friends()</code>  <code>async</code>","text":"<p>Grabs the user's friends.</p> <p>Returns:</p> Type Description <code>List[Friend]</code> <p>A list of the user's friends.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_friends(self) -&gt; List[Friend]:\n    \"\"\"\n    Grabs the user's friends.\n\n    Returns:\n        A list of the user's friends.\n    \"\"\"\n\n    from ..friends import Friend\n    friends_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"friends\", f\"v1/users/{self.id}/friends\")\n    )\n    friends_data = friends_response.json()[\"data\"]\n    return [Friend(client=self._client, data=friend_data) for friend_data in friends_data]\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_gamepass_instance","title":"<code>get_gamepass_instance(gamepass)</code>  <code>async</code>","text":"<p>Checks if a user owns the gamepass, and returns details about the asset if they do.</p> <p>Returns:</p> Type Description <code>Optional[GamePassInstance]</code> <p>An gamepass instance, if the user owns this gamepass.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_gamepass_instance(self, gamepass: GamePassOrGamePassId) -&gt; Optional[GamePassInstance]:\n    \"\"\"\n    Checks if a user owns the gamepass, and returns details about the asset if they do.\n\n    Returns:\n        An gamepass instance, if the user owns this gamepass.\n    \"\"\"\n    return await self.get_item_instance(\n        item_type=InstanceType.gamepass,\n        item_id=int(gamepass)\n    )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_group_roles","title":"<code>get_group_roles()</code>  <code>async</code>","text":"<p>Gets a list of roles for all groups this user is in.</p> <p>Returns:</p> Type Description <code>List[Role]</code> <p>A list of roles.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_group_roles(self) -&gt; List[Role]:\n    \"\"\"\n    Gets a list of roles for all groups this user is in.\n\n    Returns:\n        A list of roles.\n    \"\"\"\n    from ..roles import Role\n    from ..groups import Group\n    roles_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"groups\", f\"v1/users/{self.id}/groups/roles\")\n    )\n    roles_data = roles_response.json()[\"data\"]\n    return [\n        Role(\n            client=self._client,\n            data=role_data[\"role\"],\n            group=Group(\n                client=self._client,\n                data=role_data[\"group\"]\n            )\n        ) for role_data in roles_data\n    ]\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_item_instance","title":"<code>get_item_instance(item_type, item_id)</code>  <code>async</code>","text":"<p>Gets an item instance for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>item_type</code> <code>InstanceType</code> <p>The type of item to get an instance for.</p> required <code>item_id</code> <code>int</code> <p>The item's ID.</p> required Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_item_instance(self, item_type: InstanceType, item_id: int) -&gt; Optional[ItemInstance]:\n    \"\"\"\n    Gets an item instance for a specific user.\n\n    Arguments:\n        item_type: The type of item to get an instance for.\n        item_id: The item's ID.\n\n    Returns: An ItemInstance, if it exists.\n    \"\"\"\n\n    item_type: str = item_type.value.lower()\n\n    # this is so we can have special classes for other types\n    item_class = instance_classes.get(item_type) or ItemInstance\n\n    instance_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"inventory\", f\"v1/users/{self.id}/items/{item_type}/{item_id}\")\n    )\n    instance_data = instance_response.json()[\"data\"]\n    if len(instance_data) &gt; 0:\n        return item_class(\n            client=self._client,\n            data=instance_data[0]\n        )\n    else:\n        return None\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_presence","title":"<code>get_presence()</code>  <code>async</code>","text":"<p>Grabs the user's presence.</p> <p>Returns:</p> Type Description <code>Optional[Presence]</code> <p>The user's presence, if they have an active presence.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_presence(self) -&gt; Optional[Presence]:\n    \"\"\"\n    Grabs the user's presence.\n\n    Returns:\n        The user's presence, if they have an active presence.\n    \"\"\"\n    presences = await self._client.presence.get_user_presences([self.id])\n    try:\n        return presences[0]\n    except IndexError:\n        return None\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_promotion_channels","title":"<code>get_promotion_channels()</code>  <code>async</code>","text":"<p>Gets the user's promotion channels.</p> <p>Returns:</p> Type Description <code>UserPromotionChannels</code> <p>The user's promotion channels.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_promotion_channels(self) -&gt; UserPromotionChannels:\n    \"\"\"\n    Gets the user's promotion channels.\n\n    Returns:\n        The user's promotion channels.\n    \"\"\"\n    channels_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"accountinformation\", f\"v1/users/{self.id}/promotion-channels\")\n    )\n    channels_data = channels_response.json()\n    return UserPromotionChannels(\n        data=channels_data\n    )\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_roblox_badges","title":"<code>get_roblox_badges()</code>  <code>async</code>","text":"<p>Gets the user's Roblox badges.</p> <p>Returns:</p> Type Description <code>List[RobloxBadge]</code> <p>A list of Roblox badges.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def get_roblox_badges(self) -&gt; List[RobloxBadge]:\n    \"\"\"\n    Gets the user's Roblox badges.\n\n    Returns:\n        A list of Roblox badges.\n    \"\"\"\n\n    badges_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"accountinformation\", f\"v1/users/{self.id}/roblox-badges\")\n    )\n    badges_data = badges_response.json()\n    return [RobloxBadge(client=self._client, data=badge_data) for badge_data in badges_data]\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.has_premium","title":"<code>has_premium()</code>  <code>async</code>","text":"<p>Checks if the user has a Roblox Premium membership.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the user has Premium or not.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>async def has_premium(self) -&gt; bool:\n    \"\"\"\n    Checks if the user has a Roblox Premium membership.\n\n    Returns:\n        Whether the user has Premium or not.\n    \"\"\"\n    premium_response = await self._client.requests.get(\n        url=self._client.url_generator.get_url(\"premiumfeatures\", f\"v1/users/{self.id}/validate-membership\")\n    )\n    premium_data = premium_response.text\n    return premium_data == \"true\"\n</code></pre>"},{"location":"reference/bases/baseuser/#roblox.bases.baseuser.BaseUser.username_history","title":"<code>username_history(page_size=10, sort_order=SortOrder.Ascending, max_items=None)</code>","text":"<p>Grabs the user's username history.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>How many members should be returned for each page.</p> <code>10</code> <code>sort_order</code> <code>SortOrder</code> <p>Order in which data should be grabbed.</p> <code>Ascending</code> <code>max_items</code> <code>int</code> <p>The maximum items to return when looping through this object.</p> <code>None</code> <p>Returns:</p> Type Description <code>PageIterator</code> <p>A PageIterator containing the user's username history.</p> Source code in <code>roblox/bases/baseuser.py</code> <pre><code>def username_history(\n        self, page_size: int = 10, sort_order: SortOrder = SortOrder.Ascending, max_items: int = None\n) -&gt; PageIterator:\n    \"\"\"\n    Grabs the user's username history.\n\n    Arguments:\n        page_size: How many members should be returned for each page.\n        sort_order: Order in which data should be grabbed.\n        max_items: The maximum items to return when looping through this object.\n\n    Returns:\n        A PageIterator containing the user's username history.\n    \"\"\"\n    return PageIterator(\n        client=self._client,\n        url=self._client.url_generator.get_url(\n            \"users\", f\"v1/users/{self.id}/username-history\"\n        ),\n        page_size=page_size,\n        sort_order=sort_order,\n        max_items=max_items,\n        handler=lambda client, data: data[\"name\"],\n    )\n</code></pre>"},{"location":"reference/partials/","title":"partials","text":"<p>Contains partial objects representing objects on Roblox. Some endpoints return some, but not all, data for an object, and these partial objects represent that data.</p>"},{"location":"reference/partials/partialbadge/","title":"partialbadge","text":"<p>This file contains partial objects related to Roblox badges.</p>"},{"location":"reference/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge","title":"<code>PartialBadge</code>","text":"<p>             Bases: <code>BaseBadge</code></p> <p>Represents partial badge data.</p> <p>Attributes:</p> Name Type Description <code>_data</code> <p>The data we get back from the endpoint.</p> <code>_client</code> <code>Client</code> <p>The cCient object, which is passed to all objects this Client generates.</p> <code>id</code> <code>int</code> <p>The universe ID.</p> <code>awarded</code> <code>datetime</code> <p>The date when the badge was awarded.</p> Source code in <code>roblox/partials/partialbadge.py</code> <pre><code>class PartialBadge(BaseBadge):\n    \"\"\"\n    Represents partial badge data.\n\n    Attributes:\n        _data: The data we get back from the endpoint.\n        _client: The cCient object, which is passed to all objects this Client generates.\n        id: The universe ID.\n        awarded: The date when the badge was awarded.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The raw data.\n        \"\"\"\n        self._client: Client = client\n\n        self.id: int = data[\"badgeId\"]\n\n        super().__init__(client=client, badge_id=self.id)\n\n        self.awarded: datetime = parse(data[\"awardedDate\"])\n</code></pre>"},{"location":"reference/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The raw data.</p> required Source code in <code>roblox/partials/partialbadge.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The raw data.\n    \"\"\"\n    self._client: Client = client\n\n    self.id: int = data[\"badgeId\"]\n\n    super().__init__(client=client, badge_id=self.id)\n\n    self.awarded: datetime = parse(data[\"awardedDate\"])\n</code></pre>"},{"location":"reference/partials/partialgroup/","title":"partialgroup","text":"<p>This file contains partial objects related to Roblox groups.</p>"},{"location":"reference/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup","title":"<code>AssetPartialGroup</code>","text":"<p>             Bases: <code>BaseGroup</code></p> <p>Represents a partial group in the context of a Roblox asset. Intended to parse the <code>data[0][\"creator\"]</code> data from https://games.roblox.com/v1/games.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> <code>id</code> <code>int</code> <p>The group's name.</p> <code>creator</code> <code>BaseUser</code> <p>The group's owner.</p> <code>name</code> <code>str</code> <p>The group's name.</p> <code>has_verified_badge</code> <code>bool</code> <p>If the group has a verified badge.</p> Source code in <code>roblox/partials/partialgroup.py</code> <pre><code>class AssetPartialGroup(BaseGroup):\n    \"\"\"\n    Represents a partial group in the context of a Roblox asset.\n    Intended to parse the `data[0][\"creator\"]` data from https://games.roblox.com/v1/games.\n\n    Attributes:\n        _client: The Client object, which is passed to all objects this Client generates.\n        id: The group's name.\n        creator: The group's owner.\n        name: The group's name.\n        has_verified_badge: If the group has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The data from the endpoint.\n        \"\"\"\n        self._client: Client = client\n\n        self.creator: BaseUser = BaseUser(client=client, user_id=data[\"Id\"])\n        self.id: int = data[\"CreatorTargetId\"]\n        self.name: str = data[\"Name\"]\n        self.has_verified_badge: bool = data[\"HasVerifiedBadge\"]\n\n        super().__init__(client, self.id)\n</code></pre>"},{"location":"reference/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/partials/partialgroup.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The data from the endpoint.\n    \"\"\"\n    self._client: Client = client\n\n    self.creator: BaseUser = BaseUser(client=client, user_id=data[\"Id\"])\n    self.id: int = data[\"CreatorTargetId\"]\n    self.name: str = data[\"Name\"]\n    self.has_verified_badge: bool = data[\"HasVerifiedBadge\"]\n\n    super().__init__(client, self.id)\n</code></pre>"},{"location":"reference/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup","title":"<code>UniversePartialGroup</code>","text":"<p>             Bases: <code>BaseGroup</code></p> <p>Represents a partial group in the context of a Roblox universe.</p> <p>Attributes:</p> Name Type Description <code>_data</code> <p>The data we get back from the endpoint.</p> <code>_client</code> <code>Client</code> <p>The client object, which is passed to all objects this client generates.</p> <code>id</code> <p>Id of the group</p> <code>name</code> <code>str</code> <p>Name of the group</p> <code>has_verified_badge</code> <code>bool</code> <p>If the group has a verified badge.</p> Source code in <code>roblox/partials/partialgroup.py</code> <pre><code>class UniversePartialGroup(BaseGroup):\n    \"\"\"\n    Represents a partial group in the context of a Roblox universe.\n\n    Attributes:\n        _data: The data we get back from the endpoint.\n        _client: The client object, which is passed to all objects this client generates.\n        id: Id of the group\n        name: Name of the group\n        has_verified_badge: If the group has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The ClientSharedObject.\n            data: The data from the endpoint.\n        \"\"\"\n        self._client: Client = client\n        self.id = data[\"id\"]\n        self.name: str = data[\"name\"]\n        self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n\n        super().__init__(client, self.id)\n</code></pre>"},{"location":"reference/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The ClientSharedObject.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/partials/partialgroup.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The ClientSharedObject.\n        data: The data from the endpoint.\n    \"\"\"\n    self._client: Client = client\n    self.id = data[\"id\"]\n    self.name: str = data[\"name\"]\n    self.has_verified_badge: bool = data[\"hasVerifiedBadge\"]\n\n    super().__init__(client, self.id)\n</code></pre>"},{"location":"reference/partials/partialrole/","title":"partialrole","text":"<p>This file contains partial objects related to Roblox group roles.</p>"},{"location":"reference/partials/partialrole/#roblox.partials.partialrole.PartialRole","title":"<code>PartialRole</code>","text":"<p>             Bases: <code>BaseRole</code></p> <p>Represents partial group role information.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The Client object.</p> <code>id</code> <code>int</code> <p>The role's ID.</p> <code>name</code> <code>str</code> <p>The role's name.</p> <code>rank</code> <code>int</code> <p>The role's rank ID.</p> Source code in <code>roblox/partials/partialrole.py</code> <pre><code>class PartialRole(BaseRole):\n    \"\"\"\n    Represents partial group role information.\n\n    Attributes:\n        _client: The Client object.\n        id: The role's ID.\n        name: The role's name.\n        rank: The role's rank ID.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n        super().__init__(client=self._client, role_id=self.id)\n        self.name: str = data[\"name\"]\n        self.rank: int = data[\"rank\"]\n</code></pre>"},{"location":"reference/partials/partialuniverse/","title":"partialuniverse","text":"<p>This file contains partial objects related to Roblox universes.</p>"},{"location":"reference/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse","title":"<code>ChatPartialUniverse</code>","text":"<p>             Bases: <code>BaseUniverse</code></p> <p>Represents a partial universe in the context of a chat conversation.</p> <p>Attributes:</p> Name Type Description <code>_data</code> <p>The data we get back from the endpoint.</p> <code>_client</code> <code>Client</code> <p>The client object, which is passed to all objects this client generates.</p> <code>id</code> <code>int</code> <p>The universe ID.</p> <code>root_place</code> <code>BasePlace</code> <p>The universe's root place.</p> Source code in <code>roblox/partials/partialuniverse.py</code> <pre><code>class ChatPartialUniverse(BaseUniverse):\n    \"\"\"\n    Represents a partial universe in the context of a chat conversation.\n\n    Attributes:\n        _data: The data we get back from the endpoint.\n        _client: The client object, which is passed to all objects this client generates.\n        id: The universe ID.\n        root_place: The universe's root place.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The ClientSharedObject.\n            data: The raw data.\n        \"\"\"\n        self._client: Client = client\n\n        self.id: int = data[\"universeId\"]\n\n        super().__init__(client=client, universe_id=self.id)\n\n        self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n</code></pre>"},{"location":"reference/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The ClientSharedObject.</p> required <code>data</code> <code>dict</code> <p>The raw data.</p> required Source code in <code>roblox/partials/partialuniverse.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The ClientSharedObject.\n        data: The raw data.\n    \"\"\"\n    self._client: Client = client\n\n    self.id: int = data[\"universeId\"]\n\n    super().__init__(client=client, universe_id=self.id)\n\n    self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n</code></pre>"},{"location":"reference/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse","title":"<code>PartialUniverse</code>","text":"<p>             Bases: <code>BaseUniverse</code></p> <p>Represents partial universe information.</p> <p>Attributes:.     _client: The Client object, which is passed to all objects this Client generates.     id: The universe ID.     name: The name of the universe.     root_place: The universe's root place.</p> Source code in <code>roblox/partials/partialuniverse.py</code> <pre><code>class PartialUniverse(BaseUniverse):\n    \"\"\"\n    Represents partial universe information.\n\n    Attributes:.\n        _client: The Client object, which is passed to all objects this Client generates.\n        id: The universe ID.\n        name: The name of the universe.\n        root_place: The universe's root place.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The raw data.\n        \"\"\"\n        self._client: Client = client\n\n        self.id: int = data[\"id\"]\n\n        super().__init__(client=client, universe_id=self.id)\n\n        self.name: str = data[\"name\"]\n        self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n</code></pre>"},{"location":"reference/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The raw data.</p> required Source code in <code>roblox/partials/partialuniverse.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The raw data.\n    \"\"\"\n    self._client: Client = client\n\n    self.id: int = data[\"id\"]\n\n    super().__init__(client=client, universe_id=self.id)\n\n    self.name: str = data[\"name\"]\n    self.root_place: BasePlace = BasePlace(client=client, place_id=data[\"rootPlaceId\"])\n</code></pre>"},{"location":"reference/partials/partialuser/","title":"partialuser","text":"<p>This file contains partial objects related to Roblox users.</p>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.PartialUser","title":"<code>PartialUser</code>","text":"<p>             Bases: <code>BaseUser</code></p> <p>Represents partial user information.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The Client object, which is passed to all objects this Client generates.</p> <code>id</code> <code>int</code> <p>The user's ID.</p> <code>name</code> <code>str</code> <p>The user's name.</p> <code>display_name</code> <code>str</code> <p>The user's display name.</p> <code>has_verified_badge</code> <code>bool</code> <p>If the user has a verified badge.</p> Source code in <code>roblox/partials/partialuser.py</code> <pre><code>class PartialUser(BaseUser):\n    \"\"\"\n    Represents partial user information.\n\n    Attributes:\n        _client: The Client object, which is passed to all objects this Client generates.\n        id: The user's ID.\n        name: The user's name.\n        display_name: The user's display name.\n        has_verified_badge: If the user has a verified badge.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The data from the endpoint.\n        \"\"\"\n        self._client: Client = client\n\n        self.id: int = data.get(\"id\") or data.get(\"userId\") or data.get(\"Id\")\n\n        super().__init__(client=client, user_id=self.id)\n\n        self.name: str = data.get(\"name\") or data.get(\"Name\") or data.get(\"username\") or data.get(\"Username\")\n        self.display_name: str = data.get(\"displayName\")\n        self.has_verified_badge: bool = data.get(\"hasVerifiedBadge\", False) or data.get(\"HasVerifiedBadge\", False)\n</code></pre>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.PartialUser.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/partials/partialuser.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The data from the endpoint.\n    \"\"\"\n    self._client: Client = client\n\n    self.id: int = data.get(\"id\") or data.get(\"userId\") or data.get(\"Id\")\n\n    super().__init__(client=client, user_id=self.id)\n\n    self.name: str = data.get(\"name\") or data.get(\"Name\") or data.get(\"username\") or data.get(\"Username\")\n    self.display_name: str = data.get(\"displayName\")\n    self.has_verified_badge: bool = data.get(\"hasVerifiedBadge\", False) or data.get(\"HasVerifiedBadge\", False)\n</code></pre>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.PreviousUsernamesPartialUser","title":"<code>PreviousUsernamesPartialUser</code>","text":"<p>             Bases: <code>PartialUser</code></p> <p>Represents a partial user in the context of a search where the user's previous usernames are present. Attributes:     previous_usernames: A list of the user's previous usernames.</p> Source code in <code>roblox/partials/partialuser.py</code> <pre><code>class PreviousUsernamesPartialUser(PartialUser):\n    \"\"\"\n    Represents a partial user in the context of a search where the user's previous usernames are present.\n    Attributes:\n        previous_usernames: A list of the user's previous usernames.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The data from the endpoint.\n        \"\"\"\n        super().__init__(client=client, data=data)\n\n        self.previous_usernames: List[str] = data[\"previousUsernames\"]\n</code></pre>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.PreviousUsernamesPartialUser.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/partials/partialuser.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The data from the endpoint.\n    \"\"\"\n    super().__init__(client=client, data=data)\n\n    self.previous_usernames: List[str] = data[\"previousUsernames\"]\n</code></pre>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser","title":"<code>RequestedUsernamePartialUser</code>","text":"<p>             Bases: <code>PartialUser</code></p> <p>Represents a partial user in the context of a search where the requested username is present.</p> <p>Attributes:</p> Name Type Description <code>requested_username</code> <code>Optional[str]</code> <p>The requested username.</p> Source code in <code>roblox/partials/partialuser.py</code> <pre><code>class RequestedUsernamePartialUser(PartialUser):\n    \"\"\"\n    Represents a partial user in the context of a search where the requested username is present.\n\n    Attributes:\n        requested_username: The requested username.\n    \"\"\"\n\n    def __init__(self, client: Client, data: dict):\n        \"\"\"\n        Arguments:\n            client: The Client.\n            data: The data from the endpoint.\n        \"\"\"\n        super().__init__(client=client, data=data)\n\n        self.requested_username: Optional[str] = data.get(\"requestedUsername\")\n</code></pre>"},{"location":"reference/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser.__init__","title":"<code>__init__(client, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>data</code> <code>dict</code> <p>The data from the endpoint.</p> required Source code in <code>roblox/partials/partialuser.py</code> <pre><code>def __init__(self, client: Client, data: dict):\n    \"\"\"\n    Arguments:\n        client: The Client.\n        data: The data from the endpoint.\n    \"\"\"\n    super().__init__(client=client, data=data)\n\n    self.requested_username: Optional[str] = data.get(\"requestedUsername\")\n</code></pre>"},{"location":"reference/utilities/","title":"utilities","text":"<p>Contains utilities used internally for ro.py.</p>"},{"location":"reference/utilities/exceptions/","title":"exceptions","text":"<p>Contains exceptions used by ro.py.</p>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.AssetNotFound","title":"<code>AssetNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid asset IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class AssetNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid asset IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.BadRequest","title":"<code>BadRequest</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 400.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class BadRequest(HTTPException):\n    \"\"\"HTTP exception raised for status code 400.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.BadgeNotFound","title":"<code>BadgeNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid badge IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class BadgeNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid badge IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.Forbidden","title":"<code>Forbidden</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class Forbidden(HTTPException):\n    \"\"\"HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.GroupNotFound","title":"<code>GroupNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid group IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class GroupNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid group IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.HTTPException","title":"<code>HTTPException</code>","text":"<p>             Bases: <code>RobloxException</code></p> <p>Exception that's raised when an HTTP request fails.</p> <p>Attributes:</p> Name Type Description <code>response</code> <code>Response</code> <p>The HTTP response object.</p> <code>status</code> <code>int</code> <p>The HTTP response status code.</p> <code>errors</code> <code>List[ResponseError]</code> <p>A list of Roblox response errors.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class HTTPException(RobloxException):\n    \"\"\"\n    Exception that's raised when an HTTP request fails.\n\n    Attributes:\n        response: The HTTP response object.\n        status: The HTTP response status code.\n        errors: A list of Roblox response errors.\n    \"\"\"\n\n    def __init__(self, response: Response, errors: Optional[list] = None):\n        \"\"\"\n        Arguments:\n            response: The raw response object.\n            errors: A list of errors.\n        \"\"\"\n        self.response: Response = response\n        self.status: int = response.status_code\n        self.errors: List[ResponseError]\n\n        if errors:\n            self.errors = [\n                ResponseError(data=error_data) for error_data in errors\n            ]\n        else:\n            self.errors = []\n\n        if self.errors:\n            error_string = self._generate_string()\n            super().__init__(\n                f\"{response.status_code} {response.reason_phrase}: {response.url}.\\n\\nErrors:\\n{error_string}\")\n        else:\n            super().__init__(f\"{response.status_code} {response.reason_phrase}: {response.url}\")\n\n    def _generate_string(self) -&gt; str:\n        parsed_errors = []\n        for error in self.errors:\n            # Make each error into a parsed string\n            parsed_error = f\"\\t{error.code}: {error.message}\"\n            error_messages = []\n\n            error.user_facing_message and error_messages.append(f\"User-facing message: {error.user_facing_message}\")\n            error.field and error_messages.append(f\"Field: {error.field}\")\n            error.retryable and error_messages.append(f\"Retryable: {error.retryable}\")\n\n            if error_messages:\n                error_message_string = \"\\n\\t\\t\".join(error_messages)\n                parsed_error += f\"\\n\\t\\t{error_message_string}\"\n\n            parsed_errors.append(parsed_error)\n\n        # Turn the parsed errors into a joined string\n        return \"\\n\".join(parsed_errors)\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.HTTPException.__init__","title":"<code>__init__(response, errors=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The raw response object.</p> required <code>errors</code> <code>Optional[list]</code> <p>A list of errors.</p> <code>None</code> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>def __init__(self, response: Response, errors: Optional[list] = None):\n    \"\"\"\n    Arguments:\n        response: The raw response object.\n        errors: A list of errors.\n    \"\"\"\n    self.response: Response = response\n    self.status: int = response.status_code\n    self.errors: List[ResponseError]\n\n    if errors:\n        self.errors = [\n            ResponseError(data=error_data) for error_data in errors\n        ]\n    else:\n        self.errors = []\n\n    if self.errors:\n        error_string = self._generate_string()\n        super().__init__(\n            f\"{response.status_code} {response.reason_phrase}: {response.url}.\\n\\nErrors:\\n{error_string}\")\n    else:\n        super().__init__(f\"{response.status_code} {response.reason_phrase}: {response.url}\")\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.InternalServerError","title":"<code>InternalServerError</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class InternalServerError(HTTPException):\n    \"\"\"\n    HTTP exception raised for status code 500.\n    This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can\n    sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.InvalidRole","title":"<code>InvalidRole</code>","text":"<p>             Bases: <code>RobloxException</code></p> <p>Raised when a role doesn't exist.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class InvalidRole(RobloxException):\n    \"\"\"\n    Raised when a role doesn't exist.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.ItemNotFound","title":"<code>ItemNotFound</code>","text":"<p>             Bases: <code>RobloxException</code></p> <p>Raised for invalid items.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class ItemNotFound(RobloxException):\n    \"\"\"\n    Raised for invalid items.\n    \"\"\"\n\n    def __init__(self, message: str, response: Optional[Response] = None):\n        \"\"\"\n        Arguments:\n            response: The raw response object.\n        \"\"\"\n        self.response: Optional[Response] = response\n        self.status: Optional[int] = response.status_code if response else None\n        super().__init__(message)\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.ItemNotFound.__init__","title":"<code>__init__(message, response=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>response</code> <code>Optional[Response]</code> <p>The raw response object.</p> <code>None</code> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>def __init__(self, message: str, response: Optional[Response] = None):\n    \"\"\"\n    Arguments:\n        response: The raw response object.\n    \"\"\"\n    self.response: Optional[Response] = response\n    self.status: Optional[int] = response.status_code if response else None\n    super().__init__(message)\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.NoMoreItems","title":"<code>NoMoreItems</code>","text":"<p>             Bases: <code>RobloxException</code></p> <p>Raised when there are no more items left to iterate through.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class NoMoreItems(RobloxException):\n    \"\"\"\n    Raised when there are no more items left to iterate through.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.NotFound","title":"<code>NotFound</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this!</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class NotFound(HTTPException):\n    \"\"\"\n    HTTP exception raised for status code 404.\n    This usually means we have an internal URL issue - please make a GitHub issue about this!\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.PlaceNotFound","title":"<code>PlaceNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid place IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class PlaceNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid place IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.PluginNotFound","title":"<code>PluginNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid plugin IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class PluginNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid plugin IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.ResponseError","title":"<code>ResponseError</code>","text":"<p>Represents an error returned by a Roblox game server.</p> <p>Attributes:</p> Name Type Description <code>code</code> <code>int</code> <p>The error code.</p> <code>message</code> <code>Optional[str]</code> <p>The error message.</p> <code>user_facing_message</code> <code>Optional[str]</code> <p>A more simple error message intended for frontend use.</p> <code>field</code> <code>Optional[str]</code> <p>The field causing this error.</p> <code>retryable</code> <code>Optional[str]</code> <p>Whether retrying this exception could supress this issue.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class ResponseError:\n    \"\"\"\n    Represents an error returned by a Roblox game server.\n\n    Attributes:\n        code: The error code.\n        message: The error message.\n        user_facing_message: A more simple error message intended for frontend use.\n        field: The field causing this error.\n        retryable: Whether retrying this exception could supress this issue.\n    \"\"\"\n\n    def __init__(self, data: dict):\n        self.code: int = data[\"code\"]\n        self.message: Optional[str] = data.get(\"message\")\n        self.user_facing_message: Optional[str] = data.get(\"userFacingMessage\")\n        self.field: Optional[str] = data.get(\"field\")\n        self.retryable: Optional[str] = data.get(\"retryable\")\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.RobloxException","title":"<code>RobloxException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base exception for all of ro.py.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class RobloxException(Exception):\n    \"\"\"\n    Base exception for all of ro.py.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.TooManyRequests","title":"<code>TooManyRequests</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 429. This means that Roblox has ratelimited you.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class TooManyRequests(HTTPException):\n    \"\"\"\n    HTTP exception raised for status code 429.\n    This means that Roblox has [ratelimited](https://en.wikipedia.org/wiki/Rate_limiting) you.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.Unauthorized","title":"<code>Unauthorized</code>","text":"<p>             Bases: <code>HTTPException</code></p> <p>HTTP exception raised for status code 401. This usually means you aren't properly authenticated.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class Unauthorized(HTTPException):\n    \"\"\"HTTP exception raised for status code 401. This usually means you aren't properly authenticated.\"\"\"\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.UniverseNotFound","title":"<code>UniverseNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid universe IDs.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class UniverseNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid universe IDs.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.UserNotFound","title":"<code>UserNotFound</code>","text":"<p>             Bases: <code>ItemNotFound</code></p> <p>Raised for invalid user IDs or usernames.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>class UserNotFound(ItemNotFound):\n    \"\"\"\n    Raised for invalid user IDs or usernames.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/utilities/exceptions/#roblox.utilities.exceptions.get_exception_from_status_code","title":"<code>get_exception_from_status_code(code)</code>","text":"<p>Gets an exception that should be raised instead of the generic HTTPException for this status code.</p> Source code in <code>roblox/utilities/exceptions.py</code> <pre><code>def get_exception_from_status_code(code: int) -&gt; Type[HTTPException]:\n    \"\"\"\n    Gets an exception that should be raised instead of the generic HTTPException for this status code.\n    \"\"\"\n    return _codes_exceptions.get(code) or HTTPException\n</code></pre>"},{"location":"reference/utilities/iterators/","title":"iterators","text":"<p>This module contains iterators used internally by ro.py to provide paginated information.</p>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.IteratorItems","title":"<code>IteratorItems</code>","text":"<p>             Bases: <code>AsyncIterator</code></p> <p>Represents the items inside of an iterator.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class IteratorItems(AsyncIterator):\n    \"\"\"\n    Represents the items inside of an iterator.\n    \"\"\"\n\n    def __init__(self, iterator: RobloxIterator, max_items: Optional[int] = None):\n        self._iterator = iterator\n        self._position: int = 0\n        self._global_position: int = 0\n        self._items: list = []\n        self._max_items = max_items\n\n    def __aiter__(self):\n        self._position = 0\n        self._items = []\n        return self\n\n    async def __anext__(self):\n        if self._position == len(self._items):\n            # we are at the end of our current page of items. start again with a new page\n            self._position = 0\n            try:\n                # get new items\n                self._items = await self._iterator.next()\n            except NoMoreItems:\n                # if there aren't any more items, reset and break the loop\n                self._position = 0\n                self._global_position = 0\n                self._items = []\n                raise StopAsyncIteration\n\n        if self._max_items is not None and self._global_position &gt;= self._max_items:\n            raise StopAsyncIteration\n\n        # if we got here we know there are more items\n        try:\n            item = self._items[self._position]\n        except IndexError:\n            # edge case for group roles\n            raise StopAsyncIteration\n        # we advance the iterator by one for the next iteration\n        self._position += 1\n        self._global_position += 1\n        return item\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.IteratorPages","title":"<code>IteratorPages</code>","text":"<p>             Bases: <code>AsyncIterator</code></p> <p>Represents the pages inside of an iterator.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class IteratorPages(AsyncIterator):\n    \"\"\"\n    Represents the pages inside of an iterator.\n    \"\"\"\n\n    def __init__(self, iterator: RobloxIterator):\n        self._iterator = iterator\n\n    def __aiter__(self):\n        return self\n\n    async def __anext__(self):\n        try:\n            page = await self._iterator.next()\n            return page\n        except NoMoreItems:\n            raise StopAsyncIteration\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.PageIterator","title":"<code>PageIterator</code>","text":"<p>             Bases: <code>RobloxIterator</code></p> <p>Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial: Pagination For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination.</p> <p>Attributes:</p> Name Type Description <code>_client</code> <code>Client</code> <p>The Client.</p> <code>url</code> <code>str</code> <p>The endpoint to hit for new page data.</p> <code>sort_order</code> <code>SortOrder</code> <p>The sort order to use for returned data.</p> <code>page_size</code> <code>int</code> <p>How much data should be returned per-page.</p> <code>extra_parameters</code> <code>dict</code> <p>Extra parameters to pass to the endpoint.</p> <code>handler</code> <code>Callable</code> <p>A callable object to use to convert raw endpoint data to parsed objects.</p> <code>handler_kwargs</code> <code>dict</code> <p>Extra keyword arguments to pass to the handler.</p> <code>next_cursor</code> <code>str</code> <p>Cursor to use to advance to the next page.</p> <code>previous_cursor</code> <code>str</code> <p>Cursor to use to advance to the previous page.</p> <code>iterator_position</code> <code>int</code> <p>What position in the iterator_items the iterator is currently at.</p> <code>iterator_items</code> <code>list</code> <p>List of current items the iterator is working on.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class PageIterator(RobloxIterator):\n    \"\"\"\n    Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial:\n    [Pagination](../../tutorials/pagination.md)\n    For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination.\n\n    Attributes:\n        _client: The Client.\n        url: The endpoint to hit for new page data.\n        sort_order: The sort order to use for returned data.\n        page_size: How much data should be returned per-page.\n        extra_parameters: Extra parameters to pass to the endpoint.\n        handler: A callable object to use to convert raw endpoint data to parsed objects.\n        handler_kwargs: Extra keyword arguments to pass to the handler.\n        next_cursor: Cursor to use to advance to the next page.\n        previous_cursor: Cursor to use to advance to the previous page.\n        iterator_position: What position in the iterator_items the iterator is currently at.\n        iterator_items: List of current items the iterator is working on.\n    \"\"\"\n\n    def __init__(\n            self,\n            client: Client,\n            url: str,\n            sort_order: SortOrder = SortOrder.Ascending,\n            page_size: int = 10,\n            max_items: int = None,\n            extra_parameters: Optional[dict] = None,\n            handler: Optional[Callable] = None,\n            handler_kwargs: Optional[dict] = None\n    ):\n        \"\"\"\n        Parameters:\n            client: The Client.\n            url: The endpoint to hit for new page data.\n            sort_order: The sort order to use for returned data.\n            page_size: How much data should be returned per-page.\n            max_items: The maximum amount of items to return when this iterator is looped through.\n            extra_parameters: Extra parameters to pass to the endpoint.\n            handler: A callable object to use to convert raw endpoint data to parsed objects.\n            handler_kwargs: Extra keyword arguments to pass to the handler.\n        \"\"\"\n        super().__init__(max_items=max_items)\n\n        self._client: Client = client\n\n        # store some basic arguments in the object\n        self.url: str = url\n        self.sort_order: SortOrder = sort_order\n        self.page_size: int = page_size\n\n        self.extra_parameters: dict = extra_parameters or {}\n        self.handler: Callable = handler\n        self.handler_kwargs: dict = handler_kwargs or {}\n\n        # cursors to use for next, previous\n        self.next_cursor: str = \"\"\n        self.previous_cursor: str = \"\"\n\n        # iter values\n        self.iterator_position: int = 0\n        self.iterator_items: list = []\n        self.next_started: bool = False\n\n    async def next(self):\n        \"\"\"\n        Advances the iterator to the next page.\n        \"\"\"\n        if self.next_started and not self.next_cursor:\n            \"\"\"\n            If we just started and there is no cursor, this is the last page, because we can go back but not forward.\n            We should raise an exception here.\n            \"\"\"\n            raise NoMoreItems(\"No more items.\")\n\n        if not self.next_started:\n            self.next_started = True\n\n        page_response = await self._client.requests.get(\n            url=self.url,\n            params={\n                \"cursor\": self.next_cursor,\n                \"limit\": self.page_size,\n                \"sortOrder\": self.sort_order.value,\n                **self.extra_parameters\n            }\n        )\n        page_data = page_response.json()\n\n        # fill in cursors\n        self.next_cursor = page_data[\"nextPageCursor\"]\n        self.previous_cursor = page_data[\"previousPageCursor\"]\n\n        data = page_data[\"data\"]\n\n        if self.handler:\n            data = [\n                self.handler(\n                    client=self._client,\n                    data=item_data,\n                    **self.handler_kwargs\n                ) for item_data in data\n            ]\n\n        return data\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.PageIterator.__init__","title":"<code>__init__(client, url, sort_order=SortOrder.Ascending, page_size=10, max_items=None, extra_parameters=None, handler=None, handler_kwargs=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client.</p> required <code>url</code> <code>str</code> <p>The endpoint to hit for new page data.</p> required <code>sort_order</code> <code>SortOrder</code> <p>The sort order to use for returned data.</p> <code>Ascending</code> <code>page_size</code> <code>int</code> <p>How much data should be returned per-page.</p> <code>10</code> <code>max_items</code> <code>int</code> <p>The maximum amount of items to return when this iterator is looped through.</p> <code>None</code> <code>extra_parameters</code> <code>Optional[dict]</code> <p>Extra parameters to pass to the endpoint.</p> <code>None</code> <code>handler</code> <code>Optional[Callable]</code> <p>A callable object to use to convert raw endpoint data to parsed objects.</p> <code>None</code> <code>handler_kwargs</code> <code>Optional[dict]</code> <p>Extra keyword arguments to pass to the handler.</p> <code>None</code> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>def __init__(\n        self,\n        client: Client,\n        url: str,\n        sort_order: SortOrder = SortOrder.Ascending,\n        page_size: int = 10,\n        max_items: int = None,\n        extra_parameters: Optional[dict] = None,\n        handler: Optional[Callable] = None,\n        handler_kwargs: Optional[dict] = None\n):\n    \"\"\"\n    Parameters:\n        client: The Client.\n        url: The endpoint to hit for new page data.\n        sort_order: The sort order to use for returned data.\n        page_size: How much data should be returned per-page.\n        max_items: The maximum amount of items to return when this iterator is looped through.\n        extra_parameters: Extra parameters to pass to the endpoint.\n        handler: A callable object to use to convert raw endpoint data to parsed objects.\n        handler_kwargs: Extra keyword arguments to pass to the handler.\n    \"\"\"\n    super().__init__(max_items=max_items)\n\n    self._client: Client = client\n\n    # store some basic arguments in the object\n    self.url: str = url\n    self.sort_order: SortOrder = sort_order\n    self.page_size: int = page_size\n\n    self.extra_parameters: dict = extra_parameters or {}\n    self.handler: Callable = handler\n    self.handler_kwargs: dict = handler_kwargs or {}\n\n    # cursors to use for next, previous\n    self.next_cursor: str = \"\"\n    self.previous_cursor: str = \"\"\n\n    # iter values\n    self.iterator_position: int = 0\n    self.iterator_items: list = []\n    self.next_started: bool = False\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.PageIterator.next","title":"<code>next()</code>  <code>async</code>","text":"<p>Advances the iterator to the next page.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>async def next(self):\n    \"\"\"\n    Advances the iterator to the next page.\n    \"\"\"\n    if self.next_started and not self.next_cursor:\n        \"\"\"\n        If we just started and there is no cursor, this is the last page, because we can go back but not forward.\n        We should raise an exception here.\n        \"\"\"\n        raise NoMoreItems(\"No more items.\")\n\n    if not self.next_started:\n        self.next_started = True\n\n    page_response = await self._client.requests.get(\n        url=self.url,\n        params={\n            \"cursor\": self.next_cursor,\n            \"limit\": self.page_size,\n            \"sortOrder\": self.sort_order.value,\n            **self.extra_parameters\n        }\n    )\n    page_data = page_response.json()\n\n    # fill in cursors\n    self.next_cursor = page_data[\"nextPageCursor\"]\n    self.previous_cursor = page_data[\"previousPageCursor\"]\n\n    data = page_data[\"data\"]\n\n    if self.handler:\n        data = [\n            self.handler(\n                client=self._client,\n                data=item_data,\n                **self.handler_kwargs\n            ) for item_data in data\n        ]\n\n    return data\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator","title":"<code>PageNumberIterator</code>","text":"<p>             Bases: <code>RobloxIterator</code></p> <p>Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com.</p> <p>Attributes:</p> Name Type Description <code>url</code> <code>str</code> <p>The endpoint to hit for new page data.</p> <code>page_number</code> <code>int</code> <p>The current page number.</p> <code>page_size</code> <code>int</code> <p>The size of each page.</p> <code>extra_parameters</code> <code>dict</code> <p>Extra parameters to pass to the endpoint.</p> <code>handler</code> <code>Callable</code> <p>A callable object to use to convert raw endpoint data to parsed objects.</p> <code>handler_kwargs</code> <code>dict</code> <p>Extra keyword arguments to pass to the handler.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class PageNumberIterator(RobloxIterator):\n    \"\"\"\n    Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com.\n\n    Attributes:\n        url: The endpoint to hit for new page data.\n        page_number: The current page number.\n        page_size: The size of each page.\n        extra_parameters: Extra parameters to pass to the endpoint.\n        handler: A callable object to use to convert raw endpoint data to parsed objects.\n        handler_kwargs: Extra keyword arguments to pass to the handler.\n    \"\"\"\n\n    def __init__(\n            self,\n            client: Client,\n            url: str,\n            page_size: int = 10,\n            extra_parameters: Optional[dict] = None,\n            handler: Optional[Callable] = None,\n            handler_kwargs: Optional[dict] = None\n    ):\n        super().__init__()\n\n        self._client: Client = client\n\n        self.url: str = url\n        self.page_number: int = 1\n        self.page_size: int = page_size\n\n        self.extra_parameters: dict = extra_parameters or {}\n        self.handler: Callable = handler\n        self.handler_kwargs: dict = handler_kwargs or {}\n\n        self.iterator_position = 0\n        self.iterator_items = []\n\n    async def next(self):\n        \"\"\"\n        Advances the iterator to the next page.\n        \"\"\"\n        page_response = await self._client.requests.get(\n            url=self.url,\n            params={\n                \"pageNumber\": self.page_number,\n                \"pageSize\": self.page_size,\n                **self.extra_parameters\n            }\n        )\n        data = page_response.json()\n\n        if len(data) == 0:\n            raise NoMoreItems(\"No more items.\")\n\n        self.page_number += 1\n\n        if self.handler:\n            data = [\n                self.handler(\n                    client=self._client,\n                    data=item_data,\n                    **self.handler_kwargs\n                ) for item_data in data\n            ]\n\n        return data\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator.next","title":"<code>next()</code>  <code>async</code>","text":"<p>Advances the iterator to the next page.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>async def next(self):\n    \"\"\"\n    Advances the iterator to the next page.\n    \"\"\"\n    page_response = await self._client.requests.get(\n        url=self.url,\n        params={\n            \"pageNumber\": self.page_number,\n            \"pageSize\": self.page_size,\n            **self.extra_parameters\n        }\n    )\n    data = page_response.json()\n\n    if len(data) == 0:\n        raise NoMoreItems(\"No more items.\")\n\n    self.page_number += 1\n\n    if self.handler:\n        data = [\n            self.handler(\n                client=self._client,\n                data=item_data,\n                **self.handler_kwargs\n            ) for item_data in data\n        ]\n\n    return data\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.RobloxIterator","title":"<code>RobloxIterator</code>","text":"<p>Represents a basic iterator which all iterators should implement.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class RobloxIterator:\n    \"\"\"\n    Represents a basic iterator which all iterators should implement.\n    \"\"\"\n\n    def __init__(self, max_items: int = None):\n        self.max_items: Optional[int] = max_items\n\n    async def next(self):\n        \"\"\"\n        Moves to the next page and returns that page's data.\n        \"\"\"\n\n        raise NotImplementedError\n\n    async def flatten(self, max_items: int = None) -&gt; list:\n        \"\"\"\n        Flattens the data into a list.\n        \"\"\"\n        if max_items is None:\n            max_items = self.max_items\n\n        items: list = []\n\n        while True:\n            try:\n                new_items = await self.next()\n                items += new_items\n            except NoMoreItems:\n                break\n\n            if max_items is not None and len(items) &gt;= max_items:\n                break\n\n        return items[:max_items]\n\n    def __aiter__(self):\n        return IteratorItems(\n            iterator=self,\n            max_items=self.max_items\n        )\n\n    def items(self, max_items: int = None) -&gt; IteratorItems:\n        \"\"\"\n        Returns an AsyncIterable containing each iterator item.\n        \"\"\"\n        if max_items is None:\n            max_items = self.max_items\n        return IteratorItems(\n            iterator=self,\n            max_items=max_items\n        )\n\n    def pages(self) -&gt; IteratorPages:\n        \"\"\"\n        Returns an AsyncIterable containing each iterator page. Each page is a list of items.\n        \"\"\"\n        return IteratorPages(self)\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.flatten","title":"<code>flatten(max_items=None)</code>  <code>async</code>","text":"<p>Flattens the data into a list.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>async def flatten(self, max_items: int = None) -&gt; list:\n    \"\"\"\n    Flattens the data into a list.\n    \"\"\"\n    if max_items is None:\n        max_items = self.max_items\n\n    items: list = []\n\n    while True:\n        try:\n            new_items = await self.next()\n            items += new_items\n        except NoMoreItems:\n            break\n\n        if max_items is not None and len(items) &gt;= max_items:\n            break\n\n    return items[:max_items]\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.items","title":"<code>items(max_items=None)</code>","text":"<p>Returns an AsyncIterable containing each iterator item.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>def items(self, max_items: int = None) -&gt; IteratorItems:\n    \"\"\"\n    Returns an AsyncIterable containing each iterator item.\n    \"\"\"\n    if max_items is None:\n        max_items = self.max_items\n    return IteratorItems(\n        iterator=self,\n        max_items=max_items\n    )\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.next","title":"<code>next()</code>  <code>async</code>","text":"<p>Moves to the next page and returns that page's data.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>async def next(self):\n    \"\"\"\n    Moves to the next page and returns that page's data.\n    \"\"\"\n\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.pages","title":"<code>pages()</code>","text":"<p>Returns an AsyncIterable containing each iterator page. Each page is a list of items.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>def pages(self) -&gt; IteratorPages:\n    \"\"\"\n    Returns an AsyncIterable containing each iterator page. Each page is a list of items.\n    \"\"\"\n    return IteratorPages(self)\n</code></pre>"},{"location":"reference/utilities/iterators/#roblox.utilities.iterators.SortOrder","title":"<code>SortOrder</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Order in which page data should load in.</p> Source code in <code>roblox/utilities/iterators.py</code> <pre><code>class SortOrder(Enum):\n    \"\"\"\n    Order in which page data should load in.\n    \"\"\"\n\n    Ascending = \"Asc\"\n    Descending = \"Desc\"\n</code></pre>"},{"location":"reference/utilities/requests/","title":"requests","text":"<p>This module contains classes used internally by ro.py for sending requests to Roblox endpoints.</p>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.CleanAsyncClient","title":"<code>CleanAsyncClient</code>","text":"<p>             Bases: <code>AsyncClient</code></p> <p>This is a clean-on-delete version of httpx.AsyncClient.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>class CleanAsyncClient(AsyncClient):\n    \"\"\"\n    This is a clean-on-delete version of httpx.AsyncClient.\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n    def __del__(self):\n        try:\n            asyncio.get_event_loop().create_task(self.aclose())\n        except RuntimeError:\n            pass\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests","title":"<code>Requests</code>","text":"<p>A special request object that implements special functionality required to connect to some Roblox endpoints.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>CleanAsyncClient</code> <p>Base session object to use when sending requests.</p> <code>xcsrf_token_name</code> <code>str</code> <p>The header that will contain the Cross-Site Request Forgery token.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>class Requests:\n    \"\"\"\n    A special request object that implements special functionality required to connect to some Roblox endpoints.\n\n    Attributes:\n        session: Base session object to use when sending requests.\n        xcsrf_token_name: The header that will contain the Cross-Site Request Forgery token.\n    \"\"\"\n\n    def __init__(\n            self,\n            session: CleanAsyncClient = None,\n            xcsrf_token_name: str = \"X-CSRF-Token\"\n    ):\n        \"\"\"\n        Arguments:\n            session: A custom session object to use for sending requests, compatible with httpx.AsyncClient.\n            xcsrf_token_name: The header to place X-CSRF-Token data into.\n        \"\"\"\n        self.session: CleanAsyncClient\n\n        if session is None:\n            self.session = CleanAsyncClient()\n        else:\n            self.session = session\n\n        self.xcsrf_token_name: str = xcsrf_token_name\n\n        self.session.headers[\"User-Agent\"] = \"Roblox/WinInet\"\n        self.session.headers[\"Referer\"] = \"www.roblox.com\"\n\n    async def request(self, method: str, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Arguments:\n            method: The request method.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        handle_xcsrf_token = kwargs.pop(\"handle_xcsrf_token\", True)\n        skip_roblox = kwargs.pop(\"skip_roblox\", False)\n\n        response = await self.session.request(method, *args, **kwargs)\n\n        if skip_roblox:\n            return response\n\n        method = method.lower()\n\n        if handle_xcsrf_token and self.xcsrf_token_name in response.headers and _xcsrf_allowed_methods.get(method):\n            self.session.headers[self.xcsrf_token_name] = response.headers[self.xcsrf_token_name]\n            if response.status_code == 403:  # Request failed, send it again\n                response = await self.session.request(method, *args, **kwargs)\n\n        if kwargs.get(\"stream\"):\n            # Streamed responses should not be decoded, so we immediately return the response.\n            return response\n\n        if response.is_error:\n            # Something went wrong, parse an error\n            content_type = response.headers.get(\"Content-Type\")\n            errors = None\n            if content_type and content_type.startswith(\"application/json\"):\n                data = None\n                try:\n                    data = response.json()\n                except JSONDecodeError:\n                    pass\n                errors = data and data.get(\"errors\")\n\n            exception = get_exception_from_status_code(response.status_code)(\n                response=response,\n                errors=errors\n            )\n            raise exception\n        else:\n            return response\n\n    async def get(self, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Sends a GET request.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        return await self.request(\"GET\", *args, **kwargs)\n\n    async def post(self, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Sends a POST request.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        return await self.request(\"POST\", *args, **kwargs)\n\n    async def put(self, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Sends a PATCH request.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        return await self.request(\"PUT\", *args, **kwargs)\n\n    async def patch(self, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Sends a PATCH request.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        return await self.request(\"PATCH\", *args, **kwargs)\n\n    async def delete(self, *args, **kwargs) -&gt; Response:\n        \"\"\"\n        Sends a DELETE request.\n\n        Returns:\n            An HTTP response.\n        \"\"\"\n\n        return await self.request(\"DELETE\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.__init__","title":"<code>__init__(session=None, xcsrf_token_name='X-CSRF-Token')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>session</code> <code>CleanAsyncClient</code> <p>A custom session object to use for sending requests, compatible with httpx.AsyncClient.</p> <code>None</code> <code>xcsrf_token_name</code> <code>str</code> <p>The header to place X-CSRF-Token data into.</p> <code>'X-CSRF-Token'</code> Source code in <code>roblox/utilities/requests.py</code> <pre><code>def __init__(\n        self,\n        session: CleanAsyncClient = None,\n        xcsrf_token_name: str = \"X-CSRF-Token\"\n):\n    \"\"\"\n    Arguments:\n        session: A custom session object to use for sending requests, compatible with httpx.AsyncClient.\n        xcsrf_token_name: The header to place X-CSRF-Token data into.\n    \"\"\"\n    self.session: CleanAsyncClient\n\n    if session is None:\n        self.session = CleanAsyncClient()\n    else:\n        self.session = session\n\n    self.xcsrf_token_name: str = xcsrf_token_name\n\n    self.session.headers[\"User-Agent\"] = \"Roblox/WinInet\"\n    self.session.headers[\"Referer\"] = \"www.roblox.com\"\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.delete","title":"<code>delete(*args, **kwargs)</code>  <code>async</code>","text":"<p>Sends a DELETE request.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def delete(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Sends a DELETE request.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    return await self.request(\"DELETE\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.get","title":"<code>get(*args, **kwargs)</code>  <code>async</code>","text":"<p>Sends a GET request.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def get(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Sends a GET request.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    return await self.request(\"GET\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.patch","title":"<code>patch(*args, **kwargs)</code>  <code>async</code>","text":"<p>Sends a PATCH request.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def patch(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Sends a PATCH request.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    return await self.request(\"PATCH\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.post","title":"<code>post(*args, **kwargs)</code>  <code>async</code>","text":"<p>Sends a POST request.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def post(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Sends a POST request.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    return await self.request(\"POST\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.put","title":"<code>put(*args, **kwargs)</code>  <code>async</code>","text":"<p>Sends a PATCH request.</p> <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def put(self, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Sends a PATCH request.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    return await self.request(\"PUT\", *args, **kwargs)\n</code></pre>"},{"location":"reference/utilities/requests/#roblox.utilities.requests.Requests.request","title":"<code>request(method, *args, **kwargs)</code>  <code>async</code>","text":"<p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>The request method.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>An HTTP response.</p> Source code in <code>roblox/utilities/requests.py</code> <pre><code>async def request(self, method: str, *args, **kwargs) -&gt; Response:\n    \"\"\"\n    Arguments:\n        method: The request method.\n\n    Returns:\n        An HTTP response.\n    \"\"\"\n\n    handle_xcsrf_token = kwargs.pop(\"handle_xcsrf_token\", True)\n    skip_roblox = kwargs.pop(\"skip_roblox\", False)\n\n    response = await self.session.request(method, *args, **kwargs)\n\n    if skip_roblox:\n        return response\n\n    method = method.lower()\n\n    if handle_xcsrf_token and self.xcsrf_token_name in response.headers and _xcsrf_allowed_methods.get(method):\n        self.session.headers[self.xcsrf_token_name] = response.headers[self.xcsrf_token_name]\n        if response.status_code == 403:  # Request failed, send it again\n            response = await self.session.request(method, *args, **kwargs)\n\n    if kwargs.get(\"stream\"):\n        # Streamed responses should not be decoded, so we immediately return the response.\n        return response\n\n    if response.is_error:\n        # Something went wrong, parse an error\n        content_type = response.headers.get(\"Content-Type\")\n        errors = None\n        if content_type and content_type.startswith(\"application/json\"):\n            data = None\n            try:\n                data = response.json()\n            except JSONDecodeError:\n                pass\n            errors = data and data.get(\"errors\")\n\n        exception = get_exception_from_status_code(response.status_code)(\n            response=response,\n            errors=errors\n        )\n        raise exception\n    else:\n        return response\n</code></pre>"},{"location":"reference/utilities/types/","title":"types","text":"<p>Contains types used internally by ro.py.</p>"},{"location":"reference/utilities/url/","title":"url","text":"<p>This module contains functions and objects used internally by ro.py to generate URLs.</p>"},{"location":"reference/utilities/url/#roblox.utilities.url.URLGenerator","title":"<code>URLGenerator</code>","text":"<p>Generates URLs based on a chosen base URL.</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <p>The base URL.</p> Source code in <code>roblox/utilities/url.py</code> <pre><code>class URLGenerator:\n    \"\"\"\n    Generates URLs based on a chosen base URL.\n\n    Attributes:\n        base_url: The base URL.\n    \"\"\"\n\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n\n    def get_subdomain(self, subdomain: str, protocol: str = \"https\") -&gt; str:\n        \"\"\"\n        Returns the full URL of a subdomain, given the base subdomain name.\n\n        Arguments:\n            subdomain: The URL subdomain.\n            protocol: The URL protocol.\n        \"\"\"\n        return f\"{protocol}://{subdomain}.{self.base_url}\"\n\n    def get_url(\n            self,\n            subdomain: str,\n            path: str = \"\",\n            base_url: str = None,\n            protocol: str = \"https\",\n    ) -&gt; str:\n        \"\"\"\n        Returns a full URL, given a subdomain name, protocol, and path.\n\n        Arguments:\n            subdomain: The URL subdomain.\n            protocol: The URL protocol.\n            path: The URL path.\n            base_url: The base URL.\n        \"\"\"\n        if base_url is None:\n            base_url = self.base_url\n        return f\"{protocol}://{subdomain}.{base_url}/{path}\"\n</code></pre>"},{"location":"reference/utilities/url/#roblox.utilities.url.URLGenerator.get_subdomain","title":"<code>get_subdomain(subdomain, protocol='https')</code>","text":"<p>Returns the full URL of a subdomain, given the base subdomain name.</p> <p>Parameters:</p> Name Type Description Default <code>subdomain</code> <code>str</code> <p>The URL subdomain.</p> required <code>protocol</code> <code>str</code> <p>The URL protocol.</p> <code>'https'</code> Source code in <code>roblox/utilities/url.py</code> <pre><code>def get_subdomain(self, subdomain: str, protocol: str = \"https\") -&gt; str:\n    \"\"\"\n    Returns the full URL of a subdomain, given the base subdomain name.\n\n    Arguments:\n        subdomain: The URL subdomain.\n        protocol: The URL protocol.\n    \"\"\"\n    return f\"{protocol}://{subdomain}.{self.base_url}\"\n</code></pre>"},{"location":"reference/utilities/url/#roblox.utilities.url.URLGenerator.get_url","title":"<code>get_url(subdomain, path='', base_url=None, protocol='https')</code>","text":"<p>Returns a full URL, given a subdomain name, protocol, and path.</p> <p>Parameters:</p> Name Type Description Default <code>subdomain</code> <code>str</code> <p>The URL subdomain.</p> required <code>protocol</code> <code>str</code> <p>The URL protocol.</p> <code>'https'</code> <code>path</code> <code>str</code> <p>The URL path.</p> <code>''</code> <code>base_url</code> <code>str</code> <p>The base URL.</p> <code>None</code> Source code in <code>roblox/utilities/url.py</code> <pre><code>def get_url(\n        self,\n        subdomain: str,\n        path: str = \"\",\n        base_url: str = None,\n        protocol: str = \"https\",\n) -&gt; str:\n    \"\"\"\n    Returns a full URL, given a subdomain name, protocol, and path.\n\n    Arguments:\n        subdomain: The URL subdomain.\n        protocol: The URL protocol.\n        path: The URL path.\n        base_url: The base URL.\n    \"\"\"\n    if base_url is None:\n        base_url = self.base_url\n    return f\"{protocol}://{subdomain}.{base_url}/{path}\"\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This tutorial is intended for people building standalone applications. It expects basic Python knowledge but will  explain almost everything you need to know to build. Make sure to read through the entire page instead of skimming it to ensure you don't miss anything important!  </p> <p>If at any point you are struggling to understand what to do, join the RoAPI Discord for help and support.</p>"},{"location":"tutorials/authentication/","title":"Authentication","text":"<p>To authenticate our client, we need our .ROBLOSECURITY token. To learn about why we need this and how to get it,  please see ROBLOSECURITY. </p> <p>Once we have our token, we can add it to our client by passing it as the first parameter.  Use the following code and replace <code>TOKEN</code> with the .ROBLOSECURITY token grabbed earlier to authenticate your client. <pre><code>from roblox import Client\nclient = Client(\"TOKEN\")\n</code></pre></p> <p>To test your token, replace the code in <code>main()</code> with the following: <pre><code>user = await client.get_authenticated_user()\nprint(\"ID:\", user.id)\nprint(\"Name:\", user.name)\n</code></pre> If this raises an error, or the name and ID differ from what is expected, follow the instructions and try again. The issue with this structure is that it is not secure. It's easy to slip up and copy your code and accidentally send  someone your token, and it makes it harder to collaborate on code with others.</p>"},{"location":"tutorials/authentication/#using-a-env-file","title":"Using a .env file","text":"<p>To solve this problem, we'll create a separate file called <code>.env</code> which will contain our token.  </p> <p>Your file should look like this, where TOKEN is the .ROBLOSECURITY token you grabbed earlier. .env<pre><code>ROBLOXTOKEN=TOKEN\n</code></pre> Place it in the same folder as your application's main file. </p> <p>Your file structure should look like this: <pre><code>.\n\u251c\u2500 .env\n\u2514\u2500 main.py\n</code></pre></p> <p>Next, install the python-dotenv library with the following command: <pre><code>$ pip install python-dotenv\n</code></pre> Then, add these lines to the top of your code: <pre><code>import os\nfrom dotenv import load_dotenv\n</code></pre> After that, replace the code where you generate your client with this: <pre><code>load_dotenv()\nclient = Client(os.getenv(\"ROBLOXTOKEN\"))\n</code></pre> Test it with <code>get_authenticated_user</code> and you should be all set!</p> <p>Finished code</p> main.py<pre><code>import asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom roblox import Client\n\nload_dotenv()\n\nclient = Client(os.getenv(\"ROBLOXTOKEN\"))\n\nasync def main():\n    user = await client.get_authenticated_user()\n    print(\"ID:\", user.id)\n    print(\"Name:\", user.name)\n\nasyncio.get_event_loop().run_until_complete(main())\n</code></pre>"},{"location":"tutorials/bases/","title":"Bases","text":"<p>Let's say you want to use ro.py to fetch the username history of a user, and you already know their user ID. You could do this: <pre><code>user = await client.get_user(968108160)\nasync for username in user.username_history():\n    print(username)\n</code></pre> This code works, but it has an issue: we're sending an unnecessary request to Roblox.  </p> <p>To explain why, let's take a look at what ro.py is doing behind the scenes in this code. - First, we call <code>await client.get_user(2067807455)</code>. ro.py asks Roblox for information about the user with the ID 2067807455 and returns it as a User object. - Next, we iterate through <code>user.username_history</code>. ro.py asks Roblox for the username history for user 2067807455 and returns it to you.  </p> <p>In this code, we call <code>await client.get_user()</code>, but we don't use any user information, like <code>user.name</code> or <code>user.description</code>. We don't need to make this request!  </p> <p>ro.py lets you skip the \"information request\" with the <code>client.get_base_TYPE</code> methods. We can use the <code>client.get_base_user()</code> function to improve this code: <pre><code>user = client.get_base_user(2067807455)  # no await!\nasync for username in user.username_history():\n    print(username)\n</code></pre></p> <p>Hint</p> <p>In ro.py, all functions you <code>await</code> or paginators you iterate through with <code>async for</code> make at least one request internally. Notice how you need to <code>await</code> the <code>get_user</code> function, but not the <code>get_base_user</code> function!</p> <p>This works for other Roblox types as well, like groups and assets. For example, this code kicks a user from a group with only 1 request: <pre><code>group = client.get_base_group(9695397)\nuser = client.get_base_user(2067807455)\nawait group.kick_user(user)\n</code></pre></p> <p>There's another technique we can use to optimize this example further. For functions that accept only one type, like <code>kick_user</code> which always accepts a user, ro.py accepts bare IDs: <pre><code>group = client.get_base_group(9695397)\nawait group.kick_user(2067807455)\n</code></pre></p>"},{"location":"tutorials/error-handling/","title":"Error handling","text":"<p>You can import ro.py exceptions from the <code>roblox.utilities.exceptions</code> module or from the main <code>roblox</code> module:</p> <pre><code>from roblox.utilities.exceptions import InternalServerError\n# or\nfrom roblox import InternalServerError\n</code></pre>"},{"location":"tutorials/error-handling/#client-errors","title":"Client errors","text":"<p>All of the <code>Client.get_TYPE()</code> methods, like <code>get_user()</code> and <code>get_group()</code>, raise their own exceptions.</p> Method Exception <code>client.get_asset()</code> <code>AssetNotFound</code> <code>client.get_badge()</code> <code>BadgeNotFound</code> <code>client.get_group()</code> <code>GroupNotFound</code> <code>client.get_place()</code> <code>PlaceNotFound</code> <code>client.get_plugin()</code> <code>PluginNotFound</code> <code>client.get_universe()</code> <code>UniverseNotFound</code> <code>client.get_user()</code> <code>UserNotFound</code> <code>client.get_user_by_username()</code> <code>UserNotFound</code> <p>Here is an example of catching one of these exceptions: <pre><code>try:\n    user = await client.get_user_by_username(\"InvalidUsername!!!\")\nexcept UserNotFound:\n    print(\"Invalid username!\")\n</code></pre></p> <p>All of these exceptions are subclasses of <code>ItemNotFound</code>, which you can use as a catch-all.</p>"},{"location":"tutorials/error-handling/#http-errors","title":"HTTP errors","text":"<p>When Roblox returns an error, ro.py raises an HTTP exception.  </p> <p>For example, if we try to post a group shout to a group that we don't the necessary permissions in, Roblox stops us and returns a  <code>401 Unauthorized</code> error: <pre><code>group = await client.get_group(1)\nawait group.update_shout(\"Shout!\")\n</code></pre> This code will raise an error like this: <pre><code>roblox.utilities.exceptions.Unauthorized: 401 Unauthorized: https://groups.roblox.com/v1/groups/1/status.\n\nErrors:\n    0: Authorization has been denied for this request.\n</code></pre> You can catch this error as follows:: <pre><code>group = await client.get_group(1)\ntry:\n    await group.update_shout(\"Shout!\")\n    print(\"Shout updated.\")\nexcept Unauthorized:\n    print(\"Not allowed to shout.\")\n</code></pre></p> <p>These are the different types of exceptions raised depending on the HTTP error code Roblox returns:</p> HTTP status code Exception 400 <code>BadRequest</code> 401 <code>Unauthorized</code> 403 <code>Forbidden</code> 429 <code>TooManyRequests</code> 500 <code>InternalServerError</code> <p>All of these exceptions are subclasses of the <code>HTTPException</code> error, which you can use as a catch-all. For other unrecognized error codes, ro.py will fallback to the default <code>HTTPException</code>.</p>"},{"location":"tutorials/error-handling/#getting-more-error-information","title":"Getting more error information","text":"<p>For all HTTP exceptions, ro.py exposes a <code>response</code> attribute so you can get the response information: <pre><code>group = await client.get_group(1)\ntry:\n    await group.update_shout(\"Shout!\")\n    print(\"Shout updated.\")\nexcept Unauthorized as exception:\n    print(\"Not allowed to shout.\")\n    print(\"URL:\", exception.response.url)\n</code></pre> Roblox also returns extra error data, which is what you see in the default error message.  We can access this with the <code>.errors</code> attribute, which is a list of <code>ResponseError</code>: <pre><code>group = await client.get_group(1)\ntry:\n    await group.update_shout(\"Shout!\")\n    print(\"Shout updated.\")\nexcept Unauthorized as exception:\n    print(\"Not allowed to shout.\")\n    if len(exception.errors) &gt; 0:\n        error = exception.errors[0]\n        print(\"Reason:\", error.message)\n</code></pre></p>"},{"location":"tutorials/get-started/","title":"Get started","text":"<p>At the beginning of every ro.py application is the client. The client represents a Roblox session, and it's your gateway to everything in ro.py.</p> <p>To initialize a client, import it from the <code>roblox</code> module: main.py<pre><code>from roblox import Client\nclient = Client()\n</code></pre></p> <p>We can use the client to get information from Roblox by calling <code>await client.get_TYPE()</code>, where <code>TYPE</code> is a Roblox datatype, like a user or group.</p> <p>There's a problem, though: if we run the following code... main.py<pre><code>from roblox import Client\nclient = Client()\nawait client.get_user(1)\n</code></pre> ...it'll raise an error like this: <pre><code>  File \"...\", line 1\nSyntaxError: 'await' outside function\n</code></pre></p> <p>This is because ro.py, like many Python libraries, is based on asyncio, a builtin Python library that allows for concurrent code. In the case of ro.py, this means your app can do something, like process Discord bot commands, while ro.py waits for Roblox to respond, saving tons of time and preventing one slow function from slowing down the whole program. Neat!</p> <p>This means we need to wrap our code in an asynchronous function and then run it with <code>asyncio.run</code>, like so:</p> main.py<pre><code>import asyncio\nfrom roblox import Client\nclient = Client()\n\nasync def main():\n    user = await client.get_user(1)\n\nasyncio.run(main())\n</code></pre> <p>This is the basic structure of every simple ro.py application. More complicated apps might not work like this - for example, in a Discord bot, another library might already be handling the asyncio part for you - but for simple scripts, this is what you'll be doing.</p> <p>Now the error is gone, but our code doesn't do anything yet. Let's try printing out some information about this user. Add these lines to the end of your main function:</p> main.py<pre><code>print(\"Name:\", user.name)\nprint(\"Display Name:\", user.display_name)\nprint(\"Description:\", user.description)\n</code></pre> <p>Great! We now have a program that prints out a user's name, display name, and description. This same basic concept works for other kinds of objects on Roblox, like groups. Try replacing the code in your main function with this: <pre><code>group = await client.get_group(1)\nprint(\"Name:\", group.name)\nprint(\"Description:\", group.description)\n</code></pre></p> <p>To see a list of everything you can do with the client, see <code>Client</code> in the Code Reference.  </p> <p>So far, we've been using ro.py unauthenticated. Basically, we aren't logged in to Roblox, which means we can't perform any actions, like updating our description, or access any sensitive information, like which game our friend is playing right now. Your next mission, if you choose to accept it, is authenticating your client.</p>"},{"location":"tutorials/pagination/","title":"Pagination","text":"<p>Certain Roblox endpoints are paginated. This means that going through their data is kind of like flipping through the pages of a book - you start at page 1 and then you can move forwards or backwards until you reach the start or the end.</p> <p>This can be annoying when all you want is \"every member in a group\" or \"the last 10 posts on a group wall\", so ro.py abstracts this away into an iterator that you can use to loop over your data.</p> <p>As an example, the <code>Client.user_search()</code> function takes in a keyword (like \"builderman\") and returns a <code>PageIterator</code> which you can loop through to get the search results.</p>"},{"location":"tutorials/pagination/#looping-through-items","title":"Looping through items","text":"<p>A simple <code>async for</code> can loop through the data no problem: <pre><code>async for user in client.user_search(\"builderman\"):\n    print(user.name)\n</code></pre> We can limit the amount of items returned using the <code>max_items</code> argument: <pre><code>async for user in client.user_search(\"builderman\", max_items=10):\n    print(user.name)\n</code></pre> We can also use <code>.items()</code>: <pre><code>async for user in client.user_search(\"builderman\").items(10):\n    print(user.name)\n</code></pre></p>"},{"location":"tutorials/pagination/#looping-through-pages","title":"Looping through pages","text":"<p>If we want to instead loop through each page, we can use <code>.pages()</code>: <pre><code>async for page in client.user_search(\"builderman\").pages():\n    print(\"Page:\")\n    for user in page:\n        print(f\"\\t{user.name}\")\n</code></pre> The size of this page depends on the value of the <code>page_size</code> argument. It can be either 10, 25, 50 or 100.  Higher values mean you send less requests to get the same amount of data, however these requests will usually take  longer.</p> <pre><code>async for page in client.user_search(\"builderman\", page_size=100).pages():\n    print(f\"Page with {len(page)} items:\")\n    for user in page:\n        print(f\"\\t{user.name}\")\n</code></pre>"},{"location":"tutorials/pagination/#flattening-into-a-list","title":"Flattening into a list","text":"<p>If we want to turn all of this data into one list, we can use <code>flatten()</code>. Be careful, as this isn't ideal for large sets of data and may use more memory. Because we turn this iterator into a list, we can use a normal for loop now: <pre><code>for user in await client.user_search(\"boatbomber\").flatten():\n    print(user.name)\n</code></pre> We can limit the amount of items in this list using the <code>max_items</code> argument: <pre><code>for user in await client.user_search(\"builderman\", max_items=10).flatten():\n    print(user.name)\n</code></pre> We can also pass the value directly to <code>.flatten()</code>: <pre><code>for user in await client.user_search(\"builderman\").flatten(10):\n    print(user.name)\n</code></pre> As the result is just a normal list, we can store it in a variable: <pre><code>users = await client.user_search(\"builderman\").flatten(10)\nprint(f\"{len(users)} items:\")\nfor user in users:\n    print(f\"\\t{user.name}\")\n</code></pre></p>"},{"location":"tutorials/pagination/#but-what-about-other-things","title":"But what about other things?","text":"<p>Iterators aren't just used for searching for users. There are also various other things that use this same concept, including group wall posts. In this example, we get the first 10 posts on the \"Official Group of Roblox\" group: <pre><code>group = await client.get_group(1200769)\nasync for post in group.get_wall_posts(max_items=10):\n    print(post)\n</code></pre> If instead we want the last 10 posts (as in the most recent posts) we can use the <code>sort_order</code> argument: <pre><code>group = await client.get_group(1200769)\nasync for post in group.get_wall_posts(sort_order=SortOrder.Descending, max_items=10):\n    print(post)\n</code></pre> The <code>SortOrder</code> object can be imported like this: <pre><code>from roblox.utilities.iterators import SortOrder\n</code></pre></p>"},{"location":"tutorials/roblosecurity/","title":"ROBLOSECURITY","text":"<p>When you log in on the Roblox website, you create a new session with a special identifier linked to it, and that token is stored on your computer as a cookie. Every single time your computer asks Roblox to do anything - for example, \"give me the name of this user\" - your computer also gives this token to Roblox, and it can look and see if that token is valid.  </p> <p>Let's say you're asking Roblox to give you a list of your friends. It'll look at that token and know who you are, and can use that to give you your friends list. When you log out, that token is invalidated. Even if the client holds on to the token, it won't be valid after logging out.</p> <p>This token is called the <code>.ROBLOSECURITY</code> token and you will need one to do anything that you need to be logged in to do on Roblox, including: - getting information about yourself (name, description, ID, etc) - changing avatar - getting friends list - playing games  </p> <p>Danger</p> <p>You may have heard of this token before and have been told that you should never, under any circumstances, share  this token with anyone - and this is true! This token does give an attacker access to your Roblox account. However, this doesn't mean they gain access to everything - over time, more and more things are being locked behind other verification methods, like 2-step verification.  We recommend using an alternate account with only the permissions it needs to limit the destruction an attacker can  do. Always enable 2-step verification!</p> <p>The best way to authenticate your ro.py application is to log in to Roblox on the website and then taking the .ROBLOSECURITY token from there.</p> <p>Warning</p> <p>Pressing the \"Log out\" button on the Roblox website invalidates your token, so you should not press this button after grabbing your token. Instead, consider using a private or incognito window and closing it when you are done.</p> <p>To grab your .ROBLOSECURITY cookie, log into your account on the Roblox website and follow the instructions below.</p> Chrome/Chromium-basedFirefox <p>You can access the cookie by going to https://www.roblox.com/, pressing the padlock icon next to the URL in your browser, clicking the arrow next to <code>roblox.com</code>, opening up the \"Cookies\" folder, clicking \".ROBLOSECURITY\", clicking on the \"Content\" text once, pressing Ctrl+A, and then pressing Ctrl+C (make sure not to double-click this field as you won't select the entire value!)  </p> <p></p> <p>Alternatively, you can access the cookie by going to https://www.roblox.com/, pressing Ctrl+Shift+I to access the Developer Tools, navigating to the \"Application\" tab, opening up the arrow next to \"Cookies\" on the sidebar on the left, clicking the <code>https://www.roblox.com</code> item underneath the Cookies button, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl+C.</p> <p></p> <p>You can access the cookie by going to https://www.roblox.com/ and pressing Shift+F9, pressing the \"Storage\" tab button on the top, opening up the \"Cookies\" section in the sidebar on the left,  clicking the <code>https://www.roblox.com</code> item underneath it, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl+C. </p>"},{"location":"tutorials/thumbnails/","title":"Thumbnails","text":"<p>The <code>client.thumbnails</code> attribute is a <code>ThumbnailProvider</code> object which you can use to generate thumbnails. Below is a list of item types on Roblox and methods you can use to generate their thumbnails.</p>"},{"location":"tutorials/thumbnails/#users","title":"Users","text":"<p>To generate avatar thumbnails, use the <code>get_user_avatar_thumbnails()</code> method. The <code>type</code> parameter is an <code>AvatarThumbnailType</code> object, which you can import from <code>roblox</code> or from <code>roblox.thumbnails</code>. Do note that the <code>size</code> parameter only allows certain sizes - see the docs for more details.</p> <pre><code>user = await client.get_user(2067807455)\nuser_thumbnails = await client.thumbnails.get_user_avatar_thumbnails(\n    users=[user],\n    type=AvatarThumbnailType.full_body,\n    size=(420, 420)\n)\n\nif len(user_thumbnails) &gt; 0:\n    user_thumbnail = user_thumbnails[0]\n    print(user_thumbnail.image_url)\n</code></pre> <p><code>thumbnails</code> is a list of <code>Thumbnail</code> objects.  We can read the first thumbnail (if it exists) and print out its URL.</p>"},{"location":"tutorials/thumbnails/#3d-thumbnails","title":"3D thumbnails","text":"<p>To generate 3D avatar thumbnails, use the <code>get_user_avatar_thumbnail_3d()</code> method and call <code>get_3d_data()</code> on the resulting thumbnail.</p> <p><pre><code>user = await client.get_user(1)\nuser_3d_thumbnail = await client.thumbnails.get_user_avatar_thumbnail_3d(user)\nuser_3d_data = await user_3d_thumbnail.get_3d_data()\nprint(\"OBJ:\", user_3d_data.obj.get_url())\nprint(\"MTL:\", user_3d_data.mtl.get_url())\nprint(\"Textures:\")\nfor texture in user_3d_data.textures:\n    print(texture.get_url())\n</code></pre> <code>threed_data</code> is a <code>ThreeDThumbnail</code> object.</p>"},{"location":"tutorials/thumbnails/#groups","title":"Groups","text":"<p>To generate group icons, use the  <code>get_group_icons()</code> method. <pre><code>group = await client.get_group(9695397)\ngroup_icons = await client.thumbnails.get_group_icons(\n    groups=[group],\n    size=(150, 150)\n)\nif len(group_icons) &gt; 0:\n    group_icon = group_icons[0]\n    print(group_icon.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#assets","title":"Assets","text":"<p>To generate asset thumbnails, use the  <code>get_asset_thumbnails()</code> method. <pre><code>asset = await client.get_asset(8100249026)\nasset_thumbnails = await client.thumbnails.get_asset_thumbnails(\n    assets=[asset],\n    size=(420, 420)\n)\nif len(asset_thumbnails) &gt; 0:\n    asset_thumbnail = asset_thumbnails[0]\n    print(asset_thumbnail.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#3d-thumbnails_1","title":"3D thumbnails","text":"<p>Note</p> <p>Not all assets support 3D thumbnails. Most \"catalog\" assets do, excluding \"classic faces\", which have no 3D representation.</p> <p>To generate 3D asset thumbnails, use the <code>get_asset_thumbnail_3d()</code> method and call <code>get_3d_data()</code> on the resulting thumbnail. <pre><code>asset = await client.get_asset(151784320)\nasset_3d_thumbnail = await client.thumbnails.get_asset_thumbnail_3d(asset)\nasset_3d_data = await asset_3d_thumbnail.get_3d_data()\nprint(\"OBJ:\", asset_3d_data.obj.get_url())\nprint(\"MTL:\", asset_3d_data.mtl.get_url())\nprint(\"Textures:\")\nfor texture in asset_3d_data.textures:\n    print(texture.get_url())\n</code></pre></p>"},{"location":"tutorials/thumbnails/#places","title":"Places","text":"<p>To generate place icons, use the <code>get_place_icons()</code> method. <pre><code>place = await client.get_place(8100260845)\nplace_thumbnails = await client.thumbnails.get_place_icons(\n    places=[place],\n    size=(512, 512)\n)\nif len(place_thumbnails) &gt; 0:\n    place_thumbnail = place_thumbnails[0]\n    print(place_thumbnail.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#universes","title":"Universes","text":""},{"location":"tutorials/thumbnails/#icons","title":"Icons","text":"<p>To generate universe icons, use the<code>get_universe_icons()</code> method. <pre><code>universe = await client.get_universe(3118067569)\nuniverse_icons = await client.thumbnails.get_universe_icons(\n    universes=[universe],\n    size=(512, 512)\n)\nif len(universe_icons) &gt; 0:\n    universe_icon = universe_icons[0]\n    print(universe_icon.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#thumbnails_1","title":"Thumbnails","text":"<p>To generate universe thumbnails, use the <code>get_universe_thumbnails()</code> method. Because each universe can have multiple thumbnails, this method behaves differently. <pre><code>universe = await client.get_universe(3118067569)\nuniverses_thumbnails = await client.thumbnails.get_universe_thumbnails(\n    universes=[universe],\n    size=(768, 432)\n)\nif len(universes_thumbnails) &gt; 0:\n    universe_thumbnails = universes_thumbnails[0]\n    for universe_thumbnail in universe_thumbnails.thumbnails:\n        print(universe_thumbnail.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#badges","title":"Badges","text":"<p>To generate badge icons, use the <code>get_badge_icons()</code> method. <pre><code>badge = await client.get_badge(2124867793)\nbadge_icons = await client.thumbnails.get_badge_icons(\n    badges=[badge],\n    size=(150, 150)\n)\nif len(badge_icons) &gt; 0:\n    icon = badge_icons[0]\n    print(icon.image_url)\n</code></pre></p>"},{"location":"tutorials/thumbnails/#gamepasses","title":"Gamepasses","text":"<p>To generate gamepass icons, use the <code>get_gamepass_icons()</code> method. This example uses <code>get_base_gamepass()</code> because there is no <code>get_gamepass</code> method. <pre><code>gamepass = client.get_base_gamepass(25421830)\ngamepass_icons = await client.thumbnails.get_gamepass_icons(\n    gamepasses=[gamepass],\n    size=(150, 150)\n)\nif len(gamepass_icons) &gt; 0:\n    icon = gamepass_icons[0]\n    print(icon.image_url)\n</code></pre></p>"}]}