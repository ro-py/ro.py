{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Welcome to ro.py! ro.py is an asynchronous, object-oriented wrapper for the Roblox web API. Features \u00b6 The key features are: Asynchronous : ro.py works well with asynchronous frameworks like FastAPI and discord.py . Easy : ro.py's client-based model is intuitive and easy to learn for both the beginner and expert developer. It abstracts away API requests and leaves you with simple objects that represent data types on the Roblox platform. Flexible : ro.py's builtin Requests object allows the user to do things that we haven't already implemented ourselves without dealing with advanced Roblox-specific concepts. Installation \u00b6 To install ro.py from PyPI, you can install with pip: pip install roblox To install the latest unstable version of ro.py, install git-scm and run the following: pip install git+git://github.com/ro-py/ro.py.git pip install git+https://github.com/ro-py/ro.py.git","title":"Overview"},{"location":"#overview","text":"Welcome to ro.py! ro.py is an asynchronous, object-oriented wrapper for the Roblox web API.","title":"Overview"},{"location":"#features","text":"The key features are: Asynchronous : ro.py works well with asynchronous frameworks like FastAPI and discord.py . Easy : ro.py's client-based model is intuitive and easy to learn for both the beginner and expert developer. It abstracts away API requests and leaves you with simple objects that represent data types on the Roblox platform. Flexible : ro.py's builtin Requests object allows the user to do things that we haven't already implemented ourselves without dealing with advanced Roblox-specific concepts.","title":"Features"},{"location":"#installation","text":"To install ro.py from PyPI, you can install with pip: pip install roblox To install the latest unstable version of ro.py, install git-scm and run the following: pip install git+git://github.com/ro-py/ro.py.git pip install git+https://github.com/ro-py/ro.py.git","title":"Installation"},{"location":"SUMMARY/","text":"Overview Tutorials Get Started Authentication Error Handling Thumbnails Pagination ROBLOSECURITY Bases Extensions Migrating to v2.0 Code Reference","title":"SUMMARY"},{"location":"reference/SUMMARY/","text":"roblox __init__ account assets badges bases __init__ baseasset basebadge baseconversation basegamepass basegroup baseinstance baseitem basejob baseplace baseplugin baserobloxbadge baserole basesociallink baseuniverse baseuser chat client conversations creatortype delivery friends gamepasses groups instances jobs members partials __init__ partialbadge partialgroup partialrole partialuniverse partialuser places plugins presence promotionchannels resale robloxbadges roles shout sociallinks threedthumbnails thumbnails universes users utilities __init__ exceptions iterators requests types url wall","title":"SUMMARY"},{"location":"reference/roblox/__init__/","text":"roblox.__init__ special \u00b6 ro.py A modern, asynchronous wrapper for the Roblox web API. Copyright 2020-present jmkdev License: MIT, see LICENSE __author__ special \u00b6 __copyright__ special \u00b6 __license__ special \u00b6 __title__ special \u00b6 __version__ special \u00b6","title":"__init__"},{"location":"reference/roblox/__init__/#roblox.__init__","text":"ro.py A modern, asynchronous wrapper for the Roblox web API. Copyright 2020-present jmkdev License: MIT, see LICENSE","title":"__init__"},{"location":"reference/roblox/__init__/#roblox.__init__.__author__","text":"","title":"__author__"},{"location":"reference/roblox/__init__/#roblox.__init__.__copyright__","text":"","title":"__copyright__"},{"location":"reference/roblox/__init__/#roblox.__init__.__license__","text":"","title":"__license__"},{"location":"reference/roblox/__init__/#roblox.__init__.__title__","text":"","title":"__title__"},{"location":"reference/roblox/__init__/#roblox.__init__.__version__","text":"","title":"__version__"},{"location":"reference/roblox/account/","text":"roblox.account \u00b6 Contains classes and functions related to the authenticated Roblox account. Not to be confused with users.py or the Account system. AccountProvider \u00b6 Provides methods that control the authenticated user's account. Source code in roblox/account.py class AccountProvider : \"\"\" Provides methods that control the authenticated user's account. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client to be used when getting information on an account. \"\"\" self . _client : Client = client async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] ) async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthday to update the Client's account to. password: The password to the Client's account, this is required when changing the birthday. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } ) async def get_description ( self ) -> string : \"\"\" Gets the authenticated user's description. Returns: The authenticated user's description. \"\"\" description_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ) ) description_data = description_response . json () return description_data [ \"description\" ] async def set_description ( self , description : string , ): \"\"\" Updates the authenticated user's description. This endpoint *may* require your token, and requires an unlocked PIN. Arguments: description: A string object that represents the description to update the Client's account to. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ), json = { \"description\" : description } ) __init__ ( self , client : Client ) special \u00b6 Parameters: Name Type Description Default client Client The Client to be used when getting information on an account. required Source code in roblox/account.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client to be used when getting information on an account. \"\"\" self . _client : Client = client get_birthday ( self ) -> date async \u00b6 Gets the authenticated user's birthday. Returns: The authenticated user's birthday. Source code in roblox/account.py async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] ) get_description ( self ) -> string async \u00b6 Gets the authenticated user's description. Returns: The authenticated user's description. Source code in roblox/account.py async def get_description ( self ) -> string : \"\"\" Gets the authenticated user's description. Returns: The authenticated user's description. \"\"\" description_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ) ) description_data = description_response . json () return description_data [ \"description\" ] set_birthday ( self , birthday : date , password : str = None ) async \u00b6 Changes the authenticated user's birthday. This endpoint may require your password, and requires an unlocked PIN. Parameters: Name Type Description Default birthday date A date object that represents the birthday to update the Client's account to. required password str The password to the Client's account, this is required when changing the birthday. None Source code in roblox/account.py async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthday to update the Client's account to. password: The password to the Client's account, this is required when changing the birthday. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } ) set_description ( self , description : string ) async \u00b6 Updates the authenticated user's description. This endpoint may require your token, and requires an unlocked PIN. Parameters: Name Type Description Default description string A string object that represents the description to update the Client's account to. required Source code in roblox/account.py async def set_description ( self , description : string , ): \"\"\" Updates the authenticated user's description. This endpoint *may* require your token, and requires an unlocked PIN. Arguments: description: A string object that represents the description to update the Client's account to. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ), json = { \"description\" : description } )","title":"account"},{"location":"reference/roblox/account/#roblox.account","text":"Contains classes and functions related to the authenticated Roblox account. Not to be confused with users.py or the Account system.","title":"account"},{"location":"reference/roblox/account/#roblox.account.AccountProvider","text":"Provides methods that control the authenticated user's account. Source code in roblox/account.py class AccountProvider : \"\"\" Provides methods that control the authenticated user's account. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client to be used when getting information on an account. \"\"\" self . _client : Client = client async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] ) async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthday to update the Client's account to. password: The password to the Client's account, this is required when changing the birthday. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } ) async def get_description ( self ) -> string : \"\"\" Gets the authenticated user's description. Returns: The authenticated user's description. \"\"\" description_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ) ) description_data = description_response . json () return description_data [ \"description\" ] async def set_description ( self , description : string , ): \"\"\" Updates the authenticated user's description. This endpoint *may* require your token, and requires an unlocked PIN. Arguments: description: A string object that represents the description to update the Client's account to. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ), json = { \"description\" : description } )","title":"AccountProvider"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.__init__","text":"Parameters: Name Type Description Default client Client The Client to be used when getting information on an account. required Source code in roblox/account.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client to be used when getting information on an account. \"\"\" self . _client : Client = client","title":"__init__()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.get_birthday","text":"Gets the authenticated user's birthday. Returns: The authenticated user's birthday. Source code in roblox/account.py async def get_birthday ( self ) -> date : \"\"\" Gets the authenticated user's birthday. Returns: The authenticated user's birthday. \"\"\" birthday_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ) ) birthday_data = birthday_response . json () return date ( month = birthday_data [ \"birthMonth\" ], day = birthday_data [ \"birthDay\" ], year = birthday_data [ \"birthYear\" ] )","title":"get_birthday()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.get_description","text":"Gets the authenticated user's description. Returns: The authenticated user's description. Source code in roblox/account.py async def get_description ( self ) -> string : \"\"\" Gets the authenticated user's description. Returns: The authenticated user's description. \"\"\" description_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ) ) description_data = description_response . json () return description_data [ \"description\" ]","title":"get_description()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.set_birthday","text":"Changes the authenticated user's birthday. This endpoint may require your password, and requires an unlocked PIN. Parameters: Name Type Description Default birthday date A date object that represents the birthday to update the Client's account to. required password str The password to the Client's account, this is required when changing the birthday. None Source code in roblox/account.py async def set_birthday ( self , birthday : date , password : str = None ): \"\"\" Changes the authenticated user's birthday. This endpoint *may* require your password, and requires an unlocked PIN. Arguments: birthday: A date object that represents the birthday to update the Client's account to. password: The password to the Client's account, this is required when changing the birthday. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/birthdate\" ), json = { \"birthMonth\" : birthday . month , \"birthDay\" : birthday . day , \"birthYear\" : birthday . year , \"password\" : password } )","title":"set_birthday()"},{"location":"reference/roblox/account/#roblox.account.AccountProvider.set_description","text":"Updates the authenticated user's description. This endpoint may require your token, and requires an unlocked PIN. Parameters: Name Type Description Default description string A string object that represents the description to update the Client's account to. required Source code in roblox/account.py async def set_description ( self , description : string , ): \"\"\" Updates the authenticated user's description. This endpoint *may* require your token, and requires an unlocked PIN. Arguments: description: A string object that represents the description to update the Client's account to. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"accountinformation\" , \"v1/description\" ), json = { \"description\" : description } )","title":"set_description()"},{"location":"reference/roblox/assets/","text":"roblox.assets \u00b6 This module contains classes intended to parse and deal with data from Roblox asset information endpoints. asset_type_names \u00b6 AssetType \u00b6 Represents a Roblox asset type. Attributes: Name Type Description id int Id of the Asset name Optional[str] Name of the Asset Source code in roblox/assets.py class AssetType : \"\"\" Represents a Roblox asset type. Attributes: id: Id of the Asset name: Name of the Asset \"\"\" def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , type_id : int ) special \u00b6 Parameters: Name Type Description Default type_id int The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. required Source code in roblox/assets.py def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id ) __repr__ ( self ) special \u00b6 Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" EconomyAsset ( BaseAsset ) \u00b6 Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details . Attributes: Name Type Description id int Id of the Asset product_id int Product id of the asset name str Name of the Asset description str Description of the Asset type AssetType Type of the Asset creator_type CreatorType Type of creator can be user or group see enum creator Union[PartialUser, AssetPartialGroup] creator can be a user or group object icon_image BaseAsset BaseAsset created datetime When the asset was created updated datetime When the asset was updated for the las time price Optional[int] price of the asset sales int amount of sales of the asset is_new bool if the asset it new is_for_sale bool if the asset is for sale is_public_domain bool if the asset is public domain is_limited bool if the asset is a limited item is_limited_unique bool if the asset is a unique limited item remaining Optional[int] How many items there are remaining if it is limited minimum_membership_level int Minimum membership level required to buy item content_rating_type_id int Unknown sale_availability_locations Unknown Source code in roblox/assets.py class EconomyAsset ( BaseAsset ): \"\"\" Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details. Attributes: id: Id of the Asset product_id: Product id of the asset name: Name of the Asset description: Description of the Asset type: Type of the Asset creator_type: Type of creator can be user or group see enum creator: creator can be a user or group object icon_image: BaseAsset created: When the asset was created updated: When the asset was updated for the las time price: price of the asset sales: amount of sales of the asset is_new: if the asset it new is_for_sale: if the asset is for sale is_public_domain: if the asset is public domain is_limited: if the asset is a limited item is_limited_unique: if the asset is a unique limited item remaining: How many items there are remaining if it is limited minimum_membership_level: Minimum membership level required to buy item content_rating_type_id: Unknown sale_availability_locations: Unknown \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on assets. data: The data from the request. \"\"\" super () . __init__ ( client = client , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( client = client , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( client = client , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client to be used when getting information on assets. required data dict The data from the request. required Source code in roblox/assets.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on assets. data: The data from the request. \"\"\" super () . __init__ ( client = client , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( client = client , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( client = client , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ] __repr__ ( self ) special \u00b6 Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"assets"},{"location":"reference/roblox/assets/#roblox.assets","text":"This module contains classes intended to parse and deal with data from Roblox asset information endpoints.","title":"assets"},{"location":"reference/roblox/assets/#roblox.assets.asset_type_names","text":"","title":"asset_type_names"},{"location":"reference/roblox/assets/#roblox.assets.AssetType","text":"Represents a Roblox asset type. Attributes: Name Type Description id int Id of the Asset name Optional[str] Name of the Asset Source code in roblox/assets.py class AssetType : \"\"\" Represents a Roblox asset type. Attributes: id: Id of the Asset name: Name of the Asset \"\"\" def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"AssetType"},{"location":"reference/roblox/assets/#roblox.assets.AssetType.__init__","text":"Parameters: Name Type Description Default type_id int The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. required Source code in roblox/assets.py def __init__ ( self , type_id : int ): \"\"\" Arguments: type_id: The AssetTypeID to instantiate this AssetType object with. This is used to determine the name of the AssetType. \"\"\" self . id : int = type_id self . name : Optional [ str ] = asset_type_names . get ( type_id )","title":"__init__()"},{"location":"reference/roblox/assets/#roblox.assets.AssetType.__repr__","text":"Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset","text":"Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details . Attributes: Name Type Description id int Id of the Asset product_id int Product id of the asset name str Name of the Asset description str Description of the Asset type AssetType Type of the Asset creator_type CreatorType Type of creator can be user or group see enum creator Union[PartialUser, AssetPartialGroup] creator can be a user or group object icon_image BaseAsset BaseAsset created datetime When the asset was created updated datetime When the asset was updated for the las time price Optional[int] price of the asset sales int amount of sales of the asset is_new bool if the asset it new is_for_sale bool if the asset is for sale is_public_domain bool if the asset is public domain is_limited bool if the asset is a limited item is_limited_unique bool if the asset is a unique limited item remaining Optional[int] How many items there are remaining if it is limited minimum_membership_level int Minimum membership level required to buy item content_rating_type_id int Unknown sale_availability_locations Unknown Source code in roblox/assets.py class EconomyAsset ( BaseAsset ): \"\"\" Represents a Roblox asset. It is intended to parse data from https://economy.roblox.com/v2/assets/ASSETID/details. Attributes: id: Id of the Asset product_id: Product id of the asset name: Name of the Asset description: Description of the Asset type: Type of the Asset creator_type: Type of creator can be user or group see enum creator: creator can be a user or group object icon_image: BaseAsset created: When the asset was created updated: When the asset was updated for the las time price: price of the asset sales: amount of sales of the asset is_new: if the asset it new is_for_sale: if the asset is for sale is_public_domain: if the asset is public domain is_limited: if the asset is a limited item is_limited_unique: if the asset is a unique limited item remaining: How many items there are remaining if it is limited minimum_membership_level: Minimum membership level required to buy item content_rating_type_id: Unknown sale_availability_locations: Unknown \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on assets. data: The data from the request. \"\"\" super () . __init__ ( client = client , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( client = client , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( client = client , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"EconomyAsset"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset.__init__","text":"Parameters: Name Type Description Default client Client The Client to be used when getting information on assets. required data dict The data from the request. required Source code in roblox/assets.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on assets. data: The data from the request. \"\"\" super () . __init__ ( client = client , asset_id = data [ \"AssetId\" ]) self . product_type : Optional [ str ] = data [ \"ProductType\" ] self . id : int = data [ \"AssetId\" ] self . product_id : int = data [ \"ProductId\" ] # TODO: make this a BaseProduct self . name : str = data [ \"Name\" ] self . description : str = data [ \"Description\" ] self . type : AssetType = AssetType ( type_id = data [ \"AssetTypeId\" ]) self . creator_type : CreatorType = CreatorType ( data [ \"Creator\" ][ \"CreatorType\" ]) self . creator : Union [ PartialUser , AssetPartialGroup ] if self . creator_type == CreatorType . user : self . creator : PartialUser = PartialUser ( client = client , data = data [ \"Creator\" ]) elif self . creator_type == CreatorType . group : self . creator : AssetPartialGroup = AssetPartialGroup ( client = client , data = data [ \"Creator\" ]) self . icon_image : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"IconImageAssetId\" ]) self . created : datetime = parse ( data [ \"Created\" ]) self . updated : datetime = parse ( data [ \"Updated\" ]) self . price : Optional [ int ] = data [ \"PriceInRobux\" ] self . sales : int = data [ \"Sales\" ] self . is_new : bool = data [ \"IsNew\" ] self . is_for_sale : bool = data [ \"IsForSale\" ] self . is_public_domain : bool = data [ \"IsPublicDomain\" ] self . is_limited : bool = data [ \"IsLimited\" ] self . is_limited_unique : bool = data [ \"IsLimitedUnique\" ] self . remaining : Optional [ int ] = data [ \"Remaining\" ] self . minimum_membership_level : int = data [ \"MinimumMembershipLevel\" ] self . content_rating_type_id : int = data [ \"ContentRatingTypeId\" ] self . sale_availability_locations = data [ \"SaleAvailabilityLocations\" ]","title":"__init__()"},{"location":"reference/roblox/assets/#roblox.assets.EconomyAsset.__repr__","text":"Source code in roblox/assets.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"__repr__()"},{"location":"reference/roblox/badges/","text":"roblox.badges \u00b6 This module contains classes intended to parse and deal with data from Roblox badge information endpoints. Badge ( BaseBadge ) \u00b6 Represents a badge from the API. Attributes: Name Type Description id int The badge Id. name str The name of the badge. description str The badge description. display_name str The localized name of the badge. display_description str The localized badge description. enabled bool Whether or not the badge is enabled. icon BaseAsset The badge icon. display_icon BaseAsset The localized badge icon. created datetime When the badge was created. updated datetime When the badge was updated. statistics BadgeStatistics Badge award statistics. awarding_universe PartialUniverse The universe the badge is being awarded from. Source code in roblox/badges.py class Badge ( BaseBadge ): \"\"\" Represents a badge from the API. Attributes: id: The badge Id. name: The name of the badge. description: The badge description. display_name: The localized name of the badge. display_description: The localized badge description. enabled: Whether or not the badge is enabled. icon: The badge icon. display_icon: The localized badge icon. created: When the badge was created. updated: When the badge was updated. statistics: Badge award statistics. awarding_universe: The universe the badge is being awarded from. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( client = client , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( client = client , data = data [ \"awardingUniverse\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client to be used when getting information on badges. required data dict The data from the endpoint. required Source code in roblox/badges.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( client = client , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( client = client , data = data [ \"awardingUniverse\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" BadgeStatistics \u00b6 Attributes: Name Type Description past_day_awarded_count int How many instances of this badge were awarded in the last day. awarded_count int How many instances of this badge have been awarded. win_rate_percentage int Percentage of players who have joined the parent universe have been awarded this badge. Source code in roblox/badges.py class BadgeStatistics : \"\"\" Attributes: past_day_awarded_count: How many instances of this badge were awarded in the last day. awarded_count: How many instances of this badge have been awarded. win_rate_percentage: Percentage of players who have joined the parent universe have been awarded this badge. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\" __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/badges.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ] __repr__ ( self ) special \u00b6 Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\"","title":"badges"},{"location":"reference/roblox/badges/#roblox.badges","text":"This module contains classes intended to parse and deal with data from Roblox badge information endpoints.","title":"badges"},{"location":"reference/roblox/badges/#roblox.badges.Badge","text":"Represents a badge from the API. Attributes: Name Type Description id int The badge Id. name str The name of the badge. description str The badge description. display_name str The localized name of the badge. display_description str The localized badge description. enabled bool Whether or not the badge is enabled. icon BaseAsset The badge icon. display_icon BaseAsset The localized badge icon. created datetime When the badge was created. updated datetime When the badge was updated. statistics BadgeStatistics Badge award statistics. awarding_universe PartialUniverse The universe the badge is being awarded from. Source code in roblox/badges.py class Badge ( BaseBadge ): \"\"\" Represents a badge from the API. Attributes: id: The badge Id. name: The name of the badge. description: The badge description. display_name: The localized name of the badge. display_description: The localized badge description. enabled: Whether or not the badge is enabled. icon: The badge icon. display_icon: The localized badge icon. created: When the badge was created. updated: When the badge was updated. statistics: Badge award statistics. awarding_universe: The universe the badge is being awarded from. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( client = client , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( client = client , data = data [ \"awardingUniverse\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"Badge"},{"location":"reference/roblox/badges/#roblox.badges.Badge.__init__","text":"Parameters: Name Type Description Default client Client The Client to be used when getting information on badges. required data dict The data from the endpoint. required Source code in roblox/badges.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client to be used when getting information on badges. data: The data from the endpoint. \"\"\" self . id : int = data [ \"id\" ] super () . __init__ ( client = client , badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . display_name : str = data [ \"displayName\" ] self . display_description : str = data [ \"displayDescription\" ] self . enabled : bool = data [ \"enabled\" ] self . icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"iconImageId\" ]) self . display_icon : BaseAsset = BaseAsset ( client = client , asset_id = data [ \"displayIconImageId\" ]) self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . statistics : BadgeStatistics = BadgeStatistics ( data = data [ \"statistics\" ]) self . awarding_universe : PartialUniverse = PartialUniverse ( client = client , data = data [ \"awardingUniverse\" ])","title":"__init__()"},{"location":"reference/roblox/badges/#roblox.badges.Badge.__repr__","text":"Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics","text":"Attributes: Name Type Description past_day_awarded_count int How many instances of this badge were awarded in the last day. awarded_count int How many instances of this badge have been awarded. win_rate_percentage int Percentage of players who have joined the parent universe have been awarded this badge. Source code in roblox/badges.py class BadgeStatistics : \"\"\" Attributes: past_day_awarded_count: How many instances of this badge were awarded in the last day. awarded_count: How many instances of this badge have been awarded. win_rate_percentage: Percentage of players who have joined the parent universe have been awarded this badge. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\"","title":"BadgeStatistics"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/badges.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . past_day_awarded_count : int = data [ \"pastDayAwardedCount\" ] self . awarded_count : int = data [ \"awardedCount\" ] self . win_rate_percentage : int = data [ \"winRatePercentage\" ]","title":"__init__()"},{"location":"reference/roblox/badges/#roblox.badges.BadgeStatistics.__repr__","text":"Source code in roblox/badges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } awarded_count= { self . awarded_count } >\"","title":"__repr__()"},{"location":"reference/roblox/chat/","text":"roblox.chat \u00b6 Contains classes relating to the Roblox chat. ChatProvider \u00b6 Provides information and data related to the Roblox chat system. Source code in roblox/chat.py class ChatProvider : \"\"\" Provides information and data related to the Roblox chat system. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client for getting information about chat. \"\"\" self . _client : Client = client def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ] async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data ) def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda client , data : Conversation ( client = client , data = data ) ) __init__ ( self , client : Client ) special \u00b6 Parameters: Name Type Description Default client Client The Client for getting information about chat. required Source code in roblox/chat.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client for getting information about chat. \"\"\" self . _client : Client = client __repr__ ( self ) special \u00b6 Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" get_settings ( self ) -> ChatSettings async \u00b6 Gets the authenticated user's chat settings. Returns: The user's chat settings. Source code in roblox/chat.py async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data ) get_unread_conversation_count ( self ) -> int async \u00b6 Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. Source code in roblox/chat.py async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ] get_user_conversations ( self ) \u00b6 Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. Source code in roblox/chat.py def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda client , data : Conversation ( client = client , data = data ) ) ChatSettings \u00b6 Represents the authenticated user's Roblox chat settings. Attributes: Name Type Description chat_enabled bool Whether chat is enabled for the user. is_active_chat_user bool Whether the user is an active chat user. New accounts are active by default and become inactive if they do not send any messages over a period of time. is_connect_tab_enabled bool Whether the Connect tab is enabled for this user. Source code in roblox/chat.py class ChatSettings : \"\"\" Represents the authenticated user's Roblox chat settings. Attributes: chat_enabled: Whether chat is enabled for the user. is_active_chat_user: Whether the user is an active chat user. New accounts are active by default and become inactive if they do not send any messages over a period of time. is_connect_tab_enabled: Whether the Connect tab is enabled for this user. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\" __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/chat.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ] __repr__ ( self ) special \u00b6 Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\"","title":"chat"},{"location":"reference/roblox/chat/#roblox.chat","text":"Contains classes relating to the Roblox chat.","title":"chat"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider","text":"Provides information and data related to the Roblox chat system. Source code in roblox/chat.py class ChatProvider : \"\"\" Provides information and data related to the Roblox chat system. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client for getting information about chat. \"\"\" self . _client : Client = client def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ] async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data ) def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda client , data : Conversation ( client = client , data = data ) )","title":"ChatProvider"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.__init__","text":"Parameters: Name Type Description Default client Client The Client for getting information about chat. required Source code in roblox/chat.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The Client for getting information about chat. \"\"\" self . _client : Client = client","title":"__init__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.__repr__","text":"Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_settings","text":"Gets the authenticated user's chat settings. Returns: The user's chat settings. Source code in roblox/chat.py async def get_settings ( self ) -> ChatSettings : \"\"\" Gets the authenticated user's chat settings. Returns: The user's chat settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/chat-settings\" ) ) settings_data = settings_response . json () return ChatSettings ( data = settings_data )","title":"get_settings()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_unread_conversation_count","text":"Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. Source code in roblox/chat.py async def get_unread_conversation_count ( self ) -> int : \"\"\" Gets the authenticated user's unread conversation count. Returns: The user's unread conversation count. \"\"\" unread_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-unread-conversation-count\" ) ) unread_data = unread_response . json () return unread_data [ \"count\" ]","title":"get_unread_conversation_count()"},{"location":"reference/roblox/chat/#roblox.chat.ChatProvider.get_user_conversations","text":"Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. Source code in roblox/chat.py def get_user_conversations ( self ): \"\"\" Gets the user's conversations. Returns: The user's conversations as a PageNumberIterator. \"\"\" return PageNumberIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"chat\" , \"v2/get-user-conversations\" ), handler = lambda client , data : Conversation ( client = client , data = data ) )","title":"get_user_conversations()"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings","text":"Represents the authenticated user's Roblox chat settings. Attributes: Name Type Description chat_enabled bool Whether chat is enabled for the user. is_active_chat_user bool Whether the user is an active chat user. New accounts are active by default and become inactive if they do not send any messages over a period of time. is_connect_tab_enabled bool Whether the Connect tab is enabled for this user. Source code in roblox/chat.py class ChatSettings : \"\"\" Represents the authenticated user's Roblox chat settings. Attributes: chat_enabled: Whether chat is enabled for the user. is_active_chat_user: Whether the user is an active chat user. New accounts are active by default and become inactive if they do not send any messages over a period of time. is_connect_tab_enabled: Whether the Connect tab is enabled for this user. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\"","title":"ChatSettings"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/chat.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . chat_enabled : bool = data [ \"chatEnabled\" ] self . is_active_chat_user : bool = data [ \"isActiveChatUser\" ] self . is_connect_tab_enabled : bool = data [ \"isConnectTabEnabled\" ]","title":"__init__()"},{"location":"reference/roblox/chat/#roblox.chat.ChatSettings.__repr__","text":"Source code in roblox/chat.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } chat_enabled= { self . chat_enabled } >\"","title":"__repr__()"},{"location":"reference/roblox/client/","text":"roblox.client \u00b6 Contains the Client, which is the core object at the center of all ro.py applications. Client \u00b6 Represents a Roblox client. Attributes: Name Type Description requests Requests The requests object, which is used to send requests to Roblox endpoints. url_generator URLGenerator The URL generator object, which is used to generate URLs to send requests to endpoints. presence PresenceProvider The presence provider object. thumbnails ThumbnailProvider The thumbnail provider object. delivery DeliveryProvider The delivery provider object. chat ChatProvider The chat provider object. account AccountProvider The account provider object. Source code in roblox/client.py class Client : \"\"\" Represents a Roblox client. Attributes: requests: The requests object, which is used to send requests to Roblox endpoints. url_generator: The URL generator object, which is used to generate URLs to send requests to endpoints. presence: The presence provider object. thumbnails: The thumbnail provider object. delivery: The delivery provider object. chat: The chat provider object. account: The account provider object. \"\"\" def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests () self . url_generator : URLGenerator = self . _url_generator self . requests : Requests = self . _requests self . presence : PresenceProvider = PresenceProvider ( client = self ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( client = self ) self . delivery : DeliveryProvider = DeliveryProvider ( client = self ) self . chat : ChatProvider = ChatProvider ( client = self ) self . account : AccountProvider = AccountProvider ( client = self ) if token : self . set_token ( token ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" # Authentication def set_token ( self , token : Optional [ str ] = None ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token # Users async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" try : user_response = await self . _requests . get ( url = self . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) except NotFound as exception : raise UserNotFound ( message = \"Invalid user.\" , response = exception . response ) from None user_data = user_response . json () return User ( client = self , data = user_data ) async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( client = self , data = authenticated_user_data ) async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( client = self , data = user_data ) for user_data in users_data ] async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( client = self , data = user_data ) for user_data in users_data ] async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = True ) -> Union [ RequestedUsernamePartialUser , User ]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User or RequestedUsernamePartialUser depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : raise UserNotFound ( \"Invalid username.\" ) from None def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( client = self , user_id = user_id ) def user_search ( self , keyword : str , page_size : int = 10 , max_items : int = None ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. page_size: How many members should be returned for each page. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( client = self , url = self . _url_generator . get_url ( \"users\" , f \"v1/users/search\" ), page_size = page_size , max_items = max_items , extra_parameters = { \"keyword\" : keyword }, handler = lambda client , data : PreviousUsernamesPartialUser ( client = client , data = data ), ) # Groups async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" try : group_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) except BadRequest as exception : raise GroupNotFound ( message = \"Invalid group.\" , response = exception . response ) from None group_data = group_response . json () return Group ( client = self , data = group_data ) def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( client = self , group_id = group_id ) # Universes async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( client = self , data = universe_data ) for universe_data in universes_data ] async def get_universe ( self , universe_id : int ) -> Universe : \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : raise UniverseNotFound ( \"Invalid universe.\" ) from None def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( client = self , universe_id = universe_id ) # Places async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( client = self , data = place_data ) for place_data in places_data ] async def get_place ( self , place_id : int ) -> Place : \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : raise PlaceNotFound ( \"Invalid place.\" ) from None def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( client = self , place_id = place_id ) # Assets async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" try : asset_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) except BadRequest as exception : raise AssetNotFound ( message = \"Invalid asset.\" , response = exception . response ) from None asset_data = asset_response . json () return EconomyAsset ( client = self , data = asset_data ) def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( client = self , asset_id = asset_id ) # Plugins async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( client = self , data = plugin_data ) for plugin_data in plugins_data ] async def get_plugin ( self , plugin_id : int ) -> Plugin : \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : raise PluginNotFound ( \"Invalid plugin.\" ) from None def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( client = self , plugin_id = plugin_id ) # Badges async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" try : badge_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) except NotFound as exception : raise BadgeNotFound ( message = \"Invalid badge.\" , response = exception . response ) from None badge_data = badge_response . json () return Badge ( client = self , data = badge_data ) def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( client = self , badge_id = badge_id ) # Gamepasses def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( client = self , gamepass_id = gamepass_id ) __init__ ( self , token : str = None , base_url : str = 'roblox.com' ) special \u00b6 Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. None base_url str The base URL to use when sending requests. 'roblox.com' Source code in roblox/client.py def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests () self . url_generator : URLGenerator = self . _url_generator self . requests : Requests = self . _requests self . presence : PresenceProvider = PresenceProvider ( client = self ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( client = self ) self . delivery : DeliveryProvider = DeliveryProvider ( client = self ) self . chat : ChatProvider = ChatProvider ( client = self ) self . account : AccountProvider = AccountProvider ( client = self ) if token : self . set_token ( token ) __repr__ ( self ) special \u00b6 Source code in roblox/client.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" get_asset ( self , asset_id : int ) -> EconomyAsset async \u00b6 Gets an asset with the passed ID. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description EconomyAsset An Asset. Source code in roblox/client.py async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" try : asset_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) except BadRequest as exception : raise AssetNotFound ( message = \"Invalid asset.\" , response = exception . response ) from None asset_data = asset_response . json () return EconomyAsset ( client = self , data = asset_data ) get_authenticated_user ( self , expand : bool = True ) -> Union [ roblox . users . User , roblox . partials . partialuser . PartialUser ] async \u00b6 Grabs the authenticated user. Parameters: Name Type Description Default expand bool Whether to return a User (2 requests) rather than a PartialUser (1 request) True Returns: Type Description Union[roblox.users.User, roblox.partials.partialuser.PartialUser] The authenticated user. Source code in roblox/client.py async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( client = self , data = authenticated_user_data ) get_badge ( self , badge_id : int ) -> Badge async \u00b6 Gets a badge with the passed ID. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description Badge A Badge. Source code in roblox/client.py async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" try : badge_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) except NotFound as exception : raise BadgeNotFound ( message = \"Invalid badge.\" , response = exception . response ) from None badge_data = badge_response . json () return Badge ( client = self , data = badge_data ) get_base_asset ( self , asset_id : int ) -> BaseAsset \u00b6 Gets a base asset. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description BaseAsset A BaseAsset. Source code in roblox/client.py def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( client = self , asset_id = asset_id ) get_base_badge ( self , badge_id : int ) -> BaseBadge \u00b6 Gets a base badge. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description BaseBadge A BaseBadge. Source code in roblox/client.py def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( client = self , badge_id = badge_id ) get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass \u00b6 Gets a base gamepass. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default gamepass_id int A Roblox gamepass ID. required Source code in roblox/client.py def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( client = self , gamepass_id = gamepass_id ) get_base_group ( self , group_id : int ) -> BaseGroup \u00b6 Gets a base group. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description BaseGroup A BaseGroup. Source code in roblox/client.py def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( client = self , group_id = group_id ) get_base_place ( self , place_id : int ) -> BasePlace \u00b6 Gets a base place. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description BasePlace A BasePlace. Source code in roblox/client.py def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( client = self , place_id = place_id ) get_base_plugin ( self , plugin_id : int ) -> BasePlugin \u00b6 Gets a base plugin. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description BasePlugin A BasePlugin. Source code in roblox/client.py def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( client = self , plugin_id = plugin_id ) get_base_universe ( self , universe_id : int ) -> BaseUniverse \u00b6 Gets a base universe. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description BaseUniverse A BaseUniverse. Source code in roblox/client.py def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( client = self , universe_id = universe_id ) get_base_user ( self , user_id : int ) -> BaseUser \u00b6 Gets a base user. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description BaseUser A BaseUser. Source code in roblox/client.py def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( client = self , user_id = user_id ) get_group ( self , group_id : int ) -> Group async \u00b6 Gets a group by its ID. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description Group A Group. Source code in roblox/client.py async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" try : group_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) except BadRequest as exception : raise GroupNotFound ( message = \"Invalid group.\" , response = exception . response ) from None group_data = group_response . json () return Group ( client = self , data = group_data ) get_place ( self , place_id : int ) -> Place async \u00b6 Gets a place with the passed ID. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description Place A Place. Source code in roblox/client.py async def get_place ( self , place_id : int ) -> Place : \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : raise PlaceNotFound ( \"Invalid place.\" ) from None get_places ( self , place_ids : List [ int ]) -> List [ roblox . places . Place ] async \u00b6 Grabs a list of places corresponding to each ID in the list. Parameters: Name Type Description Default place_ids List[int] A list of Roblox place IDs. required Returns: Type Description List[roblox.places.Place] A list of Places. Source code in roblox/client.py async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( client = self , data = place_data ) for place_data in places_data ] get_plugin ( self , plugin_id : int ) -> Plugin async \u00b6 Grabs a plugin with the passed ID. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description Plugin A Plugin. Source code in roblox/client.py async def get_plugin ( self , plugin_id : int ) -> Plugin : \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : raise PluginNotFound ( \"Invalid plugin.\" ) from None get_plugins ( self , plugin_ids : List [ int ]) -> List [ roblox . plugins . Plugin ] async \u00b6 Grabs a list of plugins corresponding to each ID in the list. Parameters: Name Type Description Default plugin_ids List[int] A list of Roblox plugin IDs. required Returns: Type Description List[roblox.plugins.Plugin] A list of Plugins. Source code in roblox/client.py async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( client = self , data = plugin_data ) for plugin_data in plugins_data ] get_universe ( self , universe_id : int ) -> Universe async \u00b6 Gets a universe with the passed ID. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description Universe A Universe. Source code in roblox/client.py async def get_universe ( self , universe_id : int ) -> Universe : \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : raise UniverseNotFound ( \"Invalid universe.\" ) from None get_universes ( self , universe_ids : List [ int ]) -> List [ roblox . universes . Universe ] async \u00b6 Grabs a list of universes corresponding to each ID in the list. Parameters: Name Type Description Default universe_ids List[int] A list of Roblox universe IDs. required Returns: Type Description List[roblox.universes.Universe] A list of Universes. Source code in roblox/client.py async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( client = self , data = universe_data ) for universe_data in universes_data ] get_user ( self , user_id : int ) -> User async \u00b6 Gets a user with the specified user ID. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description User A user object. Source code in roblox/client.py async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" try : user_response = await self . _requests . get ( url = self . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) except NotFound as exception : raise UserNotFound ( message = \"Invalid user.\" , response = exception . response ) from None user_data = user_response . json () return User ( client = self , data = user_data ) get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = True ) -> Union [ roblox . partials . partialuser . RequestedUsernamePartialUser , roblox . users . User ] async \u00b6 Grabs a user corresponding to the passed username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) True Returns: Type Description Union[roblox.partials.partialuser.RequestedUsernamePartialUser, roblox.users.User] A User or RequestedUsernamePartialUser depending on the expand argument. Source code in roblox/client.py async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = True ) -> Union [ RequestedUsernamePartialUser , User ]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User or RequestedUsernamePartialUser depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : raise UserNotFound ( \"Invalid username.\" ) from None get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False ) -> Union [ List [ roblox . partials . partialuser . PartialUser ], List [ roblox . users . User ]] async \u00b6 Grabs a list of users corresponding to each user ID in the list. Parameters: Name Type Description Default user_ids List[int] A list of Roblox user IDs. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.PartialUser], List[roblox.users.User]] A List of Users or partial users. Source code in roblox/client.py async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( client = self , data = user_data ) for user_data in users_data ] get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False ) -> Union [ List [ roblox . partials . partialuser . RequestedUsernamePartialUser ], List [ roblox . users . User ]] async \u00b6 Grabs a list of users corresponding to each username in the list. Parameters: Name Type Description Default usernames List[str] A list of Roblox usernames. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.RequestedUsernamePartialUser], List[roblox.users.User]] A list of User or RequestedUsernamePartialUser, depending on the expand argument. Source code in roblox/client.py async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( client = self , data = user_data ) for user_data in users_data ] set_token ( self , token : Optional [ str ] = None ) -> None \u00b6 Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Parameters: Name Type Description Default token Optional[str] A .ROBLOSECURITY token to authenticate the client with. None Source code in roblox/client.py def set_token ( self , token : Optional [ str ] = None ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token user_search ( self , keyword : str , page_size : int = 10 , max_items : int = None ) -> PageIterator \u00b6 Search for users with a keyword. Parameters: Name Type Description Default keyword str A keyword to search for. required page_size int How many members should be returned for each page. 10 max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing RequestedUsernamePartialUser. Source code in roblox/client.py def user_search ( self , keyword : str , page_size : int = 10 , max_items : int = None ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. page_size: How many members should be returned for each page. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( client = self , url = self . _url_generator . get_url ( \"users\" , f \"v1/users/search\" ), page_size = page_size , max_items = max_items , extra_parameters = { \"keyword\" : keyword }, handler = lambda client , data : PreviousUsernamesPartialUser ( client = client , data = data ), )","title":"client"},{"location":"reference/roblox/client/#roblox.client","text":"Contains the Client, which is the core object at the center of all ro.py applications.","title":"client"},{"location":"reference/roblox/client/#roblox.client.Client","text":"Represents a Roblox client. Attributes: Name Type Description requests Requests The requests object, which is used to send requests to Roblox endpoints. url_generator URLGenerator The URL generator object, which is used to generate URLs to send requests to endpoints. presence PresenceProvider The presence provider object. thumbnails ThumbnailProvider The thumbnail provider object. delivery DeliveryProvider The delivery provider object. chat ChatProvider The chat provider object. account AccountProvider The account provider object. Source code in roblox/client.py class Client : \"\"\" Represents a Roblox client. Attributes: requests: The requests object, which is used to send requests to Roblox endpoints. url_generator: The URL generator object, which is used to generate URLs to send requests to endpoints. presence: The presence provider object. thumbnails: The thumbnail provider object. delivery: The delivery provider object. chat: The chat provider object. account: The account provider object. \"\"\" def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests () self . url_generator : URLGenerator = self . _url_generator self . requests : Requests = self . _requests self . presence : PresenceProvider = PresenceProvider ( client = self ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( client = self ) self . delivery : DeliveryProvider = DeliveryProvider ( client = self ) self . chat : ChatProvider = ChatProvider ( client = self ) self . account : AccountProvider = AccountProvider ( client = self ) if token : self . set_token ( token ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" # Authentication def set_token ( self , token : Optional [ str ] = None ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token # Users async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" try : user_response = await self . _requests . get ( url = self . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) except NotFound as exception : raise UserNotFound ( message = \"Invalid user.\" , response = exception . response ) from None user_data = user_response . json () return User ( client = self , data = user_data ) async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( client = self , data = authenticated_user_data ) async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( client = self , data = user_data ) for user_data in users_data ] async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( client = self , data = user_data ) for user_data in users_data ] async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = True ) -> Union [ RequestedUsernamePartialUser , User ]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User or RequestedUsernamePartialUser depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : raise UserNotFound ( \"Invalid username.\" ) from None def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( client = self , user_id = user_id ) def user_search ( self , keyword : str , page_size : int = 10 , max_items : int = None ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. page_size: How many members should be returned for each page. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( client = self , url = self . _url_generator . get_url ( \"users\" , f \"v1/users/search\" ), page_size = page_size , max_items = max_items , extra_parameters = { \"keyword\" : keyword }, handler = lambda client , data : PreviousUsernamesPartialUser ( client = client , data = data ), ) # Groups async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" try : group_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) except BadRequest as exception : raise GroupNotFound ( message = \"Invalid group.\" , response = exception . response ) from None group_data = group_response . json () return Group ( client = self , data = group_data ) def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( client = self , group_id = group_id ) # Universes async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( client = self , data = universe_data ) for universe_data in universes_data ] async def get_universe ( self , universe_id : int ) -> Universe : \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : raise UniverseNotFound ( \"Invalid universe.\" ) from None def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( client = self , universe_id = universe_id ) # Places async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( client = self , data = place_data ) for place_data in places_data ] async def get_place ( self , place_id : int ) -> Place : \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : raise PlaceNotFound ( \"Invalid place.\" ) from None def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( client = self , place_id = place_id ) # Assets async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" try : asset_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) except BadRequest as exception : raise AssetNotFound ( message = \"Invalid asset.\" , response = exception . response ) from None asset_data = asset_response . json () return EconomyAsset ( client = self , data = asset_data ) def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( client = self , asset_id = asset_id ) # Plugins async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( client = self , data = plugin_data ) for plugin_data in plugins_data ] async def get_plugin ( self , plugin_id : int ) -> Plugin : \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : raise PluginNotFound ( \"Invalid plugin.\" ) from None def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( client = self , plugin_id = plugin_id ) # Badges async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" try : badge_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) except NotFound as exception : raise BadgeNotFound ( message = \"Invalid badge.\" , response = exception . response ) from None badge_data = badge_response . json () return Badge ( client = self , data = badge_data ) def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( client = self , badge_id = badge_id ) # Gamepasses def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( client = self , gamepass_id = gamepass_id )","title":"Client"},{"location":"reference/roblox/client/#roblox.client.Client.__init__","text":"Parameters: Name Type Description Default token str A .ROBLOSECURITY token to authenticate the client with. None base_url str The base URL to use when sending requests. 'roblox.com' Source code in roblox/client.py def __init__ ( self , token : str = None , base_url : str = \"roblox.com\" ): \"\"\" Arguments: token: A .ROBLOSECURITY token to authenticate the client with. base_url: The base URL to use when sending requests. \"\"\" self . _url_generator : URLGenerator = URLGenerator ( base_url = base_url ) self . _requests : Requests = Requests () self . url_generator : URLGenerator = self . _url_generator self . requests : Requests = self . _requests self . presence : PresenceProvider = PresenceProvider ( client = self ) self . thumbnails : ThumbnailProvider = ThumbnailProvider ( client = self ) self . delivery : DeliveryProvider = DeliveryProvider ( client = self ) self . chat : ChatProvider = ChatProvider ( client = self ) self . account : AccountProvider = AccountProvider ( client = self ) if token : self . set_token ( token )","title":"__init__()"},{"location":"reference/roblox/client/#roblox.client.Client.__repr__","text":"Source code in roblox/client.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/client/#roblox.client.Client.get_asset","text":"Gets an asset with the passed ID. Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description EconomyAsset An Asset. Source code in roblox/client.py async def get_asset ( self , asset_id : int ) -> EconomyAsset : \"\"\" Gets an asset with the passed ID. Arguments: asset_id: A Roblox asset ID. Returns: An Asset. \"\"\" try : asset_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"economy\" , f \"v2/assets/ { asset_id } /details\" ) ) except BadRequest as exception : raise AssetNotFound ( message = \"Invalid asset.\" , response = exception . response ) from None asset_data = asset_response . json () return EconomyAsset ( client = self , data = asset_data )","title":"get_asset()"},{"location":"reference/roblox/client/#roblox.client.Client.get_authenticated_user","text":"Grabs the authenticated user. Parameters: Name Type Description Default expand bool Whether to return a User (2 requests) rather than a PartialUser (1 request) True Returns: Type Description Union[roblox.users.User, roblox.partials.partialuser.PartialUser] The authenticated user. Source code in roblox/client.py async def get_authenticated_user ( self , expand : bool = True ) -> Union [ User , PartialUser ]: \"\"\" Grabs the authenticated user. Arguments: expand: Whether to return a User (2 requests) rather than a PartialUser (1 request) Returns: The authenticated user. \"\"\" authenticated_user_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users/authenticated\" ) ) authenticated_user_data = authenticated_user_response . json () if expand : return await self . get_user ( authenticated_user_data [ \"id\" ]) else : return PartialUser ( client = self , data = authenticated_user_data )","title":"get_authenticated_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_badge","text":"Gets a badge with the passed ID. Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description Badge A Badge. Source code in roblox/client.py async def get_badge ( self , badge_id : int ) -> Badge : \"\"\" Gets a badge with the passed ID. Arguments: badge_id: A Roblox badge ID. Returns: A Badge. \"\"\" try : badge_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"badges\" , f \"v1/badges/ { badge_id } \" ) ) except NotFound as exception : raise BadgeNotFound ( message = \"Invalid badge.\" , response = exception . response ) from None badge_data = badge_response . json () return Badge ( client = self , data = badge_data )","title":"get_badge()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_asset","text":"Gets a base asset. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default asset_id int A Roblox asset ID. required Returns: Type Description BaseAsset A BaseAsset. Source code in roblox/client.py def get_base_asset ( self , asset_id : int ) -> BaseAsset : \"\"\" Gets a base asset. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: asset_id: A Roblox asset ID. Returns: A BaseAsset. \"\"\" return BaseAsset ( client = self , asset_id = asset_id )","title":"get_base_asset()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_badge","text":"Gets a base badge. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default badge_id int A Roblox badge ID. required Returns: Type Description BaseBadge A BaseBadge. Source code in roblox/client.py def get_base_badge ( self , badge_id : int ) -> BaseBadge : \"\"\" Gets a base badge. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: badge_id: A Roblox badge ID. Returns: A BaseBadge. \"\"\" return BaseBadge ( client = self , badge_id = badge_id )","title":"get_base_badge()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_gamepass","text":"Gets a base gamepass. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default gamepass_id int A Roblox gamepass ID. required Source code in roblox/client.py def get_base_gamepass ( self , gamepass_id : int ) -> BaseGamePass : \"\"\" Gets a base gamepass. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: gamepass_id: A Roblox gamepass ID. Returns: A BaseGamePass. \"\"\" return BaseGamePass ( client = self , gamepass_id = gamepass_id )","title":"get_base_gamepass()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_group","text":"Gets a base group. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description BaseGroup A BaseGroup. Source code in roblox/client.py def get_base_group ( self , group_id : int ) -> BaseGroup : \"\"\" Gets a base group. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: group_id: A Roblox group ID. Returns: A BaseGroup. \"\"\" return BaseGroup ( client = self , group_id = group_id )","title":"get_base_group()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_place","text":"Gets a base place. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description BasePlace A BasePlace. Source code in roblox/client.py def get_base_place ( self , place_id : int ) -> BasePlace : \"\"\" Gets a base place. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: place_id: A Roblox place ID. Returns: A BasePlace. \"\"\" return BasePlace ( client = self , place_id = place_id )","title":"get_base_place()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_plugin","text":"Gets a base plugin. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description BasePlugin A BasePlugin. Source code in roblox/client.py def get_base_plugin ( self , plugin_id : int ) -> BasePlugin : \"\"\" Gets a base plugin. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: plugin_id: A Roblox plugin ID. Returns: A BasePlugin. \"\"\" return BasePlugin ( client = self , plugin_id = plugin_id )","title":"get_base_plugin()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_universe","text":"Gets a base universe. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description BaseUniverse A BaseUniverse. Source code in roblox/client.py def get_base_universe ( self , universe_id : int ) -> BaseUniverse : \"\"\" Gets a base universe. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: universe_id: A Roblox universe ID. Returns: A BaseUniverse. \"\"\" return BaseUniverse ( client = self , universe_id = universe_id )","title":"get_base_universe()"},{"location":"reference/roblox/client/#roblox.client.Client.get_base_user","text":"Gets a base user. Note This method does not send any requests - it just generates an object. For more information on bases, please see Bases . Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description BaseUser A BaseUser. Source code in roblox/client.py def get_base_user ( self , user_id : int ) -> BaseUser : \"\"\" Gets a base user. !!! note This method does not send any requests - it just generates an object. For more information on bases, please see [Bases](/bases). Arguments: user_id: A Roblox user ID. Returns: A BaseUser. \"\"\" return BaseUser ( client = self , user_id = user_id )","title":"get_base_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_group","text":"Gets a group by its ID. Parameters: Name Type Description Default group_id int A Roblox group ID. required Returns: Type Description Group A Group. Source code in roblox/client.py async def get_group ( self , group_id : int ) -> Group : \"\"\" Gets a group by its ID. Arguments: group_id: A Roblox group ID. Returns: A Group. \"\"\" try : group_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"groups\" , f \"v1/groups/ { group_id } \" ) ) except BadRequest as exception : raise GroupNotFound ( message = \"Invalid group.\" , response = exception . response ) from None group_data = group_response . json () return Group ( client = self , data = group_data )","title":"get_group()"},{"location":"reference/roblox/client/#roblox.client.Client.get_place","text":"Gets a place with the passed ID. Parameters: Name Type Description Default place_id int A Roblox place ID. required Returns: Type Description Place A Place. Source code in roblox/client.py async def get_place ( self , place_id : int ) -> Place : \"\"\" Gets a place with the passed ID. Arguments: place_id: A Roblox place ID. Returns: A Place. \"\"\" places = await self . get_places ( place_ids = [ place_id ]) try : return places [ 0 ] except IndexError : raise PlaceNotFound ( \"Invalid place.\" ) from None","title":"get_place()"},{"location":"reference/roblox/client/#roblox.client.Client.get_places","text":"Grabs a list of places corresponding to each ID in the list. Parameters: Name Type Description Default place_ids List[int] A list of Roblox place IDs. required Returns: Type Description List[roblox.places.Place] A list of Places. Source code in roblox/client.py async def get_places ( self , place_ids : List [ int ]) -> List [ Place ]: \"\"\" Grabs a list of places corresponding to each ID in the list. Arguments: place_ids: A list of Roblox place IDs. Returns: A list of Places. \"\"\" places_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , f \"v1/games/multiget-place-details\" ), params = { \"placeIds\" : place_ids }, ) places_data = places_response . json () return [ Place ( client = self , data = place_data ) for place_data in places_data ]","title":"get_places()"},{"location":"reference/roblox/client/#roblox.client.Client.get_plugin","text":"Grabs a plugin with the passed ID. Parameters: Name Type Description Default plugin_id int A Roblox plugin ID. required Returns: Type Description Plugin A Plugin. Source code in roblox/client.py async def get_plugin ( self , plugin_id : int ) -> Plugin : \"\"\" Grabs a plugin with the passed ID. Arguments: plugin_id: A Roblox plugin ID. Returns: A Plugin. \"\"\" plugins = await self . get_plugins ([ plugin_id ]) try : return plugins [ 0 ] except IndexError : raise PluginNotFound ( \"Invalid plugin.\" ) from None","title":"get_plugin()"},{"location":"reference/roblox/client/#roblox.client.Client.get_plugins","text":"Grabs a list of plugins corresponding to each ID in the list. Parameters: Name Type Description Default plugin_ids List[int] A list of Roblox plugin IDs. required Returns: Type Description List[roblox.plugins.Plugin] A list of Plugins. Source code in roblox/client.py async def get_plugins ( self , plugin_ids : List [ int ]) -> List [ Plugin ]: \"\"\" Grabs a list of plugins corresponding to each ID in the list. Arguments: plugin_ids: A list of Roblox plugin IDs. Returns: A list of Plugins. \"\"\" plugins_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"develop\" , \"v1/plugins\" ), params = { \"pluginIds\" : plugin_ids } ) plugins_data = plugins_response . json ()[ \"data\" ] return [ Plugin ( client = self , data = plugin_data ) for plugin_data in plugins_data ]","title":"get_plugins()"},{"location":"reference/roblox/client/#roblox.client.Client.get_universe","text":"Gets a universe with the passed ID. Parameters: Name Type Description Default universe_id int A Roblox universe ID. required Returns: Type Description Universe A Universe. Source code in roblox/client.py async def get_universe ( self , universe_id : int ) -> Universe : \"\"\" Gets a universe with the passed ID. Arguments: universe_id: A Roblox universe ID. Returns: A Universe. \"\"\" universes = await self . get_universes ( universe_ids = [ universe_id ]) try : return universes [ 0 ] except IndexError : raise UniverseNotFound ( \"Invalid universe.\" ) from None","title":"get_universe()"},{"location":"reference/roblox/client/#roblox.client.Client.get_universes","text":"Grabs a list of universes corresponding to each ID in the list. Parameters: Name Type Description Default universe_ids List[int] A list of Roblox universe IDs. required Returns: Type Description List[roblox.universes.Universe] A list of Universes. Source code in roblox/client.py async def get_universes ( self , universe_ids : List [ int ]) -> List [ Universe ]: \"\"\" Grabs a list of universes corresponding to each ID in the list. Arguments: universe_ids: A list of Roblox universe IDs. Returns: A list of Universes. \"\"\" universes_response = await self . _requests . get ( url = self . _url_generator . get_url ( \"games\" , \"v1/games\" ), params = { \"universeIds\" : universe_ids }, ) universes_data = universes_response . json ()[ \"data\" ] return [ Universe ( client = self , data = universe_data ) for universe_data in universes_data ]","title":"get_universes()"},{"location":"reference/roblox/client/#roblox.client.Client.get_user","text":"Gets a user with the specified user ID. Parameters: Name Type Description Default user_id int A Roblox user ID. required Returns: Type Description User A user object. Source code in roblox/client.py async def get_user ( self , user_id : int ) -> User : \"\"\" Gets a user with the specified user ID. Arguments: user_id: A Roblox user ID. Returns: A user object. \"\"\" try : user_response = await self . _requests . get ( url = self . url_generator . get_url ( \"users\" , f \"v1/users/ { user_id } \" ) ) except NotFound as exception : raise UserNotFound ( message = \"Invalid user.\" , response = exception . response ) from None user_data = user_response . json () return User ( client = self , data = user_data )","title":"get_user()"},{"location":"reference/roblox/client/#roblox.client.Client.get_user_by_username","text":"Grabs a user corresponding to the passed username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) True Returns: Type Description Union[roblox.partials.partialuser.RequestedUsernamePartialUser, roblox.users.User] A User or RequestedUsernamePartialUser depending on the expand argument. Source code in roblox/client.py async def get_user_by_username ( self , username : str , exclude_banned_users : bool = False , expand : bool = True ) -> Union [ RequestedUsernamePartialUser , User ]: \"\"\" Grabs a user corresponding to the passed username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a User (2 requests) rather than a RequestedUsernamePartialUser (1 request) Returns: A User or RequestedUsernamePartialUser depending on the expand argument. \"\"\" users = await self . get_users_by_usernames ( usernames = [ username ], exclude_banned_users = exclude_banned_users , expand = expand , ) try : return users [ 0 ] except IndexError : raise UserNotFound ( \"Invalid username.\" ) from None","title":"get_user_by_username()"},{"location":"reference/roblox/client/#roblox.client.Client.get_users","text":"Grabs a list of users corresponding to each user ID in the list. Parameters: Name Type Description Default user_ids List[int] A list of Roblox user IDs. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.PartialUser], List[roblox.users.User]] A List of Users or partial users. Source code in roblox/client.py async def get_users ( self , user_ids : List [ int ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ PartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each user ID in the list. Arguments: user_ids: A list of Roblox user IDs. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than PartialUsers (1 request) Returns: A List of Users or partial users. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/users\" ), json = { \"userIds\" : user_ids , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ PartialUser ( client = self , data = user_data ) for user_data in users_data ]","title":"get_users()"},{"location":"reference/roblox/client/#roblox.client.Client.get_users_by_usernames","text":"Grabs a list of users corresponding to each username in the list. Parameters: Name Type Description Default usernames List[str] A list of Roblox usernames. required exclude_banned_users bool Whether to exclude banned users from the data. False expand bool Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) False Returns: Type Description Union[List[roblox.partials.partialuser.RequestedUsernamePartialUser], List[roblox.users.User]] A list of User or RequestedUsernamePartialUser, depending on the expand argument. Source code in roblox/client.py async def get_users_by_usernames ( self , usernames : List [ str ], exclude_banned_users : bool = False , expand : bool = False , ) -> Union [ List [ RequestedUsernamePartialUser ], List [ User ]]: \"\"\" Grabs a list of users corresponding to each username in the list. Arguments: usernames: A list of Roblox usernames. exclude_banned_users: Whether to exclude banned users from the data. expand: Whether to return a list of Users (2 requests) rather than RequestedUsernamePartialUsers (1 request) Returns: A list of User or RequestedUsernamePartialUser, depending on the expand argument. \"\"\" users_response = await self . _requests . post ( url = self . _url_generator . get_url ( \"users\" , f \"v1/usernames/users\" ), json = { \"usernames\" : usernames , \"excludeBannedUsers\" : exclude_banned_users }, ) users_data = users_response . json ()[ \"data\" ] if expand : return [ await self . get_user ( user_data [ \"id\" ]) for user_data in users_data ] else : return [ RequestedUsernamePartialUser ( client = self , data = user_data ) for user_data in users_data ]","title":"get_users_by_usernames()"},{"location":"reference/roblox/client/#roblox.client.Client.set_token","text":"Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Parameters: Name Type Description Default token Optional[str] A .ROBLOSECURITY token to authenticate the client with. None Source code in roblox/client.py def set_token ( self , token : Optional [ str ] = None ) -> None : \"\"\" Authenticates the client with the passed .ROBLOSECURITY token. This method does not send any requests and will not throw if the token is invalid. Arguments: token: A .ROBLOSECURITY token to authenticate the client with. \"\"\" self . _requests . session . cookies [ \".ROBLOSECURITY\" ] = token","title":"set_token()"},{"location":"reference/roblox/client/#roblox.client.Client.user_search","text":"Search for users with a keyword. Parameters: Name Type Description Default keyword str A keyword to search for. required page_size int How many members should be returned for each page. 10 max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing RequestedUsernamePartialUser. Source code in roblox/client.py def user_search ( self , keyword : str , page_size : int = 10 , max_items : int = None ) -> PageIterator : \"\"\" Search for users with a keyword. Arguments: keyword: A keyword to search for. page_size: How many members should be returned for each page. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing RequestedUsernamePartialUser. \"\"\" return PageIterator ( client = self , url = self . _url_generator . get_url ( \"users\" , f \"v1/users/search\" ), page_size = page_size , max_items = max_items , extra_parameters = { \"keyword\" : keyword }, handler = lambda client , data : PreviousUsernamesPartialUser ( client = client , data = data ), )","title":"user_search()"},{"location":"reference/roblox/conversations/","text":"roblox.conversations \u00b6 Contains objects related to Roblox chat conversations. Conversation ( BaseConversation ) \u00b6 Represents a Roblox chat conversation. Attributes: Name Type Description id int Chat conversation ID. title str Chat conversation title. initiator PartialUser Conversation initiator entity. has_unread_messages bool Whether the conversation have any unread messages. participants List[PartialUser] Participants involved in the conversation. conversation_type ConversationType Type of the conversation. conversation_title ConversationTitle Specifies if the conversation title is generated by default. last_updated datetime Specifies the datetime when the conversation was last updated. conversation_universe Optional[ChatPartialUniverse] Specifies the universe associated with the conversation. Source code in roblox/conversations.py class Conversation ( BaseConversation ): \"\"\" Represents a Roblox chat conversation. Attributes: id: Chat conversation ID. title: Chat conversation title. initiator: Conversation initiator entity. has_unread_messages: Whether the conversation have any unread messages. participants: Participants involved in the conversation. conversation_type: Type of the conversation. conversation_title: Specifies if the conversation title is generated by default. last_updated: Specifies the datetime when the conversation was last updated. conversation_universe: Specifies the universe associated with the conversation. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object. data: The conversation data. \"\"\" super () . __init__ ( client = client , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( client , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( client = client , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( client = client , data = data [ \"conversationUniverse\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client object. required data dict The conversation data. required Source code in roblox/conversations.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object. data: The conversation data. \"\"\" super () . __init__ ( client = client , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( client , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( client = client , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( client = client , data = data [ \"conversationUniverse\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\" ConversationTitle \u00b6 A chat conversation's title. Attributes: Name Type Description title_for_viewer str Specifies the title for the conversation specific to the viewer. is_default_title bool Specifies if the title displayed for the user is generated as a default title or was edited by the user. Source code in roblox/conversations.py class ConversationTitle : \"\"\" A chat conversation's title. Attributes: title_for_viewer: Specifies the title for the conversation specific to the viewer. is_default_title: Specifies if the title displayed for the user is generated as a default title or was edited by the user. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\" __init__ ( self , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/conversations.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ] __repr__ ( self ) special \u00b6 Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\" ConversationType ( Enum ) \u00b6 A chat conversation's type. Source code in roblox/conversations.py class ConversationType ( Enum ): \"\"\" A chat conversation's type. \"\"\" multi_user_conversation = \"MultiUserConversation\" \"\"\"Represents a chat with multiples users on the website.\"\"\" one_to_one_conversation = \"OneToOneConversation\" \"\"\"Represents a one-to-one conversation with person A and B.\"\"\" cloud_edit_conversation = \"CloudEditConversation\" \"\"\"Represents a chat in a team-create session.\"\"\" cloud_edit_conversation \u00b6 Represents a chat in a team-create session. multi_user_conversation \u00b6 Represents a chat with multiples users on the website. one_to_one_conversation \u00b6 Represents a one-to-one conversation with person A and B.","title":"conversations"},{"location":"reference/roblox/conversations/#roblox.conversations","text":"Contains objects related to Roblox chat conversations.","title":"conversations"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation","text":"Represents a Roblox chat conversation. Attributes: Name Type Description id int Chat conversation ID. title str Chat conversation title. initiator PartialUser Conversation initiator entity. has_unread_messages bool Whether the conversation have any unread messages. participants List[PartialUser] Participants involved in the conversation. conversation_type ConversationType Type of the conversation. conversation_title ConversationTitle Specifies if the conversation title is generated by default. last_updated datetime Specifies the datetime when the conversation was last updated. conversation_universe Optional[ChatPartialUniverse] Specifies the universe associated with the conversation. Source code in roblox/conversations.py class Conversation ( BaseConversation ): \"\"\" Represents a Roblox chat conversation. Attributes: id: Chat conversation ID. title: Chat conversation title. initiator: Conversation initiator entity. has_unread_messages: Whether the conversation have any unread messages. participants: Participants involved in the conversation. conversation_type: Type of the conversation. conversation_title: Specifies if the conversation title is generated by default. last_updated: Specifies the datetime when the conversation was last updated. conversation_universe: Specifies the universe associated with the conversation. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object. data: The conversation data. \"\"\" super () . __init__ ( client = client , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( client , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( client = client , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( client = client , data = data [ \"conversationUniverse\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\"","title":"Conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation.__init__","text":"Parameters: Name Type Description Default client Client The Client object. required data dict The conversation data. required Source code in roblox/conversations.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object. data: The conversation data. \"\"\" super () . __init__ ( client = client , conversation_id = self . id ) self . id : int = data [ \"id\" ] self . title : str = data [ \"title\" ] # Technically the initiator could be a group, but in practice that doesn't happen # so this is a partialuser # Nikita Petko: Well uhhh, the initiator is of the ChatParticipant model, # where it can either be from User or System. self . initiator : PartialUser = PartialUser ( client , data [ \"initiator\" ]) self . has_unread_messages : bool = data [ \"hasUnreadMessages\" ] self . participants : List [ PartialUser ] = [ PartialUser ( client = client , data = participant_data ) for participant_data in data [ \"participants\" ]] self . conversation_type : ConversationType = ConversationType ( data [ \"conversationType\" ]) self . conversation_title : ConversationTitle = ConversationTitle ( data = data [ \"conversationTitle\" ] ) self . last_updated : datetime = parse ( data [ \"lastUpdated\" ]) self . conversation_universe : Optional [ ChatPartialUniverse ] = data [ \"conversationUniverse\" ] and ChatPartialUniverse ( client = client , data = data [ \"conversationUniverse\" ] )","title":"__init__()"},{"location":"reference/roblox/conversations/#roblox.conversations.Conversation.__repr__","text":"Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } title= { self . title !r} >\"","title":"__repr__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle","text":"A chat conversation's title. Attributes: Name Type Description title_for_viewer str Specifies the title for the conversation specific to the viewer. is_default_title bool Specifies if the title displayed for the user is generated as a default title or was edited by the user. Source code in roblox/conversations.py class ConversationTitle : \"\"\" A chat conversation's title. Attributes: title_for_viewer: Specifies the title for the conversation specific to the viewer. is_default_title: Specifies if the title displayed for the user is generated as a default title or was edited by the user. \"\"\" def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\"","title":"ConversationTitle"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle.__init__","text":"Parameters: Name Type Description Default data dict The raw input data. required Source code in roblox/conversations.py def __init__ ( self , data : dict ): \"\"\" Arguments: data: The raw input data. \"\"\" self . title_for_viewer : str = data [ \"titleForViewer\" ] self . is_default_title : bool = data [ \"isDefaultTitle\" ]","title":"__init__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationTitle.__repr__","text":"Source code in roblox/conversations.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } title_for_viewer= { self . title_for_viewer !r} >\"","title":"__repr__()"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType","text":"A chat conversation's type. Source code in roblox/conversations.py class ConversationType ( Enum ): \"\"\" A chat conversation's type. \"\"\" multi_user_conversation = \"MultiUserConversation\" \"\"\"Represents a chat with multiples users on the website.\"\"\" one_to_one_conversation = \"OneToOneConversation\" \"\"\"Represents a one-to-one conversation with person A and B.\"\"\" cloud_edit_conversation = \"CloudEditConversation\" \"\"\"Represents a chat in a team-create session.\"\"\"","title":"ConversationType"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.cloud_edit_conversation","text":"Represents a chat in a team-create session.","title":"cloud_edit_conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.multi_user_conversation","text":"Represents a chat with multiples users on the website.","title":"multi_user_conversation"},{"location":"reference/roblox/conversations/#roblox.conversations.ConversationType.one_to_one_conversation","text":"Represents a one-to-one conversation with person A and B.","title":"one_to_one_conversation"},{"location":"reference/roblox/creatortype/","text":"roblox.creatortype \u00b6 Contains client enums. fixme: this should be deprecated! CreatorType ( Enum ) \u00b6 Represents the type of creator for objects that can be owned by either a group or a user, like Assets. Source code in roblox/creatortype.py class CreatorType ( Enum ): \"\"\" Represents the type of creator for objects that can be owned by either a group or a user, like Assets. \"\"\" group = \"Group\" \"\"\"The creator is a group.\"\"\" user = \"User\" \"\"\"The creator is a user.\"\"\" group \u00b6 The creator is a group. user \u00b6 The creator is a user.","title":"creatortype"},{"location":"reference/roblox/creatortype/#roblox.creatortype","text":"Contains client enums. fixme: this should be deprecated!","title":"creatortype"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType","text":"Represents the type of creator for objects that can be owned by either a group or a user, like Assets. Source code in roblox/creatortype.py class CreatorType ( Enum ): \"\"\" Represents the type of creator for objects that can be owned by either a group or a user, like Assets. \"\"\" group = \"Group\" \"\"\"The creator is a group.\"\"\" user = \"User\" \"\"\"The creator is a user.\"\"\"","title":"CreatorType"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType.group","text":"The creator is a group.","title":"group"},{"location":"reference/roblox/creatortype/#roblox.creatortype.CreatorType.user","text":"The creator is a user.","title":"user"},{"location":"reference/roblox/delivery/","text":"roblox.delivery \u00b6 Contains classes and functions related to Roblox asset delivery. BaseCDNHash \u00b6 Represents a cdn_hash on a Roblox content delivery network. Attributes: Name Type Description cdn_hash str The CDN hash as a string. Source code in roblox/delivery.py class BaseCDNHash : \"\"\" Represents a cdn_hash on a Roblox content delivery network. Attributes: cdn_hash: The CDN hash as a string. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): \"\"\" Arguments: client: The Client object. cdn_hash: The CDN hash as a string. \"\"\" self . _client : Client = client self . cdn_hash : str = cdn_hash def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\" def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash ) def _get_url ( self , prefix : str , site : str = cdn_site ) -> str : cdn_number : int = self . get_cdn_number () return self . _client . url_generator . get_url ( f \" { prefix }{ cdn_number } \" , self . cdn_hash , site ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError __init__ ( self , client : Client , cdn_hash : str ) special \u00b6 Parameters: Name Type Description Default client Client The Client object. required cdn_hash str The CDN hash as a string. required Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): \"\"\" Arguments: client: The Client object. cdn_hash: The CDN hash as a string. \"\"\" self . _client : Client = client self . cdn_hash : str = cdn_hash __repr__ ( self ) special \u00b6 Source code in roblox/delivery.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\" get_cdn_number ( self ) -> int \u00b6 Returns the CDN number of this CDN hash. Returns: Type Description int The computed number of the given cdn_hash Source code in roblox/delivery.py def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Gets the cdn_hash's URL. This should be implemented by subclasses. Parameters: Name Type Description Default site str Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. 'rbxcdn.com' Returns: Type Description str The computed URL from the given cdn_hash attribute. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError ContentCDNHash ( BaseCDNHash ) \u00b6 Represents a CDN hash on cX.rbxcdn.com. Source code in roblox/delivery.py class ContentCDNHash ( BaseCDNHash ): \"\"\" Represents a CDN hash on cX.rbxcdn.com. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns: This hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site ) __init__ ( self , client : Client , cdn_hash : str ) special \u00b6 Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Returns: Type Description str This hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns: This hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site ) DeliveryProvider \u00b6 Provides CDN hashes and other delivery-related objects. Source code in roblox/delivery.py class DeliveryProvider : \"\"\" Provides CDN hashes and other delivery-related objects. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The client object, which is passed to all objects this client generates. \"\"\" self . _client : Client = client def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseCDNHash. \"\"\" return BaseCDNHash ( client = self . _client , cdn_hash = cdn_hash ) def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] ) def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ThumbnailCDNHash. \"\"\" return ThumbnailCDNHash ( client = self . _client , cdn_hash = cdn_hash ) def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ContentCDNHash. \"\"\" return ContentCDNHash ( client = self . _client , cdn_hash = cdn_hash ) __init__ ( self , client : Client ) special \u00b6 Parameters: Name Type Description Default client Client The client object, which is passed to all objects this client generates. required Source code in roblox/delivery.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The client object, which is passed to all objects this client generates. \"\"\" self . _client : Client = client get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description BaseCDNHash A BaseCDNHash. Source code in roblox/delivery.py def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseCDNHash. \"\"\" return BaseCDNHash ( client = self . _client , cdn_hash = cdn_hash ) get_cdn_hash_from_url ( self , url : str , site : str = 'rbxcdn.com' ) -> BaseCDNHash \u00b6 Parameters: Name Type Description Default url str A CDN url. required site str The site this cdn_hash is located at. 'rbxcdn.com' Returns: Type Description BaseCDNHash The CDN cdn_hash for the supplied CDN URL. Source code in roblox/delivery.py def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] ) get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description ContentCDNHash A ContentCDNHash. Source code in roblox/delivery.py def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ContentCDNHash. \"\"\" return ContentCDNHash ( client = self . _client , cdn_hash = cdn_hash ) get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash \u00b6 Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description ThumbnailCDNHash A ThumbnailCDNHash. Source code in roblox/delivery.py def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ThumbnailCDNHash. \"\"\" return ThumbnailCDNHash ( client = self . _client , cdn_hash = cdn_hash ) ThumbnailCDNHash ( BaseCDNHash ) \u00b6 Represents a CDN hash on tX.rbxcdn.com. Source code in roblox/delivery.py class ThumbnailCDNHash ( BaseCDNHash ): \"\"\" Represents a CDN hash on tX.rbxcdn.com. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site ) __init__ ( self , client : Client , cdn_hash : str ) special \u00b6 Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) get_url ( self , site : str = 'rbxcdn.com' ) -> str \u00b6 Returns this CDN hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site ) get_cdn_number ( cdn_hash : str ) -> int \u00b6 Gets the number in the CDN where number represents X in tX.rbxcdn.com Parameters: Name Type Description Default cdn_hash str The CDN cdn_hash to generate a CDN number for. required Source code in roblox/delivery.py def get_cdn_number ( cdn_hash : str ) -> int : \"\"\" Gets the number in the CDN where number represents X in tX.rbxcdn.com Arguments: cdn_hash: The CDN cdn_hash to generate a CDN number for. Returns: The CDN number for the supplied cdn_hash. \"\"\" i = 31 for char in cdn_hash [: 32 ]: i ^= ord ( char ) # i ^= int(char, 16) also works return i % 8","title":"delivery"},{"location":"reference/roblox/delivery/#roblox.delivery","text":"Contains classes and functions related to Roblox asset delivery.","title":"delivery"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash","text":"Represents a cdn_hash on a Roblox content delivery network. Attributes: Name Type Description cdn_hash str The CDN hash as a string. Source code in roblox/delivery.py class BaseCDNHash : \"\"\" Represents a cdn_hash on a Roblox content delivery network. Attributes: cdn_hash: The CDN hash as a string. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): \"\"\" Arguments: client: The Client object. cdn_hash: The CDN hash as a string. \"\"\" self . _client : Client = client self . cdn_hash : str = cdn_hash def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\" def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash ) def _get_url ( self , prefix : str , site : str = cdn_site ) -> str : cdn_number : int = self . get_cdn_number () return self . _client . url_generator . get_url ( f \" { prefix }{ cdn_number } \" , self . cdn_hash , site ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError","title":"BaseCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.__init__","text":"Parameters: Name Type Description Default client Client The Client object. required cdn_hash str The CDN hash as a string. required Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): \"\"\" Arguments: client: The Client object. cdn_hash: The CDN hash as a string. \"\"\" self . _client : Client = client self . cdn_hash : str = cdn_hash","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.__repr__","text":"Source code in roblox/delivery.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } cdn_hash= { self . cdn_hash } >\"","title":"__repr__()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.get_cdn_number","text":"Returns the CDN number of this CDN hash. Returns: Type Description int The computed number of the given cdn_hash Source code in roblox/delivery.py def get_cdn_number ( self ) -> int : \"\"\" Returns the CDN number of this CDN hash. Returns: The computed number of the given cdn_hash \"\"\" return get_cdn_number ( self . cdn_hash )","title":"get_cdn_number()"},{"location":"reference/roblox/delivery/#roblox.delivery.BaseCDNHash.get_url","text":"Gets the cdn_hash's URL. This should be implemented by subclasses. Parameters: Name Type Description Default site str Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. 'rbxcdn.com' Returns: Type Description str The computed URL from the given cdn_hash attribute. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Gets the cdn_hash's URL. This should be implemented by subclasses. Arguments: site: Represents the URL for what site it should target, be it rbxcdn.com, or roblox.com etc. Returns: The computed URL from the given cdn_hash attribute. \"\"\" raise NotImplementedError","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash","text":"Represents a CDN hash on cX.rbxcdn.com. Source code in roblox/delivery.py class ContentCDNHash ( BaseCDNHash ): \"\"\" Represents a CDN hash on cX.rbxcdn.com. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns: This hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site )","title":"ContentCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash.__init__","text":"Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash )","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.ContentCDNHash.get_url","text":"Returns: Type Description str This hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns: This hash's URL. \"\"\" return self . _get_url ( \"c\" , cdn_site )","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider","text":"Provides CDN hashes and other delivery-related objects. Source code in roblox/delivery.py class DeliveryProvider : \"\"\" Provides CDN hashes and other delivery-related objects. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: The client object, which is passed to all objects this client generates. \"\"\" self . _client : Client = client def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseCDNHash. \"\"\" return BaseCDNHash ( client = self . _client , cdn_hash = cdn_hash ) def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] ) def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ThumbnailCDNHash. \"\"\" return ThumbnailCDNHash ( client = self . _client , cdn_hash = cdn_hash ) def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ContentCDNHash. \"\"\" return ContentCDNHash ( client = self . _client , cdn_hash = cdn_hash )","title":"DeliveryProvider"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.__init__","text":"Parameters: Name Type Description Default client Client The client object, which is passed to all objects this client generates. required Source code in roblox/delivery.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: The client object, which is passed to all objects this client generates. \"\"\" self . _client : Client = client","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description BaseCDNHash A BaseCDNHash. Source code in roblox/delivery.py def get_cdn_hash ( self , cdn_hash : str ) -> BaseCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A BaseCDNHash. \"\"\" return BaseCDNHash ( client = self . _client , cdn_hash = cdn_hash )","title":"get_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_cdn_hash_from_url","text":"Parameters: Name Type Description Default url str A CDN url. required site str The site this cdn_hash is located at. 'rbxcdn.com' Returns: Type Description BaseCDNHash The CDN cdn_hash for the supplied CDN URL. Source code in roblox/delivery.py def get_cdn_hash_from_url ( self , url : str , site : str = cdn_site ) -> BaseCDNHash : \"\"\" todo: turn this into something that actually splits into path. Arguments: url: A CDN url. site: The site this cdn_hash is located at. Returns: The CDN cdn_hash for the supplied CDN URL. \"\"\" return self . get_cdn_hash ( cdn_hash = url . split ( f \". { site } /\" )[ 1 ] )","title":"get_cdn_hash_from_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_content_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description ContentCDNHash A ContentCDNHash. Source code in roblox/delivery.py def get_content_cdn_hash ( self , cdn_hash : str ) -> ContentCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ContentCDNHash. \"\"\" return ContentCDNHash ( client = self . _client , cdn_hash = cdn_hash )","title":"get_content_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.DeliveryProvider.get_thumbnail_cdn_hash","text":"Gets a Roblox CDN cdn_hash. Parameters: Name Type Description Default cdn_hash str The cdn_hash. required Returns: Type Description ThumbnailCDNHash A ThumbnailCDNHash. Source code in roblox/delivery.py def get_thumbnail_cdn_hash ( self , cdn_hash : str ) -> ThumbnailCDNHash : \"\"\" Gets a Roblox CDN cdn_hash. Arguments: cdn_hash: The cdn_hash. Returns: A ThumbnailCDNHash. \"\"\" return ThumbnailCDNHash ( client = self . _client , cdn_hash = cdn_hash )","title":"get_thumbnail_cdn_hash()"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash","text":"Represents a CDN hash on tX.rbxcdn.com. Source code in roblox/delivery.py class ThumbnailCDNHash ( BaseCDNHash ): \"\"\" Represents a CDN hash on tX.rbxcdn.com. \"\"\" def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash ) def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site )","title":"ThumbnailCDNHash"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash.__init__","text":"Source code in roblox/delivery.py def __init__ ( self , client : Client , cdn_hash : str ): super () . __init__ ( client = client , cdn_hash = cdn_hash )","title":"__init__()"},{"location":"reference/roblox/delivery/#roblox.delivery.ThumbnailCDNHash.get_url","text":"Returns this CDN hash's URL. Source code in roblox/delivery.py def get_url ( self , site : str = cdn_site ) -> str : \"\"\" Returns this CDN hash's URL. \"\"\" return self . _get_url ( \"t\" , cdn_site )","title":"get_url()"},{"location":"reference/roblox/delivery/#roblox.delivery.get_cdn_number","text":"Gets the number in the CDN where number represents X in tX.rbxcdn.com Parameters: Name Type Description Default cdn_hash str The CDN cdn_hash to generate a CDN number for. required Source code in roblox/delivery.py def get_cdn_number ( cdn_hash : str ) -> int : \"\"\" Gets the number in the CDN where number represents X in tX.rbxcdn.com Arguments: cdn_hash: The CDN cdn_hash to generate a CDN number for. Returns: The CDN number for the supplied cdn_hash. \"\"\" i = 31 for char in cdn_hash [: 32 ]: i ^= ord ( char ) # i ^= int(char, 16) also works return i % 8","title":"get_cdn_number()"},{"location":"reference/roblox/friends/","text":"roblox.friends \u00b6 Contains classes related to Roblox friend data and parsing. Friend ( User ) \u00b6 Represents a friend. Attributes: Name Type Description is_online Optional[bool] Whether the user is currently online. presence_type int Their presence type. Don't use this. is_deleted bool Whether the account is deleted. friend_frequent_rank int Unknown Source code in roblox/friends.py class Friend ( User ): \"\"\" Represents a friend. Attributes: is_online: Whether the user is currently online. presence_type: Their presence type. Don't use this. is_deleted: Whether the account is deleted. friend_frequent_rank: Unknown \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client = client , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The data we get back from the endpoint. required client Client The Client object, which is passed to all objects this Client generates. required Source code in roblox/friends.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client = client , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ] __repr__ ( self ) special \u00b6 Source code in roblox/friends.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\"","title":"friends"},{"location":"reference/roblox/friends/#roblox.friends","text":"Contains classes related to Roblox friend data and parsing.","title":"friends"},{"location":"reference/roblox/friends/#roblox.friends.Friend","text":"Represents a friend. Attributes: Name Type Description is_online Optional[bool] Whether the user is currently online. presence_type int Their presence type. Don't use this. is_deleted bool Whether the account is deleted. friend_frequent_rank int Unknown Source code in roblox/friends.py class Friend ( User ): \"\"\" Represents a friend. Attributes: is_online: Whether the user is currently online. presence_type: Their presence type. Don't use this. is_deleted: Whether the account is deleted. friend_frequent_rank: Unknown \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client = client , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\"","title":"Friend"},{"location":"reference/roblox/friends/#roblox.friends.Friend.__init__","text":"Parameters: Name Type Description Default data dict The data we get back from the endpoint. required client Client The Client object, which is passed to all objects this Client generates. required Source code in roblox/friends.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client = client , data = data ) self . is_online : Optional [ bool ] = data . get ( \"isOnline\" ) self . presence_type : int = data [ \"presenceType\" ] self . is_deleted : bool = data [ \"isDeleted\" ] self . friend_frequent_rank : int = data [ \"friendFrequentRank\" ]","title":"__init__()"},{"location":"reference/roblox/friends/#roblox.friends.Friend.__repr__","text":"Source code in roblox/friends.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} is_online= { self . is_online } >\"","title":"__repr__()"},{"location":"reference/roblox/gamepasses/","text":"roblox.gamepasses \u00b6 Contains classes related to Roblox gamepass data and parsing. GamePass ( BaseGamePass ) \u00b6 Represents a Roblox gamepass. Attributes: Name Type Description id int The gamepass ID. name str The gamepass name. display_name str The gamepass display name. price Optional[int] The gamepass price. Source code in roblox/gamepasses.py class GamePass ( BaseGamePass ): \"\"\" Represents a Roblox gamepass. Attributes: id: The gamepass ID. name: The gamepass name. display_name: The gamepass display name. price: The gamepass price. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/gamepasses.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ] __repr__ ( self ) special \u00b6 Source code in roblox/gamepasses.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\"","title":"gamepasses"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses","text":"Contains classes related to Roblox gamepass data and parsing.","title":"gamepasses"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass","text":"Represents a Roblox gamepass. Attributes: Name Type Description id int The gamepass ID. name str The gamepass name. display_name str The gamepass display name. price Optional[int] The gamepass price. Source code in roblox/gamepasses.py class GamePass ( BaseGamePass ): \"\"\" Represents a Roblox gamepass. Attributes: id: The gamepass ID. name: The gamepass name. display_name: The gamepass display name. price: The gamepass price. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\"","title":"GamePass"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass.__init__","text":"Source code in roblox/gamepasses.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , gamepass_id = self . id ) self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] # TODO: add product here self . price : Optional [ int ] = data [ \"price\" ]","title":"__init__()"},{"location":"reference/roblox/gamepasses/#roblox.gamepasses.GamePass.__repr__","text":"Source code in roblox/gamepasses.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} price= { self . price } >\"","title":"__repr__()"},{"location":"reference/roblox/groups/","text":"roblox.groups \u00b6 Contains classes related to Roblox group data and parsing. Group ( BaseGroup ) \u00b6 Represents a group. Attributes: Name Type Description id int the id of the group. name str name of the group. description str description of the group. owner Optional[PartialUser] player who owns the group. shout Optional[Shout] the current group shout. member_count int amount of members in the group. is_builders_club_only bool can only people with builder club join. public_entry_allowed bool can you join without your join request having to be accepted. is_locked bool Is the group locked? has_verified_badge bool If the group has a verified badge. Source code in roblox/groups.py class Group ( BaseGroup ): \"\"\" Represents a group. Attributes: id: the id of the group. name: name of the group. description: description of the group. owner: player who owns the group. shout: the current group shout. member_count: amount of members in the group. is_builders_club_only: can only people with builder club join. public_entry_allowed: can you join without your join request having to be accepted. is_locked: Is the group locked? has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client , data [ \"id\" ]) self . _client : Client = client self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : Optional [ PartialUser ] = PartialUser ( client = client , data = data [ \"owner\" ]) if data . get ( \"owner\" ) else \\ None self . shout : Optional [ Shout ] = Shout ( client = self . _client , data = data [ \"shout\" ] ) if data . get ( \"shout\" ) else None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\" async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. Returns: The old and new shout. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default data dict The data we get back from the endpoint. required client Client The Client object, which is passed to all objects this Client generates. required Source code in roblox/groups.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client , data [ \"id\" ]) self . _client : Client = client self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : Optional [ PartialUser ] = PartialUser ( client = client , data = data [ \"owner\" ]) if data . get ( \"owner\" ) else \\ None self . shout : Optional [ Shout ] = Shout ( client = self . _client , data = data [ \"shout\" ] ) if data . get ( \"shout\" ) else None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] __repr__ ( self ) special \u00b6 Source code in roblox/groups.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\" update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]] async \u00b6 Updates the shout. Parameters: Name Type Description Default message str The new shout message. required update_self bool Whether to update self.shout automatically. True Source code in roblox/groups.py async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. Returns: The old and new shout. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout","title":"groups"},{"location":"reference/roblox/groups/#roblox.groups","text":"Contains classes related to Roblox group data and parsing.","title":"groups"},{"location":"reference/roblox/groups/#roblox.groups.Group","text":"Represents a group. Attributes: Name Type Description id int the id of the group. name str name of the group. description str description of the group. owner Optional[PartialUser] player who owns the group. shout Optional[Shout] the current group shout. member_count int amount of members in the group. is_builders_club_only bool can only people with builder club join. public_entry_allowed bool can you join without your join request having to be accepted. is_locked bool Is the group locked? has_verified_badge bool If the group has a verified badge. Source code in roblox/groups.py class Group ( BaseGroup ): \"\"\" Represents a group. Attributes: id: the id of the group. name: name of the group. description: description of the group. owner: player who owns the group. shout: the current group shout. member_count: amount of members in the group. is_builders_club_only: can only people with builder club join. public_entry_allowed: can you join without your join request having to be accepted. is_locked: Is the group locked? has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client , data [ \"id\" ]) self . _client : Client = client self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : Optional [ PartialUser ] = PartialUser ( client = client , data = data [ \"owner\" ]) if data . get ( \"owner\" ) else \\ None self . shout : Optional [ Shout ] = Shout ( client = self . _client , data = data [ \"shout\" ] ) if data . get ( \"shout\" ) else None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\" async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. Returns: The old and new shout. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout","title":"Group"},{"location":"reference/roblox/groups/#roblox.groups.Group.__init__","text":"Parameters: Name Type Description Default data dict The data we get back from the endpoint. required client Client The Client object, which is passed to all objects this Client generates. required Source code in roblox/groups.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: data: The data we get back from the endpoint. client: The Client object, which is passed to all objects this Client generates. \"\"\" super () . __init__ ( client , data [ \"id\" ]) self . _client : Client = client self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . owner : Optional [ PartialUser ] = PartialUser ( client = client , data = data [ \"owner\" ]) if data . get ( \"owner\" ) else \\ None self . shout : Optional [ Shout ] = Shout ( client = self . _client , data = data [ \"shout\" ] ) if data . get ( \"shout\" ) else None self . member_count : int = data [ \"memberCount\" ] self . is_builders_club_only : bool = data [ \"isBuildersClubOnly\" ] self . public_entry_allowed : bool = data [ \"publicEntryAllowed\" ] self . is_locked : bool = data . get ( \"isLocked\" ) or False self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ]","title":"__init__()"},{"location":"reference/roblox/groups/#roblox.groups.Group.__repr__","text":"Source code in roblox/groups.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} owner= { self . owner } >\"","title":"__repr__()"},{"location":"reference/roblox/groups/#roblox.groups.Group.update_shout","text":"Updates the shout. Parameters: Name Type Description Default message str The new shout message. required update_self bool Whether to update self.shout automatically. True Source code in roblox/groups.py async def update_shout ( self , message : str , update_self : bool = True ) -> Tuple [ Optional [ Shout ], Optional [ Shout ]]: \"\"\" Updates the shout. Arguments: message: The new shout message. update_self: Whether to update self.shout automatically. Returns: The old and new shout. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () old_shout : Optional [ Shout ] = self . shout new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None if update_self : self . shout = new_shout return old_shout , new_shout","title":"update_shout()"},{"location":"reference/roblox/instances/","text":"roblox.instances \u00b6 This module contains classes intended to parse and deal with data from Roblox item instance information endpoints. instance_classes \u00b6 AssetInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox asset. Source code in roblox/instances.py class AssetInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox asset. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . asset : BaseAsset = BaseAsset ( client = self . _client , asset_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . asset : BaseAsset = BaseAsset ( client = self . _client , asset_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\" BadgeInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox badge. Source code in roblox/instances.py class BadgeInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox badge. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . badge : BaseBadge = BaseBadge ( client = self . _client , badge_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . badge : BaseBadge = BaseBadge ( client = self . _client , badge_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\" GamePassInstance ( ItemInstance ) \u00b6 Represents an instance of a Roblox gamepass. Source code in roblox/instances.py class GamePassInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox gamepass. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( client = self . _client , gamepass_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( client = self . _client , gamepass_id = data [ \"id\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\" InstanceType ( Enum ) \u00b6 Represents an asset instance type. Source code in roblox/instances.py class InstanceType ( Enum ): \"\"\" Represents an asset instance type. \"\"\" asset = \"Asset\" gamepass = \"GamePass\" badge = \"Badge\" asset \u00b6 badge \u00b6 gamepass \u00b6 ItemInstance ( BaseInstance ) \u00b6 Represents an instance of a Roblox item of some kind. Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. Source code in roblox/instances.py class ItemInstance ( BaseInstance ): \"\"\" Represents an instance of a Roblox item of some kind. Attributes: _client: The Client object, which is passed to all objects this Client generates. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( client = self . _client , instance_id = data [ \"instanceId\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( client = self . _client , instance_id = data [ \"instanceId\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"instances"},{"location":"reference/roblox/instances/#roblox.instances","text":"This module contains classes intended to parse and deal with data from Roblox item instance information endpoints.","title":"instances"},{"location":"reference/roblox/instances/#roblox.instances.instance_classes","text":"","title":"instance_classes"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance","text":"Represents an instance of a Roblox asset. Source code in roblox/instances.py class AssetInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox asset. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . asset : BaseAsset = BaseAsset ( client = self . _client , asset_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\"","title":"AssetInstance"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . asset : BaseAsset = BaseAsset ( client = self . _client , asset_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.AssetInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } asset= { self . asset } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance","text":"Represents an instance of a Roblox badge. Source code in roblox/instances.py class BadgeInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox badge. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . badge : BaseBadge = BaseBadge ( client = self . _client , badge_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\"","title":"BadgeInstance"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . badge : BaseBadge = BaseBadge ( client = self . _client , badge_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.BadgeInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } badge= { self . badge } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance","text":"Represents an instance of a Roblox gamepass. Source code in roblox/instances.py class GamePassInstance ( ItemInstance ): \"\"\" Represents an instance of a Roblox gamepass. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( client = self . _client , gamepass_id = data [ \"id\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\"","title":"GamePassInstance"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance.__init__","text":"Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client super () . __init__ ( client = self . _client , data = data ) self . gamepass : BaseGamePass = BaseGamePass ( client = self . _client , gamepass_id = data [ \"id\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.GamePassInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } gamepass= { self . gamepass } >\"","title":"__repr__()"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType","text":"Represents an asset instance type. Source code in roblox/instances.py class InstanceType ( Enum ): \"\"\" Represents an asset instance type. \"\"\" asset = \"Asset\" gamepass = \"GamePass\" badge = \"Badge\"","title":"InstanceType"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType.asset","text":"","title":"asset"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType.badge","text":"","title":"badge"},{"location":"reference/roblox/instances/#roblox.instances.InstanceType.gamepass","text":"","title":"gamepass"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance","text":"Represents an instance of a Roblox item of some kind. Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. Source code in roblox/instances.py class ItemInstance ( BaseInstance ): \"\"\" Represents an instance of a Roblox item of some kind. Attributes: _client: The Client object, which is passed to all objects this Client generates. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( client = self . _client , instance_id = data [ \"instanceId\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"ItemInstance"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/instances.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . name : str = data [ \"name\" ] self . type : str = data [ \"type\" ] # fixme super () . __init__ ( client = self . _client , instance_id = data [ \"instanceId\" ])","title":"__init__()"},{"location":"reference/roblox/instances/#roblox.instances.ItemInstance.__repr__","text":"Source code in roblox/instances.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} type= { self . type } >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/","text":"roblox.jobs \u00b6 This module contains classes intended to parse and deal with data from Roblox server instance (or \"job\") endpoints. GameInstance ( BaseJob ) \u00b6 Represents a game (or place) instance, or \"job\". Attributes: Name Type Description id str The instance's job ID. capacity int The server's capacity. ping int The server's ping. fps float The server's FPS. show_slow_game_message bool Whether to show the \"slow game\" message. place BasePlace The server's place. current_players List[GameInstancePlayer] A list of the players in this server. can_join bool Whether the authenticated user can join this server. show_shutdown_button bool Whether to show the shutdown button on this server. friends_description str What text should be shown if this server is a \"friends are in\" server. friends_mouseover What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message str The server's capacity as a parsed message. join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app. Source code in roblox/jobs.py class GameInstance ( BaseJob ): \"\"\" Represents a game (or place) instance, or \"job\". Attributes: id: The instance's job ID. capacity: The server's capacity. ping: The server's ping. fps: The server's FPS. show_slow_game_message: Whether to show the \"slow game\" message. place: The server's place. current_players: A list of the players in this server. can_join: Whether the authenticated user can join this server. show_shutdown_button: Whether to show the shutdown button on this server. friends_description: What text should be shown if this server is a \"friends are in\" server. friends_mouseover: What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message: The server's capacity as a parsed message. join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : str = data [ \"Guid\" ] super () . __init__ ( client = self . _client , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( client = self . _client , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : str = data [ \"Guid\" ] super () . __init__ ( client = self . _client , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( client = self . _client , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ] __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\" GameInstancePlayer ( BaseUser ) \u00b6 Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used. Attributes: Name Type Description id int The player's user ID. name str The player's username. thumbnail GameInstancePlayerThumbnail The player's thumbnail. Source code in roblox/jobs.py class GameInstancePlayer ( BaseUser ): \"\"\" Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used. Attributes: id: The player's user ID. name: The player's username. thumbnail: The player's thumbnail. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"Id\" ] super () . __init__ ( client = self . _client , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( client = self . _client , data = data [ \"Thumbnail\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"Id\" ] super () . __init__ ( client = self . _client , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( client = self . _client , data = data [ \"Thumbnail\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" GameInstancePlayerThumbnail \u00b6 Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information. Attributes: Name Type Description url str The thumbnail's URL. final bool Whether the thumbnail is finalized or not. Source code in roblox/jobs.py class GameInstancePlayerThumbnail : \"\"\" Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information. Attributes: url: The thumbnail's URL. final: Whether the thumbnail is finalized or not. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ] __repr__ ( self ) special \u00b6 Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \" GameInstances \u00b6 Represents a game/place's active server instances. Attributes: Name Type Description place BasePlace The place. show_shutdown_all_button bool Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable bool Whether the list is unavailable. collection List[GameInstance] A list of the game instances. total_collection_size int How many active servers there are. Source code in roblox/jobs.py class GameInstances : \"\"\" Represents a game/place's active server instances. Attributes: place: The place. show_shutdown_all_button: Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable: Whether the list is unavailable. collection: A list of the game instances. total_collection_size: How many active servers there are. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( client = self . _client , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ] __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( client = self . _client , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ]","title":"jobs"},{"location":"reference/roblox/jobs/#roblox.jobs","text":"This module contains classes intended to parse and deal with data from Roblox server instance (or \"job\") endpoints.","title":"jobs"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance","text":"Represents a game (or place) instance, or \"job\". Attributes: Name Type Description id str The instance's job ID. capacity int The server's capacity. ping int The server's ping. fps float The server's FPS. show_slow_game_message bool Whether to show the \"slow game\" message. place BasePlace The server's place. current_players List[GameInstancePlayer] A list of the players in this server. can_join bool Whether the authenticated user can join this server. show_shutdown_button bool Whether to show the shutdown button on this server. friends_description str What text should be shown if this server is a \"friends are in\" server. friends_mouseover What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message str The server's capacity as a parsed message. join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script str JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app. Source code in roblox/jobs.py class GameInstance ( BaseJob ): \"\"\" Represents a game (or place) instance, or \"job\". Attributes: id: The instance's job ID. capacity: The server's capacity. ping: The server's ping. fps: The server's FPS. show_slow_game_message: Whether to show the \"slow game\" message. place: The server's place. current_players: A list of the players in this server. can_join: Whether the authenticated user can join this server. show_shutdown_button: Whether to show the shutdown button on this server. friends_description: What text should be shown if this server is a \"friends are in\" server. friends_mouseover: What text should be shown on mouseover if this server is a \"friends are in\" server. capacity_message: The server's capacity as a parsed message. join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game. app_join_script: JavaScript code that, when evaluated on a /games page on the Roblox website, launches this game through the Roblox mobile app. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : str = data [ \"Guid\" ] super () . __init__ ( client = self . _client , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( client = self . _client , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\"","title":"GameInstance"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : str = data [ \"Guid\" ] super () . __init__ ( client = self . _client , job_id = self . id ) self . capacity : int = data [ \"Capacity\" ] self . ping : int = data [ \"Ping\" ] self . fps : float = data [ \"Fps\" ] self . show_slow_game_message : bool = data [ \"ShowSlowGameMessage\" ] self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . current_players : List [ GameInstancePlayer ] = [ GameInstancePlayer ( client = self . _client , data = player_data ) for player_data in data [ \"CurrentPlayers\" ] ] self . can_join : bool = data [ \"UserCanJoin\" ] self . show_shutdown_button : bool = data [ \"ShowShutdownButton\" ] self . friends_description : str = data [ \"FriendsDescription\" ] self . friends_mouseover = data [ \"FriendsMouseover\" ] self . capacity_message : str = data [ \"PlayersCapacity\" ] # TODO: reconsider self . join_script : str = data [ \"JoinScript\" ] self . app_join_script : str = data [ \"RobloxAppJoinScript\" ]","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstance.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id !r} capacity { self . capacity } >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer","text":"Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used. Attributes: Name Type Description id int The player's user ID. name str The player's username. thumbnail GameInstancePlayerThumbnail The player's thumbnail. Source code in roblox/jobs.py class GameInstancePlayer ( BaseUser ): \"\"\" Represents a single player in a game instance. Data, like user ID and username, may be filled with placeholder data. Do not rely on this object containing proper data. If the id attribute is 0, this object should not be used. Attributes: id: The player's user ID. name: The player's username. thumbnail: The player's thumbnail. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"Id\" ] super () . __init__ ( client = self . _client , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( client = self . _client , data = data [ \"Thumbnail\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"GameInstancePlayer"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"Id\" ] super () . __init__ ( client = self . _client , user_id = self . id ) self . name : str = data [ \"Username\" ] self . thumbnail : GameInstancePlayerThumbnail = GameInstancePlayerThumbnail ( client = self . _client , data = data [ \"Thumbnail\" ] )","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayer.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail","text":"Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information. Attributes: Name Type Description url str The thumbnail's URL. final bool Whether the thumbnail is finalized or not. Source code in roblox/jobs.py class GameInstancePlayerThumbnail : \"\"\" Represent a player in a game instance's thumbnail. As the asset part of these thumbnails is no longer in use, this endpoint does not attempt to implement asset information. Attributes: url: The thumbnail's URL. final: Whether the thumbnail is finalized or not. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \"","title":"GameInstancePlayerThumbnail"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . url : str = data [ \"Url\" ] self . final : bool = data [ \"IsFinal\" ]","title":"__init__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstancePlayerThumbnail.__repr__","text":"Source code in roblox/jobs.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } url= { self . url !r} final= { self . final } \"","title":"__repr__()"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstances","text":"Represents a game/place's active server instances. Attributes: Name Type Description place BasePlace The place. show_shutdown_all_button bool Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable bool Whether the list is unavailable. collection List[GameInstance] A list of the game instances. total_collection_size int How many active servers there are. Source code in roblox/jobs.py class GameInstances : \"\"\" Represents a game/place's active server instances. Attributes: place: The place. show_shutdown_all_button: Whether to show the \"Shutdown All\" button on the server list. is_game_instance_list_unavailable: Whether the list is unavailable. collection: A list of the game instances. total_collection_size: How many active servers there are. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( client = self . _client , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ]","title":"GameInstances"},{"location":"reference/roblox/jobs/#roblox.jobs.GameInstances.__init__","text":"Source code in roblox/jobs.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"PlaceId\" ]) self . show_shutdown_all_button : bool = data [ \"ShowShutdownAllButton\" ] self . is_game_instance_list_unavailable : bool = data [ \"IsGameInstanceListUnavailable\" ] self . collection : List [ GameInstance ] = [ GameInstance ( client = self . _client , data = instance_data ) for instance_data in data [ \"Collection\" ] ] self . total_collection_size : int = data [ \"TotalCollectionSize\" ]","title":"__init__()"},{"location":"reference/roblox/members/","text":"roblox.members \u00b6 This module contains classes intended to parse and deal with data from Roblox group member endpoints. Member ( MemberRelationship ) \u00b6 Represents a group member. Attributes: Name Type Description id int The member's ID. name str The member's name. display_name str The member's display name. role PartialRole The member's role. group BaseGroup The member's group. has_verified_badge bool If the member has a verified badge. Source code in roblox/members.py class Member ( MemberRelationship ): \"\"\" Represents a group member. Attributes: id: The member's ID. name: The member's name. display_name: The member's display name. role: The member's role. group: The member's group. has_verified_badge: If the member has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] self . has_verified_badge : bool = data [ \"user\" ][ \"hasVerifiedBadge\" ] super () . __init__ ( client = self . _client , user = self . id , group = group ) self . role : PartialRole = PartialRole ( client = self . _client , data = data [ \"role\" ]) self . group : BaseGroup = group def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\" __init__ ( self , client : Client , data : dict , group : BaseGroup ) special \u00b6 Source code in roblox/members.py def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] self . has_verified_badge : bool = data [ \"user\" ][ \"hasVerifiedBadge\" ] super () . __init__ ( client = self . _client , user = self . id , group = group ) self . role : PartialRole = PartialRole ( client = self . _client , data = data [ \"role\" ]) self . group : BaseGroup = group __repr__ ( self ) special \u00b6 Source code in roblox/members.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\" MemberRelationship ( BaseUser ) \u00b6 Represents a relationship between a user and a group. Attributes: Name Type Description group BaseGroup The corresponding group. Source code in roblox/members.py class MemberRelationship ( BaseUser ): \"\"\" Represents a relationship between a user and a group. Attributes: group: The corresponding group. \"\"\" def __init__ ( self , client : Client , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _client : Client = client super () . __init__ ( client = self . _client , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group async def set_role ( self , role : RoleOrRoleId ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role ) async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank ) async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self ) __init__ ( self , client : Client , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]) special \u00b6 Source code in roblox/members.py def __init__ ( self , client : Client , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _client : Client = client super () . __init__ ( client = self . _client , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group kick ( self ) async \u00b6 Kicks this member from the group. Source code in roblox/members.py async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self ) set_rank ( self , rank : int ) async \u00b6 Sets this member's rank. Parameters: Name Type Description Default rank int The new rank this member should be assigned. Should be in the range of 0-255. required Source code in roblox/members.py async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank ) set_role ( self , role : RoleOrRoleId ) async \u00b6 Sets this member's role. Parameters: Name Type Description Default role RoleOrRoleId The new role this member should be assigned. required Source code in roblox/members.py async def set_role ( self , role : RoleOrRoleId ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role )","title":"members"},{"location":"reference/roblox/members/#roblox.members","text":"This module contains classes intended to parse and deal with data from Roblox group member endpoints.","title":"members"},{"location":"reference/roblox/members/#roblox.members.Member","text":"Represents a group member. Attributes: Name Type Description id int The member's ID. name str The member's name. display_name str The member's display name. role PartialRole The member's role. group BaseGroup The member's group. has_verified_badge bool If the member has a verified badge. Source code in roblox/members.py class Member ( MemberRelationship ): \"\"\" Represents a group member. Attributes: id: The member's ID. name: The member's name. display_name: The member's display name. role: The member's role. group: The member's group. has_verified_badge: If the member has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] self . has_verified_badge : bool = data [ \"user\" ][ \"hasVerifiedBadge\" ] super () . __init__ ( client = self . _client , user = self . id , group = group ) self . role : PartialRole = PartialRole ( client = self . _client , data = data [ \"role\" ]) self . group : BaseGroup = group def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\"","title":"Member"},{"location":"reference/roblox/members/#roblox.members.Member.__init__","text":"Source code in roblox/members.py def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"user\" ][ \"userId\" ] self . name : str = data [ \"user\" ][ \"username\" ] self . display_name : str = data [ \"user\" ][ \"displayName\" ] self . has_verified_badge : bool = data [ \"user\" ][ \"hasVerifiedBadge\" ] super () . __init__ ( client = self . _client , user = self . id , group = group ) self . role : PartialRole = PartialRole ( client = self . _client , data = data [ \"role\" ]) self . group : BaseGroup = group","title":"__init__()"},{"location":"reference/roblox/members/#roblox.members.Member.__repr__","text":"Source code in roblox/members.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} role= { self . role } >\"","title":"__repr__()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship","text":"Represents a relationship between a user and a group. Attributes: Name Type Description group BaseGroup The corresponding group. Source code in roblox/members.py class MemberRelationship ( BaseUser ): \"\"\" Represents a relationship between a user and a group. Attributes: group: The corresponding group. \"\"\" def __init__ ( self , client : Client , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _client : Client = client super () . __init__ ( client = self . _client , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group async def set_role ( self , role : RoleOrRoleId ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role ) async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank ) async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self )","title":"MemberRelationship"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.__init__","text":"Source code in roblox/members.py def __init__ ( self , client : Client , user : Union [ BaseUser , int ], group : Union [ BaseGroup , int ]): self . _client : Client = client super () . __init__ ( client = self . _client , user_id = int ( user )) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.kick","text":"Kicks this member from the group. Source code in roblox/members.py async def kick ( self ): \"\"\" Kicks this member from the group. \"\"\" await self . group . kick_user ( self )","title":"kick()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.set_rank","text":"Sets this member's rank. Parameters: Name Type Description Default rank int The new rank this member should be assigned. Should be in the range of 0-255. required Source code in roblox/members.py async def set_rank ( self , rank : int ): \"\"\" Sets this member's rank. Arguments: rank: The new rank this member should be assigned. Should be in the range of 0-255. \"\"\" await self . group . set_rank ( self , rank )","title":"set_rank()"},{"location":"reference/roblox/members/#roblox.members.MemberRelationship.set_role","text":"Sets this member's role. Parameters: Name Type Description Default role RoleOrRoleId The new role this member should be assigned. required Source code in roblox/members.py async def set_role ( self , role : RoleOrRoleId ): \"\"\" Sets this member's role. Arguments: role: The new role this member should be assigned. \"\"\" await self . group . set_role ( self , role )","title":"set_role()"},{"location":"reference/roblox/places/","text":"roblox.places \u00b6 This module contains classes intended to parse and deal with data from Roblox place information endpoints. Place ( BasePlace ) \u00b6 Represents a Roblox place. Attributes: Name Type Description id int id of the place. name str Name of the place. description str Description of the place. url str URL for the place. builder str The name of the user or group who owns the place. builder_id int The ID of the player or group who owns the place. is_playable bool Whether the authenticated user can play this game. reason_prohibited str If the place is not playable, contains the reason why the user cannot play the game. universe BaseUniverse The BaseUniverse that contains this place. universe_root_place BasePlace The root place that the universe contains. price int How much it costs to play the game. image_token str Can be used to generate thumbnails for this place. has_verified_badge bool If the place has a verified badge. Source code in roblox/places.py class Place ( BasePlace ): \"\"\" Represents a Roblox place. Attributes: id: id of the place. name: Name of the place. description: Description of the place. url: URL for the place. builder: The name of the user or group who owns the place. builder_id: The ID of the player or group who owns the place. is_playable: Whether the authenticated user can play this game. reason_prohibited: If the place is not playable, contains the reason why the user cannot play the game. universe: The BaseUniverse that contains this place. universe_root_place: The root place that the universe contains. price: How much it costs to play the game. image_token: Can be used to generate thumbnails for this place. has_verified_badge: If the place has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , place_id = data [ \"placeId\" ]) self . _client : Client = client self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( client = self . _client , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client object, which is passed to all objects this Client generates. required data dict data to make the magic happen. required Source code in roblox/places.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , place_id = data [ \"placeId\" ]) self . _client : Client = client self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( client = self . _client , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] __repr__ ( self ) special \u00b6 Source code in roblox/places.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"places"},{"location":"reference/roblox/places/#roblox.places","text":"This module contains classes intended to parse and deal with data from Roblox place information endpoints.","title":"places"},{"location":"reference/roblox/places/#roblox.places.Place","text":"Represents a Roblox place. Attributes: Name Type Description id int id of the place. name str Name of the place. description str Description of the place. url str URL for the place. builder str The name of the user or group who owns the place. builder_id int The ID of the player or group who owns the place. is_playable bool Whether the authenticated user can play this game. reason_prohibited str If the place is not playable, contains the reason why the user cannot play the game. universe BaseUniverse The BaseUniverse that contains this place. universe_root_place BasePlace The root place that the universe contains. price int How much it costs to play the game. image_token str Can be used to generate thumbnails for this place. has_verified_badge bool If the place has a verified badge. Source code in roblox/places.py class Place ( BasePlace ): \"\"\" Represents a Roblox place. Attributes: id: id of the place. name: Name of the place. description: Description of the place. url: URL for the place. builder: The name of the user or group who owns the place. builder_id: The ID of the player or group who owns the place. is_playable: Whether the authenticated user can play this game. reason_prohibited: If the place is not playable, contains the reason why the user cannot play the game. universe: The BaseUniverse that contains this place. universe_root_place: The root place that the universe contains. price: How much it costs to play the game. image_token: Can be used to generate thumbnails for this place. has_verified_badge: If the place has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , place_id = data [ \"placeId\" ]) self . _client : Client = client self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( client = self . _client , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"Place"},{"location":"reference/roblox/places/#roblox.places.Place.__init__","text":"Parameters: Name Type Description Default client Client The Client object, which is passed to all objects this Client generates. required data dict data to make the magic happen. required Source code in roblox/places.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , place_id = data [ \"placeId\" ]) self . _client : Client = client self . id : int = data [ \"placeId\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . url : str = data [ \"url\" ] self . builder : str = data [ \"builder\" ] self . builder_id : int = data [ \"builderId\" ] self . is_playable : bool = data [ \"isPlayable\" ] self . reason_prohibited : str = data [ \"reasonProhibited\" ] self . universe : BaseUniverse = BaseUniverse ( client = self . _client , universe_id = data [ \"universeId\" ]) self . universe_root_place : BasePlace = BasePlace ( client = self . _client , place_id = data [ \"universeRootPlaceId\" ]) self . price : int = data [ \"price\" ] self . image_token : str = data [ \"imageToken\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ]","title":"__init__()"},{"location":"reference/roblox/places/#roblox.places.Place.__repr__","text":"Source code in roblox/places.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/plugins/","text":"roblox.plugins \u00b6 This module contains classes intended to parse and deal with data from Roblox plugin information endpoints. Plugin ( BasePlugin ) \u00b6 Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins . Attributes: Name Type Description id int The ID of the plugin. name str The name of the plugin. description str The plugin's description. comments_enabled bool Whether comments are enabled or disabled. version_id int The plugin's current version ID. created datetime When the plugin was created. updated datetime When the plugin was updated. Source code in roblox/plugins.py class Plugin ( BasePlugin ): \"\"\" Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins. Attributes: id: The ID of the plugin. name: The name of the plugin. description: The plugin's description. comments_enabled: Whether comments are enabled or disabled. version_id: The plugin's current version ID. created: When the plugin was created. updated: When the plugin was updated. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Attributes: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Attributes: Name Type Description client The Client object, which is passed to all objects this Client generates. data data to make the magic happen. Source code in roblox/plugins.py def __init__ ( self , client : Client , data : dict ): \"\"\" Attributes: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/plugins.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"plugins"},{"location":"reference/roblox/plugins/#roblox.plugins","text":"This module contains classes intended to parse and deal with data from Roblox plugin information endpoints.","title":"plugins"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin","text":"Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins . Attributes: Name Type Description id int The ID of the plugin. name str The name of the plugin. description str The plugin's description. comments_enabled bool Whether comments are enabled or disabled. version_id int The plugin's current version ID. created datetime When the plugin was created. updated datetime When the plugin was updated. Source code in roblox/plugins.py class Plugin ( BasePlugin ): \"\"\" Represents a Roblox plugin. It is intended to parse data from https://develop.roblox.com/v1/plugins. Attributes: id: The ID of the plugin. name: The name of the plugin. description: The plugin's description. comments_enabled: Whether comments are enabled or disabled. version_id: The plugin's current version ID. created: When the plugin was created. updated: When the plugin was updated. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Attributes: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"Plugin"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin.__init__","text":"Attributes: Name Type Description client The Client object, which is passed to all objects this Client generates. data data to make the magic happen. Source code in roblox/plugins.py def __init__ ( self , client : Client , data : dict ): \"\"\" Attributes: client: The Client object, which is passed to all objects this Client generates. data: data to make the magic happen. \"\"\" super () . __init__ ( client = client , plugin_id = data [ \"id\" ]) self . id : int = data [ \"id\" ] self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . comments_enabled : bool = data [ \"commentsEnabled\" ] self . version_id : int = data [ \"versionId\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ])","title":"__init__()"},{"location":"reference/roblox/plugins/#roblox.plugins.Plugin.__repr__","text":"Source code in roblox/plugins.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/presence/","text":"roblox.presence \u00b6 This module contains classes intended to parse and deal with data from Roblox presence endpoints. Presence \u00b6 Represents a user's presence. Attributes: Name Type Description user_presence_type PresenceType The type of the presence. last_location str A string representing the user's last location. place Optional[BasePlace] The place the user is playing or editing. root_place Optional[BasePlace] The root place of the parent universe of the last place the user is playing or editing. job Optional[BaseJob] The job of the root place that the user is playing or editing. universe Optional[BaseUniverse] The universe the user is playing or editing. last_online datetime When the user was last online. Source code in roblox/presence.py class Presence : \"\"\" Represents a user's presence. Attributes: user_presence_type: The type of the presence. last_location: A string representing the user's last location. place: The place the user is playing or editing. root_place: The root place of the parent universe of the last place the user is playing or editing. job: The job of the root place that the user is playing or editing. universe: The universe the user is playing or editing. last_online: When the user was last online. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . user_presence_type : PresenceType = PresenceType ( data [ \"userPresenceType\" ]) self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"placeId\" ] ) if data . get ( \"placeId\" ) else None self . root_place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ] ) if data . get ( \"rootPlaceId\" ) else None self . job : Optional [ BaseJob ] = BaseJob ( self . _client , data [ \"gameId\" ]) if data . get ( \"gameId\" ) else None self . universe : Optional [ BaseUniverse ] = BaseUniverse ( client = client , universe_id = data [ \"universeId\" ] ) if data . get ( \"universeId\" ) else None # self.user: BaseUser = BaseUser(self._client, data[\"userId\"]) self . last_online : datetime = parse ( data [ \"lastOnline\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/presence.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . user_presence_type : PresenceType = PresenceType ( data [ \"userPresenceType\" ]) self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"placeId\" ] ) if data . get ( \"placeId\" ) else None self . root_place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ] ) if data . get ( \"rootPlaceId\" ) else None self . job : Optional [ BaseJob ] = BaseJob ( self . _client , data [ \"gameId\" ]) if data . get ( \"gameId\" ) else None self . universe : Optional [ BaseUniverse ] = BaseUniverse ( client = client , universe_id = data [ \"universeId\" ] ) if data . get ( \"universeId\" ) else None # self.user: BaseUser = BaseUser(self._client, data[\"userId\"]) self . last_online : datetime = parse ( data [ \"lastOnline\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/presence.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\" PresenceProvider \u00b6 The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. Source code in roblox/presence.py class PresenceProvider : \"\"\" The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. \"\"\" def __init__ ( self , client : Client ): self . _client : Client = client async def get_user_presences ( self , users : List [ UserOrUserId ]) -> List [ Presence ]: \"\"\" Grabs a list of Presence objects corresponding to each user in the list. Arguments: users: The list of users you want to get Presences from. Returns: A list of Presences. \"\"\" presences_response = await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : list ( map ( int , users )) } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( client = self . _client , data = presence_data ) for presence_data in presences_data ] __init__ ( self , client : Client ) special \u00b6 Source code in roblox/presence.py def __init__ ( self , client : Client ): self . _client : Client = client get_user_presences ( self , users : List [ UserOrUserId ]) -> List [ Presence ] async \u00b6 Grabs a list of Presence objects corresponding to each user in the list. Parameters: Name Type Description Default users List[UserOrUserId] The list of users you want to get Presences from. required Returns: Type Description List[Presence] A list of Presences. Source code in roblox/presence.py async def get_user_presences ( self , users : List [ UserOrUserId ]) -> List [ Presence ]: \"\"\" Grabs a list of Presence objects corresponding to each user in the list. Arguments: users: The list of users you want to get Presences from. Returns: A list of Presences. \"\"\" presences_response = await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : list ( map ( int , users )) } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( client = self . _client , data = presence_data ) for presence_data in presences_data ] PresenceType ( IntEnum ) \u00b6 Represents a user's presence type. Source code in roblox/presence.py class PresenceType ( IntEnum ): \"\"\" Represents a user's presence type. \"\"\" offline = 0 online = 1 in_game = 2 in_studio = 3 in_game \u00b6 in_studio \u00b6 offline \u00b6 online \u00b6","title":"presence"},{"location":"reference/roblox/presence/#roblox.presence","text":"This module contains classes intended to parse and deal with data from Roblox presence endpoints.","title":"presence"},{"location":"reference/roblox/presence/#roblox.presence.Presence","text":"Represents a user's presence. Attributes: Name Type Description user_presence_type PresenceType The type of the presence. last_location str A string representing the user's last location. place Optional[BasePlace] The place the user is playing or editing. root_place Optional[BasePlace] The root place of the parent universe of the last place the user is playing or editing. job Optional[BaseJob] The job of the root place that the user is playing or editing. universe Optional[BaseUniverse] The universe the user is playing or editing. last_online datetime When the user was last online. Source code in roblox/presence.py class Presence : \"\"\" Represents a user's presence. Attributes: user_presence_type: The type of the presence. last_location: A string representing the user's last location. place: The place the user is playing or editing. root_place: The root place of the parent universe of the last place the user is playing or editing. job: The job of the root place that the user is playing or editing. universe: The universe the user is playing or editing. last_online: When the user was last online. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . user_presence_type : PresenceType = PresenceType ( data [ \"userPresenceType\" ]) self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"placeId\" ] ) if data . get ( \"placeId\" ) else None self . root_place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ] ) if data . get ( \"rootPlaceId\" ) else None self . job : Optional [ BaseJob ] = BaseJob ( self . _client , data [ \"gameId\" ]) if data . get ( \"gameId\" ) else None self . universe : Optional [ BaseUniverse ] = BaseUniverse ( client = client , universe_id = data [ \"universeId\" ] ) if data . get ( \"universeId\" ) else None # self.user: BaseUser = BaseUser(self._client, data[\"userId\"]) self . last_online : datetime = parse ( data [ \"lastOnline\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\"","title":"Presence"},{"location":"reference/roblox/presence/#roblox.presence.Presence.__init__","text":"Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/presence.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . user_presence_type : PresenceType = PresenceType ( data [ \"userPresenceType\" ]) self . last_location : str = data [ \"lastLocation\" ] self . place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"placeId\" ] ) if data . get ( \"placeId\" ) else None self . root_place : Optional [ BasePlace ] = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ] ) if data . get ( \"rootPlaceId\" ) else None self . job : Optional [ BaseJob ] = BaseJob ( self . _client , data [ \"gameId\" ]) if data . get ( \"gameId\" ) else None self . universe : Optional [ BaseUniverse ] = BaseUniverse ( client = client , universe_id = data [ \"universeId\" ] ) if data . get ( \"universeId\" ) else None # self.user: BaseUser = BaseUser(self._client, data[\"userId\"]) self . last_online : datetime = parse ( data [ \"lastOnline\" ])","title":"__init__()"},{"location":"reference/roblox/presence/#roblox.presence.Presence.__repr__","text":"Source code in roblox/presence.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } user_presence_type= { self . user_presence_type } >\"","title":"__repr__()"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider","text":"The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. Source code in roblox/presence.py class PresenceProvider : \"\"\" The PresenceProvider is an object that represents https://presence.roblox.com/ and provides multiple functions for fetching user presence information. \"\"\" def __init__ ( self , client : Client ): self . _client : Client = client async def get_user_presences ( self , users : List [ UserOrUserId ]) -> List [ Presence ]: \"\"\" Grabs a list of Presence objects corresponding to each user in the list. Arguments: users: The list of users you want to get Presences from. Returns: A list of Presences. \"\"\" presences_response = await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : list ( map ( int , users )) } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( client = self . _client , data = presence_data ) for presence_data in presences_data ]","title":"PresenceProvider"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider.__init__","text":"Source code in roblox/presence.py def __init__ ( self , client : Client ): self . _client : Client = client","title":"__init__()"},{"location":"reference/roblox/presence/#roblox.presence.PresenceProvider.get_user_presences","text":"Grabs a list of Presence objects corresponding to each user in the list. Parameters: Name Type Description Default users List[UserOrUserId] The list of users you want to get Presences from. required Returns: Type Description List[Presence] A list of Presences. Source code in roblox/presence.py async def get_user_presences ( self , users : List [ UserOrUserId ]) -> List [ Presence ]: \"\"\" Grabs a list of Presence objects corresponding to each user in the list. Arguments: users: The list of users you want to get Presences from. Returns: A list of Presences. \"\"\" presences_response = await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"presence\" , \"v1/presence/users\" ), json = { \"userIds\" : list ( map ( int , users )) } ) presences_data = presences_response . json ()[ \"userPresences\" ] return [ Presence ( client = self . _client , data = presence_data ) for presence_data in presences_data ]","title":"get_user_presences()"},{"location":"reference/roblox/presence/#roblox.presence.PresenceType","text":"Represents a user's presence type. Source code in roblox/presence.py class PresenceType ( IntEnum ): \"\"\" Represents a user's presence type. \"\"\" offline = 0 online = 1 in_game = 2 in_studio = 3","title":"PresenceType"},{"location":"reference/roblox/presence/#roblox.presence.PresenceType.in_game","text":"","title":"in_game"},{"location":"reference/roblox/presence/#roblox.presence.PresenceType.in_studio","text":"","title":"in_studio"},{"location":"reference/roblox/presence/#roblox.presence.PresenceType.offline","text":"","title":"offline"},{"location":"reference/roblox/presence/#roblox.presence.PresenceType.online","text":"","title":"online"},{"location":"reference/roblox/promotionchannels/","text":"roblox.promotionchannels \u00b6 This module contains classes intended to parse and deal with data from Roblox promotion channel endpoints. UserPromotionChannels \u00b6 Represents a user's promotion channels. Attributes: Name Type Description facebook Optional[str] A link to the user's Facebook profile. twitter Optional[str] A Twitter handle. youtube Optional[str] A link to the user's YouTube channel. twitch Optional[str] A link to the user's Twitch channel. Source code in roblox/promotionchannels.py class UserPromotionChannels : \"\"\" Represents a user's promotion channels. Attributes: facebook: A link to the user's Facebook profile. twitter: A Twitter handle. youtube: A link to the user's YouTube channel. twitch: A link to the user's Twitch channel. \"\"\" def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ] self . guilded : Optional [ str ] = data [ \"guilded\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\" __init__ ( self , data : dict ) special \u00b6 Source code in roblox/promotionchannels.py def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ] self . guilded : Optional [ str ] = data [ \"guilded\" ] __repr__ ( self ) special \u00b6 Source code in roblox/promotionchannels.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"promotionchannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels","text":"This module contains classes intended to parse and deal with data from Roblox promotion channel endpoints.","title":"promotionchannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels","text":"Represents a user's promotion channels. Attributes: Name Type Description facebook Optional[str] A link to the user's Facebook profile. twitter Optional[str] A Twitter handle. youtube Optional[str] A link to the user's YouTube channel. twitch Optional[str] A link to the user's Twitch channel. Source code in roblox/promotionchannels.py class UserPromotionChannels : \"\"\" Represents a user's promotion channels. Attributes: facebook: A link to the user's Facebook profile. twitter: A Twitter handle. youtube: A link to the user's YouTube channel. twitch: A link to the user's Twitch channel. \"\"\" def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ] self . guilded : Optional [ str ] = data [ \"guilded\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"UserPromotionChannels"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels.__init__","text":"Source code in roblox/promotionchannels.py def __init__ ( self , data : dict ): self . facebook : Optional [ str ] = data [ \"facebook\" ] self . twitter : Optional [ str ] = data [ \"twitter\" ] self . youtube : Optional [ str ] = data [ \"youtube\" ] self . twitch : Optional [ str ] = data [ \"twitch\" ] self . guilded : Optional [ str ] = data [ \"guilded\" ]","title":"__init__()"},{"location":"reference/roblox/promotionchannels/#roblox.promotionchannels.UserPromotionChannels.__repr__","text":"Source code in roblox/promotionchannels.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } >\"","title":"__repr__()"},{"location":"reference/roblox/resale/","text":"roblox.resale \u00b6 Contains classes related to Roblox resale. AssetResaleData \u00b6 Represents an asset's resale data. Attributes: Name Type Description asset_stock int The asset's stock. sales int The asset's sales. number_remaining int On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price int The item's recent average price. original_price int What price this item was originally sold at. price_data_points List[dict] A list of tuples containing a limited item's price points over time. Source code in roblox/resale.py class AssetResaleData : \"\"\" Represents an asset's resale data. Attributes: asset_stock: The asset's stock. sales: The asset's sales. number_remaining: On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price: The item's recent average price. original_price: What price this item was originally sold at. price_data_points: A list of tuples containing a limited item's price points over time. \"\"\" def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ] __init__ ( self , data : dict ) special \u00b6 Source code in roblox/resale.py def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ]","title":"resale"},{"location":"reference/roblox/resale/#roblox.resale","text":"Contains classes related to Roblox resale.","title":"resale"},{"location":"reference/roblox/resale/#roblox.resale.AssetResaleData","text":"Represents an asset's resale data. Attributes: Name Type Description asset_stock int The asset's stock. sales int The asset's sales. number_remaining int On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price int The item's recent average price. original_price int What price this item was originally sold at. price_data_points List[dict] A list of tuples containing a limited item's price points over time. Source code in roblox/resale.py class AssetResaleData : \"\"\" Represents an asset's resale data. Attributes: asset_stock: The asset's stock. sales: The asset's sales. number_remaining: On a Limited U item that hasn't ran out, this is the amount remaining. recent_average_price: The item's recent average price. original_price: What price this item was originally sold at. price_data_points: A list of tuples containing a limited item's price points over time. \"\"\" def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ]","title":"AssetResaleData"},{"location":"reference/roblox/resale/#roblox.resale.AssetResaleData.__init__","text":"Source code in roblox/resale.py def __init__ ( self , data : dict ): self . asset_stock : int = data [ \"assetStock\" ] self . sales : int = data [ \"sales\" ] self . number_remaining : int = data [ \"numberRemaining\" ] self . recent_average_price : int = data [ \"recentAveragePrice\" ] self . original_price : int = data [ \"originalPrice\" ] self . price_data_points : List [ dict ] = data [ \"priceDataPoints\" ]","title":"__init__()"},{"location":"reference/roblox/robloxbadges/","text":"roblox.robloxbadges \u00b6 This module contains classes intended to parse and deal with data from Roblox badge endpoints. RobloxBadge ( BaseRobloxBadge ) \u00b6 Represents a Roblox roblox badge. Attributes: Name Type Description id int The badge's ID. name str The badge's name. description str The badge's description. image_url str A link to the badge's image. Source code in roblox/robloxbadges.py class RobloxBadge ( BaseRobloxBadge ): \"\"\" Represents a Roblox roblox badge. Attributes: id: The badge's ID. name: The badge's name. description: The badge's description. image_url: A link to the badge's image. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/robloxbadges.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ] __repr__ ( self ) special \u00b6 Source code in roblox/robloxbadges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\"","title":"robloxbadges"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges","text":"This module contains classes intended to parse and deal with data from Roblox badge endpoints.","title":"robloxbadges"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge","text":"Represents a Roblox roblox badge. Attributes: Name Type Description id int The badge's ID. name str The badge's name. description str The badge's description. image_url str A link to the badge's image. Source code in roblox/robloxbadges.py class RobloxBadge ( BaseRobloxBadge ): \"\"\" Represents a Roblox roblox badge. Attributes: id: The badge's ID. name: The badge's name. description: The badge's description. image_url: A link to the badge's image. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\"","title":"RobloxBadge"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge.__init__","text":"Source code in roblox/robloxbadges.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , roblox_badge_id = self . id ) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . image_url : str = data [ \"imageUrl\" ]","title":"__init__()"},{"location":"reference/roblox/robloxbadges/#roblox.robloxbadges.RobloxBadge.__repr__","text":"Source code in roblox/robloxbadges.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/roles/","text":"roblox.roles \u00b6 This module contains classes intended to parse and deal with data from Roblox group role endpoints. Role ( BaseRole ) \u00b6 Represents a Roblox group's role. Attributes: Name Type Description id int The role's ID. group Optional[BaseGroup] The group that this role is a part of. name str The role's name. description Optional[str] The role's description. rank int The rank, from 0-255, of this role. member_count Optional[int] How many members exist with this role. Source code in roblox/roles.py class Role ( BaseRole ): \"\"\" Represents a Roblox group's role. Attributes: id: The role's ID. group: The group that this role is a part of. name: The role's name. description: The role's description. rank: The rank, from 0-255, of this role. member_count: How many members exist with this role. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup = None ): \"\"\" Arguments: client: The Client object. data: The raw role data. group: The parent group. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\" def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members with this role. Arguments: page_size: How many users should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : PartialUser ( client = client , data = data ) ) __init__ ( self , client : Client , data : dict , group : BaseGroup = None ) special \u00b6 Parameters: Name Type Description Default client Client The Client object. required data dict The raw role data. required group BaseGroup The parent group. None Source code in roblox/roles.py def __init__ ( self , client : Client , data : dict , group : BaseGroup = None ): \"\"\" Arguments: client: The Client object. data: The raw role data. group: The parent group. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" ) __repr__ ( self ) special \u00b6 Source code in roblox/roles.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\" get_members ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets all members with this role. Parameters: Name Type Description Default page_size int How many users should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing all members with this role. Source code in roblox/roles.py def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members with this role. Arguments: page_size: How many users should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : PartialUser ( client = client , data = data ) )","title":"roles"},{"location":"reference/roblox/roles/#roblox.roles","text":"This module contains classes intended to parse and deal with data from Roblox group role endpoints.","title":"roles"},{"location":"reference/roblox/roles/#roblox.roles.Role","text":"Represents a Roblox group's role. Attributes: Name Type Description id int The role's ID. group Optional[BaseGroup] The group that this role is a part of. name str The role's name. description Optional[str] The role's description. rank int The rank, from 0-255, of this role. member_count Optional[int] How many members exist with this role. Source code in roblox/roles.py class Role ( BaseRole ): \"\"\" Represents a Roblox group's role. Attributes: id: The role's ID. group: The group that this role is a part of. name: The role's name. description: The role's description. rank: The rank, from 0-255, of this role. member_count: How many members exist with this role. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup = None ): \"\"\" Arguments: client: The Client object. data: The raw role data. group: The parent group. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\" def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members with this role. Arguments: page_size: How many users should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : PartialUser ( client = client , data = data ) )","title":"Role"},{"location":"reference/roblox/roles/#roblox.roles.Role.__init__","text":"Parameters: Name Type Description Default client Client The Client object. required data dict The raw role data. required group BaseGroup The parent group. None Source code in roblox/roles.py def __init__ ( self , client : Client , data : dict , group : BaseGroup = None ): \"\"\" Arguments: client: The Client object. data: The raw role data. group: The parent group. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . group : Optional [ BaseGroup ] = group self . name : str = data [ \"name\" ] self . description : Optional [ str ] = data . get ( \"description\" ) self . rank : int = data [ \"rank\" ] self . member_count : Optional [ int ] = data . get ( \"memberCount\" )","title":"__init__()"},{"location":"reference/roblox/roles/#roblox.roles.Role.__repr__","text":"Source code in roblox/roles.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } name= { self . name !r} rank= { self . rank } member_count= { self . member_count } >\"","title":"__repr__()"},{"location":"reference/roblox/roles/#roblox.roles.Role.get_members","text":"Gets all members with this role. Parameters: Name Type Description Default page_size int How many users should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing all members with this role. Source code in roblox/roles.py def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members with this role. Arguments: page_size: How many users should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing all members with this role. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /roles/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : PartialUser ( client = client , data = data ) )","title":"get_members()"},{"location":"reference/roblox/shout/","text":"roblox.shout \u00b6 Contains the Shout object, which represents a group's shout. Shout \u00b6 Represents a Group Shout. Attributes: Name Type Description body str The text of the shout. created datetime When the shout was created. updated datetime When the shout was updated. poster PartialUser Who posted the shout. Source code in roblox/shout.py class Shout : \"\"\" Represents a Group Shout. Attributes: body: The text of the shout. created: When the shout was created. updated: When the shout was updated. poster: Who posted the shout. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( client = self . _client , data = data [ \"poster\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/shout.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( client = self . _client , data = data [ \"poster\" ] ) __repr__ ( self ) special \u00b6 Source code in roblox/shout.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\"","title":"shout"},{"location":"reference/roblox/shout/#roblox.shout","text":"Contains the Shout object, which represents a group's shout.","title":"shout"},{"location":"reference/roblox/shout/#roblox.shout.Shout","text":"Represents a Group Shout. Attributes: Name Type Description body str The text of the shout. created datetime When the shout was created. updated datetime When the shout was updated. poster PartialUser Who posted the shout. Source code in roblox/shout.py class Shout : \"\"\" Represents a Group Shout. Attributes: body: The text of the shout. created: When the shout was created. updated: When the shout was updated. poster: Who posted the shout. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( client = self . _client , data = data [ \"poster\" ] ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\"","title":"Shout"},{"location":"reference/roblox/shout/#roblox.shout.Shout.__init__","text":"Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/shout.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . poster : PartialUser = PartialUser ( client = self . _client , data = data [ \"poster\" ] )","title":"__init__()"},{"location":"reference/roblox/shout/#roblox.shout.Shout.__repr__","text":"Source code in roblox/shout.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } created= { self . created } updated= { self . updated } body= { self . body !r} \" \\ f \"poster= { self . poster !r} >\"","title":"__repr__()"},{"location":"reference/roblox/sociallinks/","text":"roblox.sociallinks \u00b6 Contains objects related to Roblox social links. SocialLink ( BaseUniverseSocialLink ) \u00b6 Represents a universe or group's social links. Attributes: Name Type Description id int The social link's ID. title str The social link's title. url str The social link's URL. type SocialLinkType The social link's type. Source code in roblox/sociallinks.py class SocialLink ( BaseUniverseSocialLink ): \"\"\" Represents a universe or group's social links. Attributes: id: The social link's ID. title: The social link's title. url: The social link's URL. type: The social link's type. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/sociallinks.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/sociallinks.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \" SocialLinkType ( Enum ) \u00b6 Represents a type of social link. Source code in roblox/sociallinks.py class SocialLinkType ( Enum ): \"\"\" Represents a type of social link. \"\"\" facebook = \"Facebook\" twitter = \"Twitter\" youtube = \"YouTube\" twitch = \"Twitch\" discord = \"Discord\" roblox_group = \"RobloxGroup\" discord \u00b6 facebook \u00b6 roblox_group \u00b6 twitch \u00b6 twitter \u00b6 youtube \u00b6","title":"sociallinks"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks","text":"Contains objects related to Roblox social links.","title":"sociallinks"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLink","text":"Represents a universe or group's social links. Attributes: Name Type Description id int The social link's ID. title str The social link's title. url str The social link's URL. type SocialLinkType The social link's type. Source code in roblox/sociallinks.py class SocialLink ( BaseUniverseSocialLink ): \"\"\" Represents a universe or group's social links. Attributes: id: The social link's ID. title: The social link's title. url: The social link's URL. type: The social link's type. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \"","title":"SocialLink"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLink.__init__","text":"Source code in roblox/sociallinks.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , social_link_id = self . id ) self . title : str = data [ \"title\" ] self . url : str = data [ \"url\" ] self . type : SocialLinkType = SocialLinkType ( data [ \"type\" ])","title":"__init__()"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLink.__repr__","text":"Source code in roblox/sociallinks.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } url= { self . url !r} type= { self . type !r} title= { self . title !r} \"","title":"__repr__()"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType","text":"Represents a type of social link. Source code in roblox/sociallinks.py class SocialLinkType ( Enum ): \"\"\" Represents a type of social link. \"\"\" facebook = \"Facebook\" twitter = \"Twitter\" youtube = \"YouTube\" twitch = \"Twitch\" discord = \"Discord\" roblox_group = \"RobloxGroup\"","title":"SocialLinkType"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.discord","text":"","title":"discord"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.facebook","text":"","title":"facebook"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.roblox_group","text":"","title":"roblox_group"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.twitch","text":"","title":"twitch"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.twitter","text":"","title":"twitter"},{"location":"reference/roblox/sociallinks/#roblox.sociallinks.SocialLinkType.youtube","text":"","title":"youtube"},{"location":"reference/roblox/threedthumbnails/","text":"roblox.threedthumbnails \u00b6 Contains classes related to 3D thumbnails. ThreeDThumbnail \u00b6 Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails . Attributes: Name Type Description mtl ThumbnailCDNHash A CDN hash pointing to the MTL data. obj ThumbnailCDNHash A CDN hash pointing to the OBJ data. textures List[ThumbnailCDNHash] A list of CDN hashes pointing to PNG texture data. camera ThreeDThumbnailCamera The camera object. aabb ThreeDThumbnailAABB The AABB object. Source code in roblox/threedthumbnails.py class ThreeDThumbnail : \"\"\" Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails. Attributes: mtl: A CDN hash pointing to the MTL data. obj: A CDN hash pointing to the OBJ data. textures: A list of CDN hashes pointing to PNG texture data. camera: The camera object. aabb: The AABB object. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . mtl : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _client . delivery . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ]) __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . mtl : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _client . delivery . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ]) ThreeDThumbnailAABB \u00b6 Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. THREE . Vector3 ( json . aabb . max . x , json . aabb . max . y , json . aabb . max . z ). length () * 4 ; Attributes: Name Type Description min ThreeDThumbnailVector3 The minimum render position. max ThreeDThumbnailVector3 The maximum render position. Source code in roblox/threedthumbnails.py class ThreeDThumbnailAABB : \"\"\" Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. ```js THREE.Vector3(json.aabb.max.x, json.aabb.max.y, json.aabb.max.z).length() * 4; ``` Attributes: min: The minimum render position. max: The maximum render position. \"\"\" def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ]) __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ]) ThreeDThumbnailCamera \u00b6 Represents a camera in a 3D thumbnail. Attributes: Name Type Description fov float The camera's field of view. position ThreeDThumbnailVector3 The camera's position. direction ThreeDThumbnailVector3 The camera's direction. Source code in roblox/threedthumbnails.py class ThreeDThumbnailCamera : \"\"\" Represents a camera in a 3D thumbnail. Attributes: fov: The camera's field of view. position: The camera's position. direction: The camera's direction. \"\"\" def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ]) __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ]) ThreeDThumbnailVector3 \u00b6 Represents a Vector3 used in a 3D thumbnail. Attributes: Name Type Description x float The X component of the vector. y float The Y component of the vector. z float The Z component of the vector. Source code in roblox/threedthumbnails.py class ThreeDThumbnailVector3 : \"\"\" Represents a Vector3 used in a 3D thumbnail. Attributes: x: The X component of the vector. y: The Y component of the vector. z: The Z component of the vector. \"\"\" def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ] __init__ ( self , data : dict ) special \u00b6 Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ]","title":"threedthumbnails"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails","text":"Contains classes related to 3D thumbnails.","title":"threedthumbnails"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnail","text":"Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails . Attributes: Name Type Description mtl ThumbnailCDNHash A CDN hash pointing to the MTL data. obj ThumbnailCDNHash A CDN hash pointing to the OBJ data. textures List[ThumbnailCDNHash] A list of CDN hashes pointing to PNG texture data. camera ThreeDThumbnailCamera The camera object. aabb ThreeDThumbnailAABB The AABB object. Source code in roblox/threedthumbnails.py class ThreeDThumbnail : \"\"\" Represents a user's 3D Thumbnail data. For more info, see https://robloxapi.wiki/wiki/3D_Thumbnails. Attributes: mtl: A CDN hash pointing to the MTL data. obj: A CDN hash pointing to the OBJ data. textures: A list of CDN hashes pointing to PNG texture data. camera: The camera object. aabb: The AABB object. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . mtl : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _client . delivery . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ])","title":"ThreeDThumbnail"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnail.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . mtl : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"mtl\" ]) self . obj : ThumbnailCDNHash = self . _client . delivery . get_thumbnail_cdn_hash ( data [ \"obj\" ]) self . textures : List [ ThumbnailCDNHash ] = [ self . _client . delivery . get_thumbnail_cdn_hash ( cdn_hash ) for cdn_hash in data [ \"textures\" ] ] self . camera : ThreeDThumbnailCamera = ThreeDThumbnailCamera ( data [ \"camera\" ]) self . aabb : ThreeDThumbnailAABB = ThreeDThumbnailAABB ( data [ \"aabb\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailAABB","text":"Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. THREE . Vector3 ( json . aabb . max . x , json . aabb . max . y , json . aabb . max . z ). length () * 4 ; Attributes: Name Type Description min ThreeDThumbnailVector3 The minimum render position. max ThreeDThumbnailVector3 The maximum render position. Source code in roblox/threedthumbnails.py class ThreeDThumbnailAABB : \"\"\" Represents AABB data in a 3D thumbnail. Roblox uses this data to calculate the maximum render distance used when rendering 3D thumbnails. ```js THREE.Vector3(json.aabb.max.x, json.aabb.max.y, json.aabb.max.z).length() * 4; ``` Attributes: min: The minimum render position. max: The maximum render position. \"\"\" def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ])","title":"ThreeDThumbnailAABB"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailAABB.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . min : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"min\" ]) self . max : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"max\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailCamera","text":"Represents a camera in a 3D thumbnail. Attributes: Name Type Description fov float The camera's field of view. position ThreeDThumbnailVector3 The camera's position. direction ThreeDThumbnailVector3 The camera's direction. Source code in roblox/threedthumbnails.py class ThreeDThumbnailCamera : \"\"\" Represents a camera in a 3D thumbnail. Attributes: fov: The camera's field of view. position: The camera's position. direction: The camera's direction. \"\"\" def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ])","title":"ThreeDThumbnailCamera"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailCamera.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . fov : float = data [ \"fov\" ] self . position : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"position\" ]) self . direction : ThreeDThumbnailVector3 = ThreeDThumbnailVector3 ( data [ \"direction\" ])","title":"__init__()"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailVector3","text":"Represents a Vector3 used in a 3D thumbnail. Attributes: Name Type Description x float The X component of the vector. y float The Y component of the vector. z float The Z component of the vector. Source code in roblox/threedthumbnails.py class ThreeDThumbnailVector3 : \"\"\" Represents a Vector3 used in a 3D thumbnail. Attributes: x: The X component of the vector. y: The Y component of the vector. z: The Z component of the vector. \"\"\" def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ]","title":"ThreeDThumbnailVector3"},{"location":"reference/roblox/threedthumbnails/#roblox.threedthumbnails.ThreeDThumbnailVector3.__init__","text":"Source code in roblox/threedthumbnails.py def __init__ ( self , data : dict ): self . x : float = data [ \"x\" ] self . y : float = data [ \"y\" ] self . z : float = data [ \"z\" ]","title":"__init__()"},{"location":"reference/roblox/thumbnails/","text":"roblox.thumbnails \u00b6 Contains objects related to Roblox thumbnails. SizeTupleOrString \u00b6 AvatarThumbnailType ( Enum ) \u00b6 Type of avatar thumbnail. Source code in roblox/thumbnails.py class AvatarThumbnailType ( Enum ): \"\"\" Type of avatar thumbnail. \"\"\" full_body = \"full_body\" headshot = \"headshot\" bust = \"bust\" bust \u00b6 full_body \u00b6 headshot \u00b6 Thumbnail \u00b6 Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/ . Attributes: Name Type Description target_id int The id of the target of the image. state ThumbnailState The current state of the image. image_url Optional[str] Url of the image. Source code in roblox/thumbnails.py class Thumbnail : \"\"\" Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/. Attributes: target_id: The id of the target of the image. state: The current state of the image. image_url: Url of the image. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\" async def get_3d_data ( self ) -> ThreeDThumbnail : \"\"\" Generates 3D thumbnail data for this endpoint. Returns: A ThreeDThumbnail. \"\"\" threed_response = await self . _client . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( client = self . _client , data = threed_data ) __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ] __repr__ ( self ) special \u00b6 Source code in roblox/thumbnails.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\" get_3d_data ( self ) -> ThreeDThumbnail async \u00b6 Generates 3D thumbnail data for this endpoint. Returns: Type Description ThreeDThumbnail A ThreeDThumbnail. Source code in roblox/thumbnails.py async def get_3d_data ( self ) -> ThreeDThumbnail : \"\"\" Generates 3D thumbnail data for this endpoint. Returns: A ThreeDThumbnail. \"\"\" threed_response = await self . _client . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( client = self . _client , data = threed_data ) ThumbnailFormat ( Enum ) \u00b6 Format returned by the endpoint. Source code in roblox/thumbnails.py class ThumbnailFormat ( Enum ): \"\"\" Format returned by the endpoint. \"\"\" png = \"Png\" jpeg = \"Jpeg\" jpeg \u00b6 png \u00b6 ThumbnailProvider \u00b6 The ThumbnailProvider that provides multiple functions for generating user thumbnails. Source code in roblox/thumbnails.py class ThumbnailProvider : \"\"\" The ThumbnailProvider that provides multiple functions for generating user thumbnails. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: Client object. \"\"\" self . _client : Client = client async def get_asset_thumbnails ( self , assets : List [ AssetOrAssetId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 30 , 30 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_asset_thumbnail_3d ( self , asset : AssetOrAssetId ) -> Thumbnail : \"\"\" Returns a 3D asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data ) async def get_badge_icons ( self , badges : List [ BadgeOrBadgeId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Arguments: badges: Badges you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_gamepass_icons ( self , gamepasses : List [ GamePassOrGamePassId ], # TODO Make size enum size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_universe_icons ( self , universes : List [ UniverseOrUniverseId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_universe_thumbnails ( self , universes : List [ UniverseOrUniverseId ], size : SizeTupleOrString = ( 768 , 432 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Arguments: universes: Universes you want the thumbnails of. size: size of the image. image_format: Format of the image. count_per_universe: Unknown. is_circular: If the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_group_icons ( self , groups : List [ GroupOrGroupId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Arguments: groups: Groups you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_place_icons ( self , places : List [ PlaceOrPlaceId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_user_avatar_thumbnails ( self , users : List [ UserOrUserId ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : SizeTupleOrString = None , image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatar thumbnails for each user ID passed. The valid sizes depend on the `type` parameter. | Size | full_body | headshot | bust | |---|---|---|---| | 30x30 | \u2714\ufe0f | \u274c | \u274c | | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f | | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c | | 140x140 | \u2714\ufe0f | \u274c | \u274c | | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 150x200 | \u2714\ufe0f | \u274c | \u274c | | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 250x250 | \u2714\ufe0f | \u274c | \u274c | | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 720x720 | \u2714\ufe0f | \u274c | \u274c | Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or ( 30 , 30 ) elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or ( 48 , 48 ) elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or ( 48 , 48 ) else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_user_avatar_thumbnail_3d ( self , user : UserOrUserId ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user ) }, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data ) __init__ ( self , client : Client ) special \u00b6 Parameters: Name Type Description Default client Client Client object. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: Client object. \"\"\" self . _client : Client = client get_asset_thumbnail_3d ( self , asset : AssetOrAssetId ) -> Thumbnail async \u00b6 Returns a 3D asset thumbnail for the user ID passed. Parameters: Name Type Description Default asset AssetOrAssetId Asset you want the thumbnails of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_asset_thumbnail_3d ( self , asset : AssetOrAssetId ) -> Thumbnail : \"\"\" Returns a 3D asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data ) get_asset_thumbnails ( self , assets : List [ AssetOrAssetId ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : SizeTupleOrString = ( 30 , 30 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Parameters: Name Type Description Default assets List[AssetOrAssetId] Assets you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (30, 30) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_asset_thumbnails ( self , assets : List [ AssetOrAssetId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 30 , 30 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_badge_icons ( self , badges : List [ BadgeOrBadgeId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Parameters: Name Type Description Default badges List[BadgeOrBadgeId] Badges you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_badge_icons ( self , badges : List [ BadgeOrBadgeId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Arguments: badges: Badges you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_gamepass_icons ( self , gamepasses : List [ GamePassOrGamePassId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Parameters: Name Type Description Default gamepasses List[GamePassOrGamePassId] Gamepasses you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_gamepass_icons ( self , gamepasses : List [ GamePassOrGamePassId ], # TODO Make size enum size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_group_icons ( self , groups : List [ GroupOrGroupId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Parameters: Name Type Description Default groups List[GroupOrGroupId] Groups you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_group_icons ( self , groups : List [ GroupOrGroupId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Arguments: groups: Groups you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_place_icons ( self , places : List [ PlaceOrPlaceId ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Parameters: Name Type Description Default places List[PlaceOrPlaceId] Places you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (50, 50) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_place_icons ( self , places : List [ PlaceOrPlaceId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_universe_icons ( self , universes : List [ UniverseOrUniverseId ], return_policy : ThumbnailReturnPolicy = < ThumbnailReturnPolicy . place_holder : 'PlaceHolder' > , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Parameters: Name Type Description Default universes List[UniverseOrUniverseId] Universes you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (50, 50) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_icons ( self , universes : List [ UniverseOrUniverseId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_universe_thumbnails ( self , universes : List [ UniverseOrUniverseId ], size : SizeTupleOrString = ( 768 , 432 ), image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None ) -> List [ UniverseThumbnails ] async \u00b6 Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Parameters: Name Type Description Default universes List[UniverseOrUniverseId] Universes you want the thumbnails of. required size SizeTupleOrString size of the image. (768, 432) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> count_per_universe int Unknown. None is_circular bool If the image is a circle yes or no. False defaults bool Whether to return default thumbnails. None Returns: Type Description List[UniverseThumbnails] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_thumbnails ( self , universes : List [ UniverseOrUniverseId ], size : SizeTupleOrString = ( 768 , 432 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Arguments: universes: Universes you want the thumbnails of. size: size of the image. image_format: Format of the image. count_per_universe: Unknown. is_circular: If the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] get_user_avatar_thumbnail_3d ( self , user : UserOrUserId ) -> Thumbnail async \u00b6 Returns the user's thumbnail in 3d. Parameters: Name Type Description Default user UserOrUserId User you want the 3d thumbnail of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_user_avatar_thumbnail_3d ( self , user : UserOrUserId ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user ) }, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data ) get_user_avatar_thumbnails ( self , users : List [ UserOrUserId ], type : AvatarThumbnailType = < AvatarThumbnailType . full_body : 'full_body' > , size : SizeTupleOrString = None , image_format : ThumbnailFormat = < ThumbnailFormat . png : 'Png' > , is_circular : bool = False ) -> List [ Thumbnail ] async \u00b6 Returns avatar thumbnails for each user ID passed. The valid sizes depend on the type parameter. Size full_body headshot bust 30x30 \u2714\ufe0f \u274c \u274c 48x48 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 50x50 \u274c \u2714\ufe0f \u2714\ufe0f 60x60 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 75x75 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 100x100 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 110x110 \u2714\ufe0f \u2714\ufe0f \u274c 140x140 \u2714\ufe0f \u274c \u274c 150x150 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 150x200 \u2714\ufe0f \u274c \u274c 180x180 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 250x250 \u2714\ufe0f \u274c \u274c 352x352 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 420x420 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 720x720 \u2714\ufe0f \u274c \u274c Parameters: Name Type Description Default users List[UserOrUserId] Id of the users you want the thumbnails of. required type AvatarThumbnailType Type of avatar thumbnail you want look at enum. <AvatarThumbnailType.full_body: 'full_body'> size SizeTupleOrString size of the image. None image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_user_avatar_thumbnails ( self , users : List [ UserOrUserId ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : SizeTupleOrString = None , image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatar thumbnails for each user ID passed. The valid sizes depend on the `type` parameter. | Size | full_body | headshot | bust | |---|---|---|---| | 30x30 | \u2714\ufe0f | \u274c | \u274c | | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f | | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c | | 140x140 | \u2714\ufe0f | \u274c | \u274c | | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 150x200 | \u2714\ufe0f | \u274c | \u274c | | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 250x250 | \u2714\ufe0f | \u274c | \u274c | | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 720x720 | \u2714\ufe0f | \u274c | \u274c | Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or ( 30 , 30 ) elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or ( 48 , 48 ) elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or ( 48 , 48 ) else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] ThumbnailReturnPolicy ( Enum ) \u00b6 The return policy for place/universe thumbnails. Source code in roblox/thumbnails.py class ThumbnailReturnPolicy ( Enum ): \"\"\" The return policy for place/universe thumbnails. \"\"\" place_holder = \"PlaceHolder\" auto_generated = \"AutoGenerated\" force_auto_generated = \"ForceAutoGenerated\" auto_generated \u00b6 force_auto_generated \u00b6 place_holder \u00b6 ThumbnailState ( Enum ) \u00b6 The current state of the thumbnail. Source code in roblox/thumbnails.py class ThumbnailState ( Enum ): \"\"\" The current state of the thumbnail. \"\"\" completed = \"Completed\" in_review = \"InReview\" pending = \"Pending\" error = \"Error\" moderated = \"Moderated\" blocked = \"Blocked\" blocked \u00b6 completed \u00b6 error \u00b6 in_review \u00b6 moderated \u00b6 pending \u00b6 UniverseThumbnails \u00b6 Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails . Attributes: Name Type Description universe_id int The id of the target of the image. error Optional[str] The errors you got. thumbnails List[Thumbnail] List of thumbnails. Source code in roblox/thumbnails.py class UniverseThumbnails : \"\"\" Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails. Attributes: universe_id: The id of the target of the image. error: The errors you got. thumbnails: List of thumbnails. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Shared object. data: The data from the request. \"\"\" self . _client : Client = client # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ] __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client Shared object. required data dict The data from the request. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Shared object. data: The data from the request. \"\"\" self . _client : Client = client # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ]","title":"thumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails","text":"Contains objects related to Roblox thumbnails.","title":"thumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.SizeTupleOrString","text":"","title":"SizeTupleOrString"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType","text":"Type of avatar thumbnail. Source code in roblox/thumbnails.py class AvatarThumbnailType ( Enum ): \"\"\" Type of avatar thumbnail. \"\"\" full_body = \"full_body\" headshot = \"headshot\" bust = \"bust\"","title":"AvatarThumbnailType"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.bust","text":"","title":"bust"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.full_body","text":"","title":"full_body"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.AvatarThumbnailType.headshot","text":"","title":"headshot"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail","text":"Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/ . Attributes: Name Type Description target_id int The id of the target of the image. state ThumbnailState The current state of the image. image_url Optional[str] Url of the image. Source code in roblox/thumbnails.py class Thumbnail : \"\"\" Represents a Roblox thumbnail as returned by almost all endpoints on https://thumbnails.roblox.com/. Attributes: target_id: The id of the target of the image. state: The current state of the image. image_url: Url of the image. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\" async def get_3d_data ( self ) -> ThreeDThumbnail : \"\"\" Generates 3D thumbnail data for this endpoint. Returns: A ThreeDThumbnail. \"\"\" threed_response = await self . _client . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( client = self . _client , data = threed_data )","title":"Thumbnail"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.__init__","text":"Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" self . _client : Client = client self . target_id : int = data [ \"targetId\" ] self . state : ThumbnailState = ThumbnailState ( data [ \"state\" ]) self . image_url : Optional [ str ] = data [ \"imageUrl\" ]","title":"__init__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.__repr__","text":"Source code in roblox/thumbnails.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } target_id= { self . target_id } name= { self . state !r} \" \\ f \"image_url= { self . image_url !r} >\"","title":"__repr__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.Thumbnail.get_3d_data","text":"Generates 3D thumbnail data for this endpoint. Returns: Type Description ThreeDThumbnail A ThreeDThumbnail. Source code in roblox/thumbnails.py async def get_3d_data ( self ) -> ThreeDThumbnail : \"\"\" Generates 3D thumbnail data for this endpoint. Returns: A ThreeDThumbnail. \"\"\" threed_response = await self . _client . requests . get ( url = self . image_url ) threed_data = threed_response . json () return ThreeDThumbnail ( client = self . _client , data = threed_data )","title":"get_3d_data()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat","text":"Format returned by the endpoint. Source code in roblox/thumbnails.py class ThumbnailFormat ( Enum ): \"\"\" Format returned by the endpoint. \"\"\" png = \"Png\" jpeg = \"Jpeg\"","title":"ThumbnailFormat"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat.jpeg","text":"","title":"jpeg"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailFormat.png","text":"","title":"png"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider","text":"The ThumbnailProvider that provides multiple functions for generating user thumbnails. Source code in roblox/thumbnails.py class ThumbnailProvider : \"\"\" The ThumbnailProvider that provides multiple functions for generating user thumbnails. \"\"\" def __init__ ( self , client : Client ): \"\"\" Arguments: client: Client object. \"\"\" self . _client : Client = client async def get_asset_thumbnails ( self , assets : List [ AssetOrAssetId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 30 , 30 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_asset_thumbnail_3d ( self , asset : AssetOrAssetId ) -> Thumbnail : \"\"\" Returns a 3D asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data ) async def get_badge_icons ( self , badges : List [ BadgeOrBadgeId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Arguments: badges: Badges you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_gamepass_icons ( self , gamepasses : List [ GamePassOrGamePassId ], # TODO Make size enum size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_universe_icons ( self , universes : List [ UniverseOrUniverseId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_universe_thumbnails ( self , universes : List [ UniverseOrUniverseId ], size : SizeTupleOrString = ( 768 , 432 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Arguments: universes: Universes you want the thumbnails of. size: size of the image. image_format: Format of the image. count_per_universe: Unknown. is_circular: If the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_group_icons ( self , groups : List [ GroupOrGroupId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Arguments: groups: Groups you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_place_icons ( self , places : List [ PlaceOrPlaceId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_user_avatar_thumbnails ( self , users : List [ UserOrUserId ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : SizeTupleOrString = None , image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatar thumbnails for each user ID passed. The valid sizes depend on the `type` parameter. | Size | full_body | headshot | bust | |---|---|---|---| | 30x30 | \u2714\ufe0f | \u274c | \u274c | | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f | | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c | | 140x140 | \u2714\ufe0f | \u274c | \u274c | | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 150x200 | \u2714\ufe0f | \u274c | \u274c | | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 250x250 | \u2714\ufe0f | \u274c | \u274c | | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 720x720 | \u2714\ufe0f | \u274c | \u274c | Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or ( 30 , 30 ) elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or ( 48 , 48 ) elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or ( 48 , 48 ) else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ] async def get_user_avatar_thumbnail_3d ( self , user : UserOrUserId ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user ) }, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data )","title":"ThumbnailProvider"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.__init__","text":"Parameters: Name Type Description Default client Client Client object. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client ): \"\"\" Arguments: client: Client object. \"\"\" self . _client : Client = client","title":"__init__()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnail_3d","text":"Returns a 3D asset thumbnail for the user ID passed. Parameters: Name Type Description Default asset AssetOrAssetId Asset you want the thumbnails of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_asset_thumbnail_3d ( self , asset : AssetOrAssetId ) -> Thumbnail : \"\"\" Returns a 3D asset thumbnail for the user ID passed. Arguments: asset: Asset you want the thumbnails of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets-thumbnail-3d\" ), params = { \"assetId\" : int ( asset )}, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data )","title":"get_asset_thumbnail_3d()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_asset_thumbnails","text":"Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Parameters: Name Type Description Default assets List[AssetOrAssetId] Assets you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (30, 30) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_asset_thumbnails ( self , assets : List [ AssetOrAssetId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 30 , 30 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns asset thumbnails for the asset ID passed. Supported sizes: - 30x30 - 42x42 - 50x50 - 60x62 - 75x75 - 110x110 - 140x140 - 150x150 - 160x100 - 160x600 - 250x250 - 256x144 - 300x250 - 304x166 - 384x216 - 396x216 - 420x420 - 480x270 - 512x512 - 576x324 - 700x700 - 728x90 - 768x432 Arguments: assets: Assets you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/assets\" ), params = { \"assetIds\" : list ( map ( int , assets )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_asset_thumbnails()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_badge_icons","text":"Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Parameters: Name Type Description Default badges List[BadgeOrBadgeId] Badges you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_badge_icons ( self , badges : List [ BadgeOrBadgeId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns badge icons for each badge ID passed. Supported sizes: - 150x150 Arguments: badges: Badges you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/badges/icons\" ), params = { \"badgeIds\" : list ( map ( int , badges )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_badge_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_gamepass_icons","text":"Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Parameters: Name Type Description Default gamepasses List[GamePassOrGamePassId] Gamepasses you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_gamepass_icons ( self , gamepasses : List [ GamePassOrGamePassId ], # TODO Make size enum size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns gamepass icons for each gamepass ID passed. Supported sizes: - 150x150 Arguments: gamepasses: Gamepasses you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/game-passes\" ), params = { \"gamePassIds\" : list ( map ( int , gamepasses )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_gamepass_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_group_icons","text":"Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Parameters: Name Type Description Default groups List[GroupOrGroupId] Groups you want the thumbnails of. required size SizeTupleOrString size of the image. (150, 150) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_group_icons ( self , groups : List [ GroupOrGroupId ], size : SizeTupleOrString = ( 150 , 150 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each group ID passed. Supported sizes: - 150x150 - 420x420 Arguments: groups: Groups you want the thumbnails of. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/groups/icons\" ), params = { \"groupIds\" : list ( map ( int , groups )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_group_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_place_icons","text":"Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Parameters: Name Type Description Default places List[PlaceOrPlaceId] Places you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (50, 50) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool if the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A List of Thumbnails. Source code in roblox/thumbnails.py async def get_place_icons ( self , places : List [ PlaceOrPlaceId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns icons for each place ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: places: Places you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: if the image is a circle yes or no. Returns: A List of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/places/gameicons\" ), params = { \"placeIds\" : list ( map ( int , places )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_place_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_icons","text":"Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Parameters: Name Type Description Default universes List[UniverseOrUniverseId] Universes you want the thumbnails of. required return_policy ThumbnailReturnPolicy How you want it returns look at enum. <ThumbnailReturnPolicy.place_holder: 'PlaceHolder'> size SizeTupleOrString size of the image. (50, 50) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_icons ( self , universes : List [ UniverseOrUniverseId ], return_policy : ThumbnailReturnPolicy = ThumbnailReturnPolicy . place_holder , size : SizeTupleOrString = ( 50 , 50 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns universe icons for each universe ID passed. Supported sizes: - 50x50 - 128x128 - 150x150 - 256x256 - 512x512 - 768x432 Arguments: universes: Universes you want the thumbnails of. return_policy: How you want it returns look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/icons\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"returnPolicy\" : return_policy . value , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_universe_icons()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_universe_thumbnails","text":"Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Parameters: Name Type Description Default universes List[UniverseOrUniverseId] Universes you want the thumbnails of. required size SizeTupleOrString size of the image. (768, 432) image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> count_per_universe int Unknown. None is_circular bool If the image is a circle yes or no. False defaults bool Whether to return default thumbnails. None Returns: Type Description List[UniverseThumbnails] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_universe_thumbnails ( self , universes : List [ UniverseOrUniverseId ], size : SizeTupleOrString = ( 768 , 432 ), image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , count_per_universe : int = None , defaults : bool = None , ) -> List [ UniverseThumbnails ]: \"\"\" Returns universe thumbnails for each universe ID passed. Supported sizes: - 768x432 - 576x324 - 480x270 - 384x216 - 256x144 Arguments: universes: Universes you want the thumbnails of. size: size of the image. image_format: Format of the image. count_per_universe: Unknown. is_circular: If the image is a circle yes or no. defaults: Whether to return default thumbnails. Returns: A list of Thumbnails. \"\"\" thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/games/multiget/thumbnails\" ), params = { \"universeIds\" : list ( map ( int , universes )), \"countPerUniverse\" : count_per_universe , \"defaults\" : defaults , \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ UniverseThumbnails ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_universe_thumbnails()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatar_thumbnail_3d","text":"Returns the user's thumbnail in 3d. Parameters: Name Type Description Default user UserOrUserId User you want the 3d thumbnail of. required Returns: Type Description Thumbnail A Thumbnail. Source code in roblox/thumbnails.py async def get_user_avatar_thumbnail_3d ( self , user : UserOrUserId ) -> Thumbnail : \"\"\" Returns the user's thumbnail in 3d. Arguments: user: User you want the 3d thumbnail of. Returns: A Thumbnail. \"\"\" thumbnail_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , \"v1/users/avatar-3d\" ), params = { \"userId\" : int ( user ) }, ) thumbnail_data = thumbnail_response . json () return Thumbnail ( client = self . _client , data = thumbnail_data )","title":"get_user_avatar_thumbnail_3d()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailProvider.get_user_avatar_thumbnails","text":"Returns avatar thumbnails for each user ID passed. The valid sizes depend on the type parameter. Size full_body headshot bust 30x30 \u2714\ufe0f \u274c \u274c 48x48 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 50x50 \u274c \u2714\ufe0f \u2714\ufe0f 60x60 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 75x75 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 100x100 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 110x110 \u2714\ufe0f \u2714\ufe0f \u274c 140x140 \u2714\ufe0f \u274c \u274c 150x150 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 150x200 \u2714\ufe0f \u274c \u274c 180x180 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 250x250 \u2714\ufe0f \u274c \u274c 352x352 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 420x420 \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f 720x720 \u2714\ufe0f \u274c \u274c Parameters: Name Type Description Default users List[UserOrUserId] Id of the users you want the thumbnails of. required type AvatarThumbnailType Type of avatar thumbnail you want look at enum. <AvatarThumbnailType.full_body: 'full_body'> size SizeTupleOrString size of the image. None image_format ThumbnailFormat Format of the image. <ThumbnailFormat.png: 'Png'> is_circular bool If the image is a circle yes or no. False Returns: Type Description List[Thumbnail] A list of Thumbnails. Source code in roblox/thumbnails.py async def get_user_avatar_thumbnails ( self , users : List [ UserOrUserId ], type : AvatarThumbnailType = AvatarThumbnailType . full_body , size : SizeTupleOrString = None , image_format : ThumbnailFormat = ThumbnailFormat . png , is_circular : bool = False , ) -> List [ Thumbnail ]: \"\"\" Returns avatar thumbnails for each user ID passed. The valid sizes depend on the `type` parameter. | Size | full_body | headshot | bust | |---|---|---|---| | 30x30 | \u2714\ufe0f | \u274c | \u274c | | 48x48 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 50x50 | \u274c | \u2714\ufe0f | \u2714\ufe0f | | 60x60 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 75x75 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 100x100 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 110x110 | \u2714\ufe0f | \u2714\ufe0f | \u274c | | 140x140 | \u2714\ufe0f | \u274c | \u274c | | 150x150 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 150x200 | \u2714\ufe0f | \u274c | \u274c | | 180x180 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 250x250 | \u2714\ufe0f | \u274c | \u274c | | 352x352 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 420x420 | \u2714\ufe0f | \u2714\ufe0f | \u2714\ufe0f | | 720x720 | \u2714\ufe0f | \u274c | \u274c | Arguments: users: Id of the users you want the thumbnails of. type: Type of avatar thumbnail you want look at enum. size: size of the image. image_format: Format of the image. is_circular: If the image is a circle yes or no. Returns: A list of Thumbnails. \"\"\" uri : str if type == AvatarThumbnailType . full_body : uri = \"avatar\" size = size or ( 30 , 30 ) elif type == AvatarThumbnailType . bust : uri = \"avatar-bust\" size = size or ( 48 , 48 ) elif type == AvatarThumbnailType . headshot : uri = \"avatar-headshot\" size = size or ( 48 , 48 ) else : raise ValueError ( \"Avatar type is invalid.\" ) thumbnails_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"thumbnails\" , f \"v1/users/ { uri } \" ), params = { \"userIds\" : list ( map ( int , users )), \"size\" : _to_size_string ( size ), \"format\" : image_format . value , \"isCircular\" : is_circular , }, ) thumbnails_data = thumbnails_response . json ()[ \"data\" ] return [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in thumbnails_data ]","title":"get_user_avatar_thumbnails()"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy","text":"The return policy for place/universe thumbnails. Source code in roblox/thumbnails.py class ThumbnailReturnPolicy ( Enum ): \"\"\" The return policy for place/universe thumbnails. \"\"\" place_holder = \"PlaceHolder\" auto_generated = \"AutoGenerated\" force_auto_generated = \"ForceAutoGenerated\"","title":"ThumbnailReturnPolicy"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.auto_generated","text":"","title":"auto_generated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.force_auto_generated","text":"","title":"force_auto_generated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailReturnPolicy.place_holder","text":"","title":"place_holder"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState","text":"The current state of the thumbnail. Source code in roblox/thumbnails.py class ThumbnailState ( Enum ): \"\"\" The current state of the thumbnail. \"\"\" completed = \"Completed\" in_review = \"InReview\" pending = \"Pending\" error = \"Error\" moderated = \"Moderated\" blocked = \"Blocked\"","title":"ThumbnailState"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.blocked","text":"","title":"blocked"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.completed","text":"","title":"completed"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.error","text":"","title":"error"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.in_review","text":"","title":"in_review"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.moderated","text":"","title":"moderated"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.ThumbnailState.pending","text":"","title":"pending"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.UniverseThumbnails","text":"Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails . Attributes: Name Type Description universe_id int The id of the target of the image. error Optional[str] The errors you got. thumbnails List[Thumbnail] List of thumbnails. Source code in roblox/thumbnails.py class UniverseThumbnails : \"\"\" Represents a universe's thumbnails as returned by https://thumbnails.roblox.com/v1/games/multiget/thumbnails. Attributes: universe_id: The id of the target of the image. error: The errors you got. thumbnails: List of thumbnails. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Shared object. data: The data from the request. \"\"\" self . _client : Client = client # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ]","title":"UniverseThumbnails"},{"location":"reference/roblox/thumbnails/#roblox.thumbnails.UniverseThumbnails.__init__","text":"Parameters: Name Type Description Default client Client Shared object. required data dict The data from the request. required Source code in roblox/thumbnails.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Shared object. data: The data from the request. \"\"\" self . _client : Client = client # todo add base universe maby self . universe_id : int = data [ \"universeId\" ] self . error : Optional [ str ] = data [ \"error\" ] self . thumbnails : List [ Thumbnail ] = [ Thumbnail ( client = self . _client , data = thumbnail_data ) for thumbnail_data in data [ \"thumbnails\" ] ]","title":"__init__()"},{"location":"reference/roblox/universes/","text":"roblox.universes \u00b6 This module contains classes intended to parse and deal with data from Roblox universe information endpoints. Universe ( BaseUniverse ) \u00b6 Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description id int The ID of this specific universe root_place BasePlace The thumbnail provider object. name str The delivery provider object. description str The description of the game. creator_type Enum Is the creator a group or a user. creator Union[PartialUser, UniversePartialGroup] creator information. price Optional[int] how much you need to pay to play the game. allowed_gear_genres List[str] Unknown allowed_gear_categories List[str] Unknown is_genre_enforced bool Unknown copying_allowed bool are you allowed to copy the game. playing int amount of people currently playing the game. visits int amount of visits to the game. max_players int the maximum amount of players ber server. created datetime when the game was created. updated datetime when the game as been updated for the last time. studio_access_to_apis_allowed bool does studio have access to the apis. create_vip_servers_allowed bool can you create a vip server? universe_avatar_type UniverseAvatarType type of avatars in the game. genre UniverseGenre what genre the game is. is_all_genre bool if it is all genres? is_favorited_by_user bool if the authenticated user has it favorited. favorited_count int the total amount of people who favorited the game. Source code in roblox/universes.py class Universe ( BaseUniverse ): \"\"\" Represents the response data of https://games.roblox.com/v1/games. Attributes: id: The ID of this specific universe root_place: The thumbnail provider object. name: The delivery provider object. description: The description of the game. creator_type: Is the creator a group or a user. creator: creator information. price: how much you need to pay to play the game. allowed_gear_genres: Unknown allowed_gear_categories: Unknown is_genre_enforced: Unknown copying_allowed: are you allowed to copy the game. playing: amount of people currently playing the game. visits: amount of visits to the game. max_players: the maximum amount of players ber server. created: when the game was created. updated: when the game as been updated for the last time. studio_access_to_apis_allowed: does studio have access to the apis. create_vip_servers_allowed: can you create a vip server? universe_avatar_type: type of avatars in the game. genre: what genre the game is. is_all_genre: if it is all genres? is_favorited_by_user: if the authenticated user has it favorited. favorited_count: the total amount of people who favorited the game. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The universe data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( client , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( client , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The universe data. required Source code in roblox/universes.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The universe data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( client , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( client , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ] __repr__ ( self ) special \u00b6 Source code in roblox/universes.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\" UniverseAvatarType ( Enum ) \u00b6 The current avatar type of the universe. Source code in roblox/universes.py class UniverseAvatarType ( Enum ): \"\"\" The current avatar type of the universe. \"\"\" R6 = \"MorphToR6\" R15 = \"MorphToR15\" player_choice = \"PlayerChoice\" R15 \u00b6 R6 \u00b6 player_choice \u00b6 UniverseGenre ( Enum ) \u00b6 The universe's genre. Source code in roblox/universes.py class UniverseGenre ( Enum ): \"\"\" The universe's genre. \"\"\" all = \"All\" building = \"Building\" horror = \"Horror\" town_and_city = \"Town and City\" military = \"Military\" comedy = \"Comedy\" medieval = \"Medieval\" adventure = \"Adventure\" sci_fi = \"Sci-Fi\" naval = \"Naval\" fps = \"FPS\" rpg = \"RPG\" sports = \"Sports\" fighting = \"Fighting\" western = \"Western\" adventure \u00b6 all \u00b6 building \u00b6 comedy \u00b6 fighting \u00b6 fps \u00b6 horror \u00b6 medieval \u00b6 military \u00b6 naval \u00b6 rpg \u00b6 sci_fi \u00b6 sports \u00b6 town_and_city \u00b6 western \u00b6","title":"universes"},{"location":"reference/roblox/universes/#roblox.universes","text":"This module contains classes intended to parse and deal with data from Roblox universe information endpoints.","title":"universes"},{"location":"reference/roblox/universes/#roblox.universes.Universe","text":"Represents the response data of https://games.roblox.com/v1/games . Attributes: Name Type Description id int The ID of this specific universe root_place BasePlace The thumbnail provider object. name str The delivery provider object. description str The description of the game. creator_type Enum Is the creator a group or a user. creator Union[PartialUser, UniversePartialGroup] creator information. price Optional[int] how much you need to pay to play the game. allowed_gear_genres List[str] Unknown allowed_gear_categories List[str] Unknown is_genre_enforced bool Unknown copying_allowed bool are you allowed to copy the game. playing int amount of people currently playing the game. visits int amount of visits to the game. max_players int the maximum amount of players ber server. created datetime when the game was created. updated datetime when the game as been updated for the last time. studio_access_to_apis_allowed bool does studio have access to the apis. create_vip_servers_allowed bool can you create a vip server? universe_avatar_type UniverseAvatarType type of avatars in the game. genre UniverseGenre what genre the game is. is_all_genre bool if it is all genres? is_favorited_by_user bool if the authenticated user has it favorited. favorited_count int the total amount of people who favorited the game. Source code in roblox/universes.py class Universe ( BaseUniverse ): \"\"\" Represents the response data of https://games.roblox.com/v1/games. Attributes: id: The ID of this specific universe root_place: The thumbnail provider object. name: The delivery provider object. description: The description of the game. creator_type: Is the creator a group or a user. creator: creator information. price: how much you need to pay to play the game. allowed_gear_genres: Unknown allowed_gear_categories: Unknown is_genre_enforced: Unknown copying_allowed: are you allowed to copy the game. playing: amount of people currently playing the game. visits: amount of visits to the game. max_players: the maximum amount of players ber server. created: when the game was created. updated: when the game as been updated for the last time. studio_access_to_apis_allowed: does studio have access to the apis. create_vip_servers_allowed: can you create a vip server? universe_avatar_type: type of avatars in the game. genre: what genre the game is. is_all_genre: if it is all genres? is_favorited_by_user: if the authenticated user has it favorited. favorited_count: the total amount of people who favorited the game. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The universe data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( client , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( client , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\"","title":"Universe"},{"location":"reference/roblox/universes/#roblox.universes.Universe.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The universe data. required Source code in roblox/universes.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The universe data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) self . name : str = data [ \"name\" ] self . description : str = data [ \"description\" ] self . creator_type : Enum = CreatorType ( data [ \"creator\" ][ \"type\" ]) # isRNVAccount is not part of PartialUser, UniversePartialGroup self . creator : Union [ PartialUser , UniversePartialGroup ] if self . creator_type == CreatorType . group : self . creator = UniversePartialGroup ( client , data [ \"creator\" ]) elif self . creator_type == CreatorType . user : self . creator = PartialUser ( client , data [ \"creator\" ]) self . price : Optional [ int ] = data [ \"price\" ] self . allowed_gear_genres : List [ str ] = data [ \"allowedGearGenres\" ] self . allowed_gear_categories : List [ str ] = data [ \"allowedGearCategories\" ] self . is_genre_enforced : bool = data [ \"isGenreEnforced\" ] self . copying_allowed : bool = data [ \"copyingAllowed\" ] self . playing : int = data [ \"playing\" ] self . visits : int = data [ \"visits\" ] self . max_players : int = data [ \"maxPlayers\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) self . studio_access_to_apis_allowed : bool = data [ \"studioAccessToApisAllowed\" ] self . create_vip_servers_allowed : bool = data [ \"createVipServersAllowed\" ] self . universe_avatar_type : UniverseAvatarType = UniverseAvatarType ( data [ \"universeAvatarType\" ]) self . genre : UniverseGenre = UniverseGenre ( data [ \"genre\" ]) self . is_all_genre : bool = data [ \"isAllGenre\" ] # gameRating seems to be null across all games, so I omitted it from this class. self . is_favorited_by_user : bool = data [ \"isFavoritedByUser\" ] self . favorited_count : int = data [ \"favoritedCount\" ]","title":"__init__()"},{"location":"reference/roblox/universes/#roblox.universes.Universe.__repr__","text":"Source code in roblox/universes.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} creator= { self . creator } >\"","title":"__repr__()"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType","text":"The current avatar type of the universe. Source code in roblox/universes.py class UniverseAvatarType ( Enum ): \"\"\" The current avatar type of the universe. \"\"\" R6 = \"MorphToR6\" R15 = \"MorphToR15\" player_choice = \"PlayerChoice\"","title":"UniverseAvatarType"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.R15","text":"","title":"R15"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.R6","text":"","title":"R6"},{"location":"reference/roblox/universes/#roblox.universes.UniverseAvatarType.player_choice","text":"","title":"player_choice"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre","text":"The universe's genre. Source code in roblox/universes.py class UniverseGenre ( Enum ): \"\"\" The universe's genre. \"\"\" all = \"All\" building = \"Building\" horror = \"Horror\" town_and_city = \"Town and City\" military = \"Military\" comedy = \"Comedy\" medieval = \"Medieval\" adventure = \"Adventure\" sci_fi = \"Sci-Fi\" naval = \"Naval\" fps = \"FPS\" rpg = \"RPG\" sports = \"Sports\" fighting = \"Fighting\" western = \"Western\"","title":"UniverseGenre"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.adventure","text":"","title":"adventure"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.all","text":"","title":"all"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.building","text":"","title":"building"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.comedy","text":"","title":"comedy"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.fighting","text":"","title":"fighting"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.fps","text":"","title":"fps"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.horror","text":"","title":"horror"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.medieval","text":"","title":"medieval"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.military","text":"","title":"military"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.naval","text":"","title":"naval"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.rpg","text":"","title":"rpg"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.sci_fi","text":"","title":"sci_fi"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.sports","text":"","title":"sports"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.town_and_city","text":"","title":"town_and_city"},{"location":"reference/roblox/universes/#roblox.universes.UniverseGenre.western","text":"","title":"western"},{"location":"reference/roblox/users/","text":"roblox.users \u00b6 This module contains classes intended to parse and deal with data from Roblox user information endpoints. User ( BaseUser ) \u00b6 Represents a single conversation. Attributes: Name Type Description id int The id of the current user. name str The name of the current user. display_name str The display name of the current user. external_app_display_name Optional[str] The external app display name of the current user. is_banned bool If the user is banned. description str The description the current user wrote for themself. created datetime When the user created their account. has_verified_badge bool If the user has a verified badge. Source code in roblox/users.py class User ( BaseUser ): \"\"\" Represents a single conversation. Attributes: id: The id of the current user. name: The name of the current user. display_name: The display name of the current user. external_app_display_name: The external app display name of the current user. is_banned: If the user is banned. description: The description the current user wrote for themself. created: When the user created their account. has_verified_badge: If the user has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" super () . __init__ ( client = client , user_id = data [ \"id\" ]) self . _client : Client = client self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : Optional [ str ] = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ]) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/users.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" super () . __init__ ( client = client , user_id = data [ \"id\" ]) self . _client : Client = client self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : Optional [ str ] = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ]) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] __repr__ ( self ) special \u00b6 Source code in roblox/users.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"users"},{"location":"reference/roblox/users/#roblox.users","text":"This module contains classes intended to parse and deal with data from Roblox user information endpoints.","title":"users"},{"location":"reference/roblox/users/#roblox.users.User","text":"Represents a single conversation. Attributes: Name Type Description id int The id of the current user. name str The name of the current user. display_name str The display name of the current user. external_app_display_name Optional[str] The external app display name of the current user. is_banned bool If the user is banned. description str The description the current user wrote for themself. created datetime When the user created their account. has_verified_badge bool If the user has a verified badge. Source code in roblox/users.py class User ( BaseUser ): \"\"\" Represents a single conversation. Attributes: id: The id of the current user. name: The name of the current user. display_name: The display name of the current user. external_app_display_name: The external app display name of the current user. is_banned: If the user is banned. description: The description the current user wrote for themself. created: When the user created their account. has_verified_badge: If the user has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" super () . __init__ ( client = client , user_id = data [ \"id\" ]) self . _client : Client = client self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : Optional [ str ] = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ]) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"User"},{"location":"reference/roblox/users/#roblox.users.User.__init__","text":"Parameters: Name Type Description Default client Client Client object. required data dict The data from the request. required Source code in roblox/users.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: Client object. data: The data from the request. \"\"\" super () . __init__ ( client = client , user_id = data [ \"id\" ]) self . _client : Client = client self . name : str = data [ \"name\" ] self . display_name : str = data [ \"displayName\" ] self . external_app_display_name : Optional [ str ] = data [ \"externalAppDisplayName\" ] self . id : int = data [ \"id\" ] self . is_banned : bool = data [ \"isBanned\" ] self . description : str = data [ \"description\" ] self . created : datetime = parse ( data [ \"created\" ]) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ]","title":"__init__()"},{"location":"reference/roblox/users/#roblox.users.User.__repr__","text":"Source code in roblox/users.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/wall/","text":"roblox.wall \u00b6 Contains objects related to Roblox group walls. WallPost ( WallPostRelationship ) \u00b6 Represents a post on a Roblox group wall. Attributes: Name Type Description id int The post ID. poster Optional[Member] The member who made the post. body str Body of the post. created datetime Creation date of the post. updated datetime Last updated date of the post. Source code in roblox/wall.py class WallPost ( WallPostRelationship ): \"\"\" Represents a post on a Roblox group wall. Attributes: id: The post ID. poster: The member who made the post. body: Body of the post. created: Creation date of the post. updated: Last updated date of the post. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( client = self . _client , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\" __init__ ( self , client : Client , data : dict , group : BaseGroup ) special \u00b6 Source code in roblox/wall.py def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( client = self . _client , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\" WallPostRelationship \u00b6 Represents a Roblox wall post ID. Attributes: Name Type Description id int The post ID. group BaseGroup The group whose wall this post exists on. Source code in roblox/wall.py class WallPostRelationship : \"\"\" Represents a Roblox wall post ID. Attributes: id: The post ID. group: The group whose wall this post exists on. \"\"\" def __init__ ( self , client : Client , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: client: The Client. post_id: The post ID. \"\"\" self . _client : Client = client self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\" __init__ ( self , client : Client , post_id : int , group : Union [ BaseGroup , int ]) special \u00b6 Parameters: Name Type Description Default client Client The Client. required post_id int The post ID. required Source code in roblox/wall.py def __init__ ( self , client : Client , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: client: The Client. post_id: The post ID. \"\"\" self . _client : Client = client self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group __repr__ ( self ) special \u00b6 Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\" delete ( self ) async \u00b6 Deletes this wall post. Source code in roblox/wall.py async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) )","title":"wall"},{"location":"reference/roblox/wall/#roblox.wall","text":"Contains objects related to Roblox group walls.","title":"wall"},{"location":"reference/roblox/wall/#roblox.wall.WallPost","text":"Represents a post on a Roblox group wall. Attributes: Name Type Description id int The post ID. poster Optional[Member] The member who made the post. body str Body of the post. created datetime Creation date of the post. updated datetime Last updated date of the post. Source code in roblox/wall.py class WallPost ( WallPostRelationship ): \"\"\" Represents a post on a Roblox group wall. Attributes: id: The post ID. poster: The member who made the post. body: Body of the post. created: Creation date of the post. updated: Last updated date of the post. \"\"\" def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( client = self . _client , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\"","title":"WallPost"},{"location":"reference/roblox/wall/#roblox.wall.WallPost.__init__","text":"Source code in roblox/wall.py def __init__ ( self , client : Client , data : dict , group : BaseGroup ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , post_id = self . id , group = group ) self . poster : Optional [ Member ] = data [ \"poster\" ] and Member ( client = self . _client , data = data [ \"poster\" ], group = self . group ) or None self . body : str = data [ \"body\" ] self . created : datetime = parse ( data [ \"created\" ]) self . updated : datetime = parse ( data [ \"updated\" ])","title":"__init__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPost.__repr__","text":"Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } body= { self . body !r} group= { self . group } >\"","title":"__repr__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship","text":"Represents a Roblox wall post ID. Attributes: Name Type Description id int The post ID. group BaseGroup The group whose wall this post exists on. Source code in roblox/wall.py class WallPostRelationship : \"\"\" Represents a Roblox wall post ID. Attributes: id: The post ID. group: The group whose wall this post exists on. \"\"\" def __init__ ( self , client : Client , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: client: The Client. post_id: The post ID. \"\"\" self . _client : Client = client self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\"","title":"WallPostRelationship"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.__init__","text":"Parameters: Name Type Description Default client Client The Client. required post_id int The post ID. required Source code in roblox/wall.py def __init__ ( self , client : Client , post_id : int , group : Union [ BaseGroup , int ]): \"\"\" Arguments: client: The Client. post_id: The post ID. \"\"\" self . _client : Client = client self . id : int = post_id self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.__repr__","text":"Source code in roblox/wall.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } group= { self . group } >\"","title":"__repr__()"},{"location":"reference/roblox/wall/#roblox.wall.WallPostRelationship.delete","text":"Deletes this wall post. Source code in roblox/wall.py async def delete ( self ): \"\"\" Deletes this wall post. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . group . id } /wall/posts/ { self . id } \" ) )","title":"delete()"},{"location":"reference/roblox/bases/__init__/","text":"roblox.bases.__init__ special \u00b6 Contains base objects representing IDs on Roblox. As IDs represent objects on Roblox, you only need the ID of something to send requests for them. These bases represent one of those IDs.","title":"__init__"},{"location":"reference/roblox/bases/__init__/#roblox.bases.__init__","text":"Contains base objects representing IDs on Roblox. As IDs represent objects on Roblox, you only need the ID of something to send requests for them. These bases represent one of those IDs.","title":"__init__"},{"location":"reference/roblox/bases/baseasset/","text":"roblox.bases.baseasset \u00b6 This file contains the BaseAsset object, which represents a Roblox asset ID. BaseAsset ( BaseItem ) \u00b6 Represents a Roblox asset ID. Attributes: Name Type Description id int The asset ID. Source code in roblox/bases/baseasset.py class BaseAsset ( BaseItem ): \"\"\" Represents a Roblox asset ID. Attributes: id: The asset ID. \"\"\" def __init__ ( self , client : Client , asset_id : int ): \"\"\" Arguments: client: The Client this object belongs to. asset_id: The asset ID. \"\"\" self . _client : Client = client self . id : int = asset_id async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: The asset's limited resale data. \"\"\" resale_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data ) __init__ ( self , client : Client , asset_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required asset_id int The asset ID. required Source code in roblox/bases/baseasset.py def __init__ ( self , client : Client , asset_id : int ): \"\"\" Arguments: client: The Client this object belongs to. asset_id: The asset ID. \"\"\" self . _client : Client = client self . id : int = asset_id get_resale_data ( self ) -> AssetResaleData async \u00b6 Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: Type Description AssetResaleData The asset's limited resale data. Source code in roblox/bases/baseasset.py async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: The asset's limited resale data. \"\"\" resale_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data )","title":"baseasset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset","text":"This file contains the BaseAsset object, which represents a Roblox asset ID.","title":"baseasset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset","text":"Represents a Roblox asset ID. Attributes: Name Type Description id int The asset ID. Source code in roblox/bases/baseasset.py class BaseAsset ( BaseItem ): \"\"\" Represents a Roblox asset ID. Attributes: id: The asset ID. \"\"\" def __init__ ( self , client : Client , asset_id : int ): \"\"\" Arguments: client: The Client this object belongs to. asset_id: The asset ID. \"\"\" self . _client : Client = client self . id : int = asset_id async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: The asset's limited resale data. \"\"\" resale_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data )","title":"BaseAsset"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required asset_id int The asset ID. required Source code in roblox/bases/baseasset.py def __init__ ( self , client : Client , asset_id : int ): \"\"\" Arguments: client: The Client this object belongs to. asset_id: The asset ID. \"\"\" self . _client : Client = client self . id : int = asset_id","title":"__init__()"},{"location":"reference/roblox/bases/baseasset/#roblox.bases.baseasset.BaseAsset.get_resale_data","text":"Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: Type Description AssetResaleData The asset's limited resale data. Source code in roblox/bases/baseasset.py async def get_resale_data ( self ) -> AssetResaleData : \"\"\" Gets the asset's limited resale data. The asset must be a limited item for this information to be present. Returns: The asset's limited resale data. \"\"\" resale_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/assets/ { self . id } /resale-data\" ) ) resale_data = resale_response . json () return AssetResaleData ( data = resale_data )","title":"get_resale_data()"},{"location":"reference/roblox/bases/basebadge/","text":"roblox.bases.basebadge \u00b6 This file contains the BaseBadge object, which represents a Roblox badge ID. BaseBadge ( BaseItem ) \u00b6 Represents a Roblox badge ID. Attributes: Name Type Description id int The badge ID. Source code in roblox/bases/basebadge.py class BaseBadge ( BaseItem ): \"\"\" Represents a Roblox badge ID. Attributes: id: The badge ID. \"\"\" def __init__ ( self , client : Client , badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. badge_id: The badge ID. \"\"\" self . _client : Client = client self . id : int = badge_id __init__ ( self , client : Client , badge_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required badge_id int The badge ID. required Source code in roblox/bases/basebadge.py def __init__ ( self , client : Client , badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. badge_id: The badge ID. \"\"\" self . _client : Client = client self . id : int = badge_id","title":"basebadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge","text":"This file contains the BaseBadge object, which represents a Roblox badge ID.","title":"basebadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge.BaseBadge","text":"Represents a Roblox badge ID. Attributes: Name Type Description id int The badge ID. Source code in roblox/bases/basebadge.py class BaseBadge ( BaseItem ): \"\"\" Represents a Roblox badge ID. Attributes: id: The badge ID. \"\"\" def __init__ ( self , client : Client , badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. badge_id: The badge ID. \"\"\" self . _client : Client = client self . id : int = badge_id","title":"BaseBadge"},{"location":"reference/roblox/bases/basebadge/#roblox.bases.basebadge.BaseBadge.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required badge_id int The badge ID. required Source code in roblox/bases/basebadge.py def __init__ ( self , client : Client , badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. badge_id: The badge ID. \"\"\" self . _client : Client = client self . id : int = badge_id","title":"__init__()"},{"location":"reference/roblox/bases/baseconversation/","text":"roblox.bases.baseconversation \u00b6 This file contains the BaseConversation object, which represents a Roblox conversation ID. BaseConversation ( BaseItem ) \u00b6 Represents a Roblox chat conversation ID. Attributes: Name Type Description id int The conversation ID. Source code in roblox/bases/baseconversation.py class BaseConversation ( BaseItem ): \"\"\" Represents a Roblox chat conversation ID. Attributes: id: The conversation ID. \"\"\" def __init__ ( self , client : Client , conversation_id : int ): \"\"\" Arguments: client: The Client this object belongs to. conversation_id: The conversation ID. \"\"\" self . _client : Client = client self . id : int = conversation_id __init__ ( self , client : Client , conversation_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required conversation_id int The conversation ID. required Source code in roblox/bases/baseconversation.py def __init__ ( self , client : Client , conversation_id : int ): \"\"\" Arguments: client: The Client this object belongs to. conversation_id: The conversation ID. \"\"\" self . _client : Client = client self . id : int = conversation_id","title":"baseconversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation","text":"This file contains the BaseConversation object, which represents a Roblox conversation ID.","title":"baseconversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation","text":"Represents a Roblox chat conversation ID. Attributes: Name Type Description id int The conversation ID. Source code in roblox/bases/baseconversation.py class BaseConversation ( BaseItem ): \"\"\" Represents a Roblox chat conversation ID. Attributes: id: The conversation ID. \"\"\" def __init__ ( self , client : Client , conversation_id : int ): \"\"\" Arguments: client: The Client this object belongs to. conversation_id: The conversation ID. \"\"\" self . _client : Client = client self . id : int = conversation_id","title":"BaseConversation"},{"location":"reference/roblox/bases/baseconversation/#roblox.bases.baseconversation.BaseConversation.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required conversation_id int The conversation ID. required Source code in roblox/bases/baseconversation.py def __init__ ( self , client : Client , conversation_id : int ): \"\"\" Arguments: client: The Client this object belongs to. conversation_id: The conversation ID. \"\"\" self . _client : Client = client self . id : int = conversation_id","title":"__init__()"},{"location":"reference/roblox/bases/basegamepass/","text":"roblox.bases.basegamepass \u00b6 This file contains the BaseGamePass object, which represents a Roblox gamepass ID. BaseGamePass ( BaseItem ) \u00b6 Represents a Roblox gamepass ID. Attributes: Name Type Description id int The gamepass ID. Source code in roblox/bases/basegamepass.py class BaseGamePass ( BaseItem ): \"\"\" Represents a Roblox gamepass ID. Attributes: id: The gamepass ID. \"\"\" def __init__ ( self , client : Client , gamepass_id : int ): \"\"\" Arguments: client: The Client this object belongs to. gamepass_id: The gamepass ID. \"\"\" self . _client : Client = client self . id : int = gamepass_id __init__ ( self , client : Client , gamepass_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required gamepass_id int The gamepass ID. required Source code in roblox/bases/basegamepass.py def __init__ ( self , client : Client , gamepass_id : int ): \"\"\" Arguments: client: The Client this object belongs to. gamepass_id: The gamepass ID. \"\"\" self . _client : Client = client self . id : int = gamepass_id","title":"basegamepass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass","text":"This file contains the BaseGamePass object, which represents a Roblox gamepass ID.","title":"basegamepass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass","text":"Represents a Roblox gamepass ID. Attributes: Name Type Description id int The gamepass ID. Source code in roblox/bases/basegamepass.py class BaseGamePass ( BaseItem ): \"\"\" Represents a Roblox gamepass ID. Attributes: id: The gamepass ID. \"\"\" def __init__ ( self , client : Client , gamepass_id : int ): \"\"\" Arguments: client: The Client this object belongs to. gamepass_id: The gamepass ID. \"\"\" self . _client : Client = client self . id : int = gamepass_id","title":"BaseGamePass"},{"location":"reference/roblox/bases/basegamepass/#roblox.bases.basegamepass.BaseGamePass.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required gamepass_id int The gamepass ID. required Source code in roblox/bases/basegamepass.py def __init__ ( self , client : Client , gamepass_id : int ): \"\"\" Arguments: client: The Client this object belongs to. gamepass_id: The gamepass ID. \"\"\" self . _client : Client = client self . id : int = gamepass_id","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/","text":"roblox.bases.basegroup \u00b6 This file contains the BaseGroup object, which represents a Roblox group ID. It also contains the GroupSettings object, which represents a group's settings. BaseGroup ( BaseItem ) \u00b6 Represents a Roblox group ID. Attributes: Name Type Description id int The group's ID. Source code in roblox/bases/basegroup.py class BaseGroup ( BaseItem ): \"\"\" Represents a Roblox group ID. Attributes: id: The group's ID. \"\"\" def __init__ ( self , client : Client , group_id : int ): \"\"\" Parameters: client: The Client this object belongs to. group_id: The group's ID. \"\"\" self . _client : Client = client self . id : int = group_id async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: The group's settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( client = self . _client , data = settings_data ) async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Updates this group's settings. Passing `None` will default this setting to the value already present in the Arguments: is_approval_required: Whether approval is required via a join request before joining this group. is_builders_club_required: Whether users are required to have a Premium subscription to join this group. are_enemies_allowed: Whether this group can send and recieve enemy requests. are_group_funds_visible: Whether the group fund balance is visible to external users. are_group_games_visible: Whether group games are visible to external users. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } ) def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the group's members. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Member ( client = client , data = data , group = self ) ) def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( client = self . _client , user = user , group = self ) async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( client = self . _client , user = user , group = self ) async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: A list of the group's roles. \"\"\" roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( client = self . _client , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]] async def set_role ( self , user : UserOrUserId , role : RoleOrRoleId ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ), json = { \"roleId\" : int ( role ) } ) async def set_rank ( self , user : UserOrUserId , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( int ( user ), role ) async def kick_user ( self , user : UserOrUserId ): \"\"\" Kicks a user from a group. Arguments: user: The user who will be kicked from the group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ) ) def get_wall_posts ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets wall posts of a group. Arguments: page_size: How many posts should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : WallPost ( client = client , data = data , group = self ) ) def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A basic wall post relationship. \"\"\" return WallPostRelationship ( client = self . _client , post_id = post_id , group = self ) def get_join_requests ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all of this group's join requests. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing group join requests. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : JoinRequest ( client = client , data = data , group = self ) ) async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to this group. Returns: The user's join request, or None if they have no active join request. \"\"\" join_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( client = self . _client , data = join_data , group = self ) or None async def accept_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Accepts a user's request to join this group. Arguments: user: The user to accept into this group. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) async def decline_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Declines a user's request to join this group. Arguments: user: The user to decline from this group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None return new_shout async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the group's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /social-links\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ] __init__ ( self , client : Client , group_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required group_id int The group's ID. required Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , group_id : int ): \"\"\" Parameters: client: The Client this object belongs to. group_id: The group's ID. \"\"\" self . _client : Client = client self . id : int = group_id accept_user ( self , user : Union [ int , BaseUser , JoinRequest ]) async \u00b6 Accepts a user's request to join this group. Parameters: Name Type Description Default user Union[int, BaseUser, JoinRequest] The user to accept into this group. required Source code in roblox/bases/basegroup.py async def accept_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Accepts a user's request to join this group. Arguments: user: The user to accept into this group. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) decline_user ( self , user : Union [ int , BaseUser , JoinRequest ]) async \u00b6 Declines a user's request to join this group. Parameters: Name Type Description Default user Union[int, BaseUser, JoinRequest] The user to decline from this group. required Source code in roblox/bases/basegroup.py async def decline_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Declines a user's request to join this group. Arguments: user: The user to decline from this group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ] async \u00b6 Gets a specific user's join request to this group. Returns: Type Description Optional[JoinRequest] The user's join request, or None if they have no active join request. Source code in roblox/bases/basegroup.py async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to this group. Returns: The user's join request, or None if they have no active join request. \"\"\" join_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( client = self . _client , data = join_data , group = self ) or None get_join_requests ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets all of this group's join requests. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing group join requests. Source code in roblox/bases/basegroup.py def get_join_requests ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all of this group's join requests. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing group join requests. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : JoinRequest ( client = client , data = data , group = self ) ) get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship \u00b6 Gets a member of a group. Parameters: Name Type Description Default user Union[int, BaseUser] A BaseUser or a User ID. required Returns: Type Description MemberRelationship A member. Source code in roblox/bases/basegroup.py def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( client = self . _client , user = user , group = self ) get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship async \u00b6 Gets a member of a group by username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False Returns: Type Description MemberRelationship A member. Source code in roblox/bases/basegroup.py async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( client = self . _client , user = user , group = self ) get_members ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets all members of a group. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the group's members. Source code in roblox/bases/basegroup.py def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the group's members. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Member ( client = client , data = data , group = self ) ) get_roles ( self ) -> List [ Role ] async \u00b6 Gets all roles of the group. Returns: Type Description List[Role] A list of the group's roles. Source code in roblox/bases/basegroup.py async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: A list of the group's roles. \"\"\" roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( client = self . _client , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]] get_settings ( self ) -> GroupSettings async \u00b6 Gets all the settings of the selected group Returns: Type Description GroupSettings The group's settings. Source code in roblox/bases/basegroup.py async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: The group's settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( client = self . _client , data = settings_data ) get_social_links ( self ) -> List [ SocialLink ] async \u00b6 Gets the group's social links. Returns: Type Description List[SocialLink] A list of the universe's social links. Source code in roblox/bases/basegroup.py async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the group's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /social-links\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ] get_wall_post ( self , post_id : int ) -> WallPostRelationship \u00b6 Gets a wall post from an ID. Parameters: Name Type Description Default post_id int A post ID. required Returns: Type Description WallPostRelationship A basic wall post relationship. Source code in roblox/bases/basegroup.py def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A basic wall post relationship. \"\"\" return WallPostRelationship ( client = self . _client , post_id = post_id , group = self ) get_wall_posts ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets wall posts of a group. Parameters: Name Type Description Default page_size int How many posts should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Source code in roblox/bases/basegroup.py def get_wall_posts ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets wall posts of a group. Arguments: page_size: How many posts should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : WallPost ( client = client , data = data , group = self ) ) kick_user ( self , user : UserOrUserId ) async \u00b6 Kicks a user from a group. Parameters: Name Type Description Default user UserOrUserId The user who will be kicked from the group. required Source code in roblox/bases/basegroup.py async def kick_user ( self , user : UserOrUserId ): \"\"\" Kicks a user from a group. Arguments: user: The user who will be kicked from the group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ) ) set_rank ( self , user : UserOrUserId , rank : int ) -> None async \u00b6 Changes a member's role using a rank number. Parameters: Name Type Description Default user UserOrUserId The user who's rank will be changed. required rank int The rank number to change to. (1-255) required Source code in roblox/bases/basegroup.py async def set_rank ( self , user : UserOrUserId , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( int ( user ), role ) set_role ( self , user : UserOrUserId , role : RoleOrRoleId ) -> None async \u00b6 Sets a users role. Parameters: Name Type Description Default user UserOrUserId The user who's rank will be changed. required role RoleOrRoleId The new role. required Source code in roblox/bases/basegroup.py async def set_role ( self , user : UserOrUserId , role : RoleOrRoleId ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ), json = { \"roleId\" : int ( role ) } ) update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None ) -> None async \u00b6 Updates this group's settings. Passing None will default this setting to the value already present in the Parameters: Name Type Description Default is_approval_required Optional[bool] Whether approval is required via a join request before joining this group. None is_builders_club_required Optional[bool] Whether users are required to have a Premium subscription to join this group. None are_enemies_allowed Optional[bool] Whether this group can send and recieve enemy requests. None are_group_funds_visible Optional[bool] Whether the group fund balance is visible to external users. None are_group_games_visible Optional[bool] Whether group games are visible to external users. None Source code in roblox/bases/basegroup.py async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Updates this group's settings. Passing `None` will default this setting to the value already present in the Arguments: is_approval_required: Whether approval is required via a join request before joining this group. is_builders_club_required: Whether users are required to have a Premium subscription to join this group. are_enemies_allowed: Whether this group can send and recieve enemy requests. are_group_funds_visible: Whether the group fund balance is visible to external users. are_group_games_visible: Whether group games are visible to external users. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } ) update_shout ( self , message : str ) -> Optional [ Shout ] async \u00b6 Updates the shout. Parameters: Name Type Description Default message str The new shout message. required Source code in roblox/bases/basegroup.py async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None return new_shout GroupSettings \u00b6 Represents a group's settings. Attributes: Name Type Description is_approval_required bool Whether approval is required to join this group. is_builders_club_required bool Whether a membership is required to join this group. are_enemies_allowed bool Whether group enemies are allowed. are_group_funds_visible bool Whether group funds are visible. are_group_games_visible bool Whether group games are visible. is_group_name_change_enabled bool Whether group name changes are enabled. can_change_group_name bool Whether the name of this group can be changed. Source code in roblox/bases/basegroup.py class GroupSettings : \"\"\" Represents a group's settings. Attributes: is_approval_required: Whether approval is required to join this group. is_builders_club_required: Whether a membership is required to join this group. are_enemies_allowed: Whether group enemies are allowed. are_group_funds_visible: Whether group funds are visible. are_group_games_visible: Whether group games are visible. is_group_name_change_enabled: Whether group name changes are enabled. can_change_group_name: Whether the name of this group can be changed. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client this object belongs to. data: The group settings data. \"\"\" self . _client : Client = client self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ] __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required data dict The group settings data. required Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client this object belongs to. data: The group settings data. \"\"\" self . _client : Client = client self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ] JoinRequest \u00b6 Represents a group join request. Attributes: Name Type Description created datetime When this join request was sent. group BaseGroup The parent group that this join request is linked to. Source code in roblox/bases/basegroup.py class JoinRequest : \"\"\" Represents a group join request. Attributes: created: When this join request was sent. group: The parent group that this join request is linked to. \"\"\" def __init__ ( self , client : Client , data : dict , group : Union [ BaseGroup , int ]): self . _client : Client = client self . created : datetime = parse ( data [ \"created\" ]) self . requester = PartialUser ( client = self . _client , data = data [ \"requester\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group def __int__ ( self ): return self . requester . id async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self ) async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self ) __init__ ( self , client : Client , data : dict , group : Union [ BaseGroup , int ]) special \u00b6 Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , data : dict , group : Union [ BaseGroup , int ]): self . _client : Client = client self . created : datetime = parse ( data [ \"created\" ]) self . requester = PartialUser ( client = self . _client , data = data [ \"requester\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group __int__ ( self ) special \u00b6 Source code in roblox/bases/basegroup.py def __int__ ( self ): return self . requester . id accept ( self ) async \u00b6 Accepts this join request. Source code in roblox/bases/basegroup.py async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self ) decline ( self ) async \u00b6 Declines this join request. Source code in roblox/bases/basegroup.py async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self )","title":"basegroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup","text":"This file contains the BaseGroup object, which represents a Roblox group ID. It also contains the GroupSettings object, which represents a group's settings.","title":"basegroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup","text":"Represents a Roblox group ID. Attributes: Name Type Description id int The group's ID. Source code in roblox/bases/basegroup.py class BaseGroup ( BaseItem ): \"\"\" Represents a Roblox group ID. Attributes: id: The group's ID. \"\"\" def __init__ ( self , client : Client , group_id : int ): \"\"\" Parameters: client: The Client this object belongs to. group_id: The group's ID. \"\"\" self . _client : Client = client self . id : int = group_id async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: The group's settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( client = self . _client , data = settings_data ) async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Updates this group's settings. Passing `None` will default this setting to the value already present in the Arguments: is_approval_required: Whether approval is required via a join request before joining this group. is_builders_club_required: Whether users are required to have a Premium subscription to join this group. are_enemies_allowed: Whether this group can send and recieve enemy requests. are_group_funds_visible: Whether the group fund balance is visible to external users. are_group_games_visible: Whether group games are visible to external users. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } ) def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the group's members. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Member ( client = client , data = data , group = self ) ) def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( client = self . _client , user = user , group = self ) async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( client = self . _client , user = user , group = self ) async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: A list of the group's roles. \"\"\" roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( client = self . _client , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]] async def set_role ( self , user : UserOrUserId , role : RoleOrRoleId ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ), json = { \"roleId\" : int ( role ) } ) async def set_rank ( self , user : UserOrUserId , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( int ( user ), role ) async def kick_user ( self , user : UserOrUserId ): \"\"\" Kicks a user from a group. Arguments: user: The user who will be kicked from the group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ) ) def get_wall_posts ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets wall posts of a group. Arguments: page_size: How many posts should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : WallPost ( client = client , data = data , group = self ) ) def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A basic wall post relationship. \"\"\" return WallPostRelationship ( client = self . _client , post_id = post_id , group = self ) def get_join_requests ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all of this group's join requests. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing group join requests. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : JoinRequest ( client = client , data = data , group = self ) ) async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to this group. Returns: The user's join request, or None if they have no active join request. \"\"\" join_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( client = self . _client , data = join_data , group = self ) or None async def accept_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Accepts a user's request to join this group. Arguments: user: The user to accept into this group. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) async def decline_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Declines a user's request to join this group. Arguments: user: The user to decline from this group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None return new_shout async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the group's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /social-links\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ]","title":"BaseGroup"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required group_id int The group's ID. required Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , group_id : int ): \"\"\" Parameters: client: The Client this object belongs to. group_id: The group's ID. \"\"\" self . _client : Client = client self . id : int = group_id","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.accept_user","text":"Accepts a user's request to join this group. Parameters: Name Type Description Default user Union[int, BaseUser, JoinRequest] The user to accept into this group. required Source code in roblox/bases/basegroup.py async def accept_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Accepts a user's request to join this group. Arguments: user: The user to accept into this group. \"\"\" await self . _client . requests . post ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) )","title":"accept_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.decline_user","text":"Declines a user's request to join this group. Parameters: Name Type Description Default user Union[int, BaseUser, JoinRequest] The user to decline from this group. required Source code in roblox/bases/basegroup.py async def decline_user ( self , user : Union [ int , BaseUser , JoinRequest ]): \"\"\" Declines a user's request to join this group. Arguments: user: The user to decline from this group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) )","title":"decline_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_request","text":"Gets a specific user's join request to this group. Returns: Type Description Optional[JoinRequest] The user's join request, or None if they have no active join request. Source code in roblox/bases/basegroup.py async def get_join_request ( self , user : Union [ int , BaseUser ]) -> Optional [ JoinRequest ]: \"\"\" Gets a specific user's join request to this group. Returns: The user's join request, or None if they have no active join request. \"\"\" join_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests/users/ { int ( user ) } \" ) ) join_data = join_response . json () return join_data and JoinRequest ( client = self . _client , data = join_data , group = self ) or None","title":"get_join_request()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_join_requests","text":"Gets all of this group's join requests. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing group join requests. Source code in roblox/bases/basegroup.py def get_join_requests ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all of this group's join requests. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing group join requests. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /join-requests\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : JoinRequest ( client = client , data = data , group = self ) )","title":"get_join_requests()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member","text":"Gets a member of a group. Parameters: Name Type Description Default user Union[int, BaseUser] A BaseUser or a User ID. required Returns: Type Description MemberRelationship A member. Source code in roblox/bases/basegroup.py def get_member ( self , user : Union [ int , BaseUser ]) -> MemberRelationship : \"\"\" Gets a member of a group. Arguments: user: A BaseUser or a User ID. Returns: A member. \"\"\" return MemberRelationship ( client = self . _client , user = user , group = self )","title":"get_member()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_member_by_username","text":"Gets a member of a group by username. Parameters: Name Type Description Default username str A Roblox username. required exclude_banned_users bool Whether to exclude banned users from the data. False Returns: Type Description MemberRelationship A member. Source code in roblox/bases/basegroup.py async def get_member_by_username ( self , username : str , exclude_banned_users : bool = False ) -> MemberRelationship : \"\"\" Gets a member of a group by username. Arguments: username: A Roblox username. exclude_banned_users: Whether to exclude banned users from the data. Returns: A member. \"\"\" user : RequestedUsernamePartialUser = await self . _client . get_user_by_username ( username = username , exclude_banned_users = exclude_banned_users , expand = False ) return MemberRelationship ( client = self . _client , user = user , group = self )","title":"get_member_by_username()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_members","text":"Gets all members of a group. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the group's members. Source code in roblox/bases/basegroup.py def get_members ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets all members of a group. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the group's members. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Member ( client = client , data = data , group = self ) )","title":"get_members()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_roles","text":"Gets all roles of the group. Returns: Type Description List[Role] A list of the group's roles. Source code in roblox/bases/basegroup.py async def get_roles ( self ) -> List [ Role ]: \"\"\" Gets all roles of the group. Returns: A list of the group's roles. \"\"\" roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /roles\" ) ) roles_data = roles_response . json () return [ Role ( client = self . _client , data = role_data , group = self ) for role_data in roles_data [ \"roles\" ]]","title":"get_roles()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_settings","text":"Gets all the settings of the selected group Returns: Type Description GroupSettings The group's settings. Source code in roblox/bases/basegroup.py async def get_settings ( self ) -> GroupSettings : \"\"\" Gets all the settings of the selected group Returns: The group's settings. \"\"\" settings_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), ) settings_data = settings_response . json () return GroupSettings ( client = self . _client , data = settings_data )","title":"get_settings()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_social_links","text":"Gets the group's social links. Returns: Type Description List[SocialLink] A list of the universe's social links. Source code in roblox/bases/basegroup.py async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the group's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /social-links\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ]","title":"get_social_links()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_post","text":"Gets a wall post from an ID. Parameters: Name Type Description Default post_id int A post ID. required Returns: Type Description WallPostRelationship A basic wall post relationship. Source code in roblox/bases/basegroup.py def get_wall_post ( self , post_id : int ) -> WallPostRelationship : \"\"\" Gets a wall post from an ID. Arguments: post_id: A post ID. Returns: A basic wall post relationship. \"\"\" return WallPostRelationship ( client = self . _client , post_id = post_id , group = self )","title":"get_wall_post()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.get_wall_posts","text":"Gets wall posts of a group. Parameters: Name Type Description Default page_size int How many posts should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Source code in roblox/bases/basegroup.py def get_wall_posts ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets wall posts of a group. Arguments: page_size: How many posts should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"groups\" , f \"v2/groups/ { self . id } /wall/posts\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : WallPost ( client = client , data = data , group = self ) )","title":"get_wall_posts()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.kick_user","text":"Kicks a user from a group. Parameters: Name Type Description Default user UserOrUserId The user who will be kicked from the group. required Source code in roblox/bases/basegroup.py async def kick_user ( self , user : UserOrUserId ): \"\"\" Kicks a user from a group. Arguments: user: The user who will be kicked from the group. \"\"\" await self . _client . requests . delete ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ) )","title":"kick_user()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_rank","text":"Changes a member's role using a rank number. Parameters: Name Type Description Default user UserOrUserId The user who's rank will be changed. required rank int The rank number to change to. (1-255) required Source code in roblox/bases/basegroup.py async def set_rank ( self , user : UserOrUserId , rank : int ) -> None : \"\"\" Changes a member's role using a rank number. Arguments: user: The user who's rank will be changed. rank: The rank number to change to. (1-255) \"\"\" roles = await self . get_roles () role = next (( role for role in roles if role . rank == rank ), None ) if not role : raise InvalidRole ( f \"Role with rank number { rank } does not exist.\" ) await self . set_role ( int ( user ), role )","title":"set_rank()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.set_role","text":"Sets a users role. Parameters: Name Type Description Default user UserOrUserId The user who's rank will be changed. required role RoleOrRoleId The new role. required Source code in roblox/bases/basegroup.py async def set_role ( self , user : UserOrUserId , role : RoleOrRoleId ) -> None : \"\"\" Sets a users role. Arguments: user: The user who's rank will be changed. role: The new role. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /users/ { int ( user ) } \" ), json = { \"roleId\" : int ( role ) } )","title":"set_role()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_settings","text":"Updates this group's settings. Passing None will default this setting to the value already present in the Parameters: Name Type Description Default is_approval_required Optional[bool] Whether approval is required via a join request before joining this group. None is_builders_club_required Optional[bool] Whether users are required to have a Premium subscription to join this group. None are_enemies_allowed Optional[bool] Whether this group can send and recieve enemy requests. None are_group_funds_visible Optional[bool] Whether the group fund balance is visible to external users. None are_group_games_visible Optional[bool] Whether group games are visible to external users. None Source code in roblox/bases/basegroup.py async def update_settings ( self , is_approval_required : Optional [ bool ] = None , is_builders_club_required : Optional [ bool ] = None , are_enemies_allowed : Optional [ bool ] = None , are_group_funds_visible : Optional [ bool ] = None , are_group_games_visible : Optional [ bool ] = None , ) -> None : \"\"\" Updates this group's settings. Passing `None` will default this setting to the value already present in the Arguments: is_approval_required: Whether approval is required via a join request before joining this group. is_builders_club_required: Whether users are required to have a Premium subscription to join this group. are_enemies_allowed: Whether this group can send and recieve enemy requests. are_group_funds_visible: Whether the group fund balance is visible to external users. are_group_games_visible: Whether group games are visible to external users. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /settings\" ), json = { \"isApprovalRequired\" : is_approval_required , \"isBuildersClubRequired\" : is_builders_club_required , \"areEnemiesAllowed\" : are_enemies_allowed , \"areGroupFundsVisible\" : are_group_funds_visible , \"areGroupGamesVisible\" : are_group_games_visible , } )","title":"update_settings()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.BaseGroup.update_shout","text":"Updates the shout. Parameters: Name Type Description Default message str The new shout message. required Source code in roblox/bases/basegroup.py async def update_shout ( self , message : str ) -> Optional [ Shout ]: \"\"\" Updates the shout. Arguments: message: The new shout message. \"\"\" shout_response = await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/groups/ { self . id } /status\" ), json = { \"message\" : message } ) shout_data = shout_response . json () new_shout : Optional [ Shout ] = shout_data and Shout ( client = self . _client , data = shout_data ) or None return new_shout","title":"update_shout()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.GroupSettings","text":"Represents a group's settings. Attributes: Name Type Description is_approval_required bool Whether approval is required to join this group. is_builders_club_required bool Whether a membership is required to join this group. are_enemies_allowed bool Whether group enemies are allowed. are_group_funds_visible bool Whether group funds are visible. are_group_games_visible bool Whether group games are visible. is_group_name_change_enabled bool Whether group name changes are enabled. can_change_group_name bool Whether the name of this group can be changed. Source code in roblox/bases/basegroup.py class GroupSettings : \"\"\" Represents a group's settings. Attributes: is_approval_required: Whether approval is required to join this group. is_builders_club_required: Whether a membership is required to join this group. are_enemies_allowed: Whether group enemies are allowed. are_group_funds_visible: Whether group funds are visible. are_group_games_visible: Whether group games are visible. is_group_name_change_enabled: Whether group name changes are enabled. can_change_group_name: Whether the name of this group can be changed. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client this object belongs to. data: The group settings data. \"\"\" self . _client : Client = client self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ]","title":"GroupSettings"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.GroupSettings.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required data dict The group settings data. required Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client this object belongs to. data: The group settings data. \"\"\" self . _client : Client = client self . is_approval_required : bool = data [ \"isApprovalRequired\" ] self . is_builders_club_required : bool = data [ \"isBuildersClubRequired\" ] self . are_enemies_allowed : bool = data [ \"areEnemiesAllowed\" ] self . are_group_funds_visible : bool = data [ \"areGroupFundsVisible\" ] self . are_group_games_visible : bool = data [ \"areGroupGamesVisible\" ] self . is_group_name_change_enabled : bool = data [ \"isGroupNameChangeEnabled\" ] self . can_change_group_name : bool = data [ \"canChangeGroupName\" ]","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest","text":"Represents a group join request. Attributes: Name Type Description created datetime When this join request was sent. group BaseGroup The parent group that this join request is linked to. Source code in roblox/bases/basegroup.py class JoinRequest : \"\"\" Represents a group join request. Attributes: created: When this join request was sent. group: The parent group that this join request is linked to. \"\"\" def __init__ ( self , client : Client , data : dict , group : Union [ BaseGroup , int ]): self . _client : Client = client self . created : datetime = parse ( data [ \"created\" ]) self . requester = PartialUser ( client = self . _client , data = data [ \"requester\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group def __int__ ( self ): return self . requester . id async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self ) async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self )","title":"JoinRequest"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.__init__","text":"Source code in roblox/bases/basegroup.py def __init__ ( self , client : Client , data : dict , group : Union [ BaseGroup , int ]): self . _client : Client = client self . created : datetime = parse ( data [ \"created\" ]) self . requester = PartialUser ( client = self . _client , data = data [ \"requester\" ]) self . group : BaseGroup if isinstance ( group , int ): self . group = BaseGroup ( client = self . _client , group_id = group ) else : self . group = group","title":"__init__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.__int__","text":"Source code in roblox/bases/basegroup.py def __int__ ( self ): return self . requester . id","title":"__int__()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.accept","text":"Accepts this join request. Source code in roblox/bases/basegroup.py async def accept ( self ): \"\"\" Accepts this join request. \"\"\" await self . group . accept_user ( self )","title":"accept()"},{"location":"reference/roblox/bases/basegroup/#roblox.bases.basegroup.JoinRequest.decline","text":"Declines this join request. Source code in roblox/bases/basegroup.py async def decline ( self ): \"\"\" Declines this join request. \"\"\" await self . group . decline_user ( self )","title":"decline()"},{"location":"reference/roblox/bases/baseinstance/","text":"roblox.bases.baseinstance \u00b6 This file contains the BaseInstance object, which represents a Roblox instance ID. BaseInstance ( BaseItem ) \u00b6 Represents a Roblox instance ID. Instance IDs represent the ownership of a single Roblox item. Attributes: Name Type Description id int The instance ID. Source code in roblox/bases/baseinstance.py class BaseInstance ( BaseItem ): \"\"\" Represents a Roblox instance ID. Instance IDs represent the ownership of a single Roblox item. Attributes: id: The instance ID. \"\"\" def __init__ ( self , client : Client , instance_id : int ): \"\"\" Arguments: client: The Client this object belongs to. instance_id: The asset instance ID. \"\"\" self . _client : Client = client self . id : int = instance_id __init__ ( self , client : Client , instance_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required instance_id int The asset instance ID. required Source code in roblox/bases/baseinstance.py def __init__ ( self , client : Client , instance_id : int ): \"\"\" Arguments: client: The Client this object belongs to. instance_id: The asset instance ID. \"\"\" self . _client : Client = client self . id : int = instance_id","title":"baseinstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance","text":"This file contains the BaseInstance object, which represents a Roblox instance ID.","title":"baseinstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance","text":"Represents a Roblox instance ID. Instance IDs represent the ownership of a single Roblox item. Attributes: Name Type Description id int The instance ID. Source code in roblox/bases/baseinstance.py class BaseInstance ( BaseItem ): \"\"\" Represents a Roblox instance ID. Instance IDs represent the ownership of a single Roblox item. Attributes: id: The instance ID. \"\"\" def __init__ ( self , client : Client , instance_id : int ): \"\"\" Arguments: client: The Client this object belongs to. instance_id: The asset instance ID. \"\"\" self . _client : Client = client self . id : int = instance_id","title":"BaseInstance"},{"location":"reference/roblox/bases/baseinstance/#roblox.bases.baseinstance.BaseInstance.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required instance_id int The asset instance ID. required Source code in roblox/bases/baseinstance.py def __init__ ( self , client : Client , instance_id : int ): \"\"\" Arguments: client: The Client this object belongs to. instance_id: The asset instance ID. \"\"\" self . _client : Client = client self . id : int = instance_id","title":"__init__()"},{"location":"reference/roblox/bases/baseitem/","text":"roblox.bases.baseitem \u00b6 This file contains the BaseItem class, which all bases inherit. BaseItem \u00b6 This object represents a base Roblox item. All other bases inherit this object. This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal. Source code in roblox/bases/baseitem.py class BaseItem : \"\"\" This object represents a base Roblox item. All other bases inherit this object. This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal. \"\"\" id = None def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\" def __int__ ( self ): return self . id def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True id \u00b6 __eq__ ( self , other ) special \u00b6 Source code in roblox/bases/baseitem.py def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id __int__ ( self ) special \u00b6 Source code in roblox/bases/baseitem.py def __int__ ( self ): return self . id __ne__ ( self , other ) special \u00b6 Source code in roblox/bases/baseitem.py def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True __repr__ ( self ) special \u00b6 Source code in roblox/bases/baseitem.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\"","title":"baseitem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem","text":"This file contains the BaseItem class, which all bases inherit.","title":"baseitem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem","text":"This object represents a base Roblox item. All other bases inherit this object. This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal. Source code in roblox/bases/baseitem.py class BaseItem : \"\"\" This object represents a base Roblox item. All other bases inherit this object. This object overrides equals and not-equals methods ensuring that two bases with the same ID are always equal. \"\"\" id = None def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\" def __int__ ( self ): return self . id def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True","title":"BaseItem"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.id","text":"","title":"id"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__eq__","text":"Source code in roblox/bases/baseitem.py def __eq__ ( self , other ): return isinstance ( other , self . __class__ ) and other . id == self . id","title":"__eq__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__int__","text":"Source code in roblox/bases/baseitem.py def __int__ ( self ): return self . id","title":"__int__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__ne__","text":"Source code in roblox/bases/baseitem.py def __ne__ ( self , other ): if isinstance ( other , self . __class__ ): return other . id != self . id return True","title":"__ne__()"},{"location":"reference/roblox/bases/baseitem/#roblox.bases.baseitem.BaseItem.__repr__","text":"Source code in roblox/bases/baseitem.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } >\"","title":"__repr__()"},{"location":"reference/roblox/bases/basejob/","text":"roblox.bases.basejob \u00b6 This file contains the BaseJob object, which represents a Roblox job ID. BaseJob ( BaseItem ) \u00b6 Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub here . Attributes: Name Type Description id str The job ID. Source code in roblox/bases/basejob.py class BaseJob ( BaseItem ): \"\"\" Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub [here](https://developer.roblox.com/en-us/api-reference/property/DataModel/JobId). Attributes: id: The job ID. \"\"\" def __init__ ( self , client : Client , job_id : str ): \"\"\" Arguments: client: The Client this object belongs to. job_id: The job ID. \"\"\" self . _client : Client = client self . id : str = job_id __init__ ( self , client : Client , job_id : str ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required job_id str The job ID. required Source code in roblox/bases/basejob.py def __init__ ( self , client : Client , job_id : str ): \"\"\" Arguments: client: The Client this object belongs to. job_id: The job ID. \"\"\" self . _client : Client = client self . id : str = job_id","title":"basejob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob","text":"This file contains the BaseJob object, which represents a Roblox job ID.","title":"basejob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob.BaseJob","text":"Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub here . Attributes: Name Type Description id str The job ID. Source code in roblox/bases/basejob.py class BaseJob ( BaseItem ): \"\"\" Represents Roblox job ID. Job IDs are UUIDs that represent a single game server instance. Learn more on the Developer Hub [here](https://developer.roblox.com/en-us/api-reference/property/DataModel/JobId). Attributes: id: The job ID. \"\"\" def __init__ ( self , client : Client , job_id : str ): \"\"\" Arguments: client: The Client this object belongs to. job_id: The job ID. \"\"\" self . _client : Client = client self . id : str = job_id","title":"BaseJob"},{"location":"reference/roblox/bases/basejob/#roblox.bases.basejob.BaseJob.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required job_id str The job ID. required Source code in roblox/bases/basejob.py def __init__ ( self , client : Client , job_id : str ): \"\"\" Arguments: client: The Client this object belongs to. job_id: The job ID. \"\"\" self . _client : Client = client self . id : str = job_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplace/","text":"roblox.bases.baseplace \u00b6 This file contains the BasePlace object, which represents a Roblox place ID. BasePlace ( BaseAsset ) \u00b6 Represents a Roblox place ID. Places are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description id int The place ID. Source code in roblox/bases/baseplace.py class BasePlace ( BaseAsset ): \"\"\" Represents a Roblox place ID. Places are a form of Asset and as such this object derives from BaseAsset. Attributes: id: The place ID. \"\"\" def __init__ ( self , client : Client , place_id : int ): \"\"\" Arguments: client: The Client this object belongs to. place_id: The place ID. \"\"\" super () . __init__ ( client , place_id ) self . _client : Client = client self . id : int = place_id async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances instances_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( client = self . _client , data = instances_data ) __init__ ( self , client : Client , place_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required place_id int The place ID. required Source code in roblox/bases/baseplace.py def __init__ ( self , client : Client , place_id : int ): \"\"\" Arguments: client: The Client this object belongs to. place_id: The place ID. \"\"\" super () . __init__ ( client , place_id ) self . _client : Client = client self . id : int = place_id get_instances ( self , start_index : int = 0 ) async \u00b6 Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Parameters: Name Type Description Default start_index int Where to start in the server index. 0 Source code in roblox/bases/baseplace.py async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances instances_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( client = self . _client , data = instances_data )","title":"baseplace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace","text":"This file contains the BasePlace object, which represents a Roblox place ID.","title":"baseplace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace","text":"Represents a Roblox place ID. Places are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description id int The place ID. Source code in roblox/bases/baseplace.py class BasePlace ( BaseAsset ): \"\"\" Represents a Roblox place ID. Places are a form of Asset and as such this object derives from BaseAsset. Attributes: id: The place ID. \"\"\" def __init__ ( self , client : Client , place_id : int ): \"\"\" Arguments: client: The Client this object belongs to. place_id: The place ID. \"\"\" super () . __init__ ( client , place_id ) self . _client : Client = client self . id : int = place_id async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances instances_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( client = self . _client , data = instances_data )","title":"BasePlace"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required place_id int The place ID. required Source code in roblox/bases/baseplace.py def __init__ ( self , client : Client , place_id : int ): \"\"\" Arguments: client: The Client this object belongs to. place_id: The place ID. \"\"\" super () . __init__ ( client , place_id ) self . _client : Client = client self . id : int = place_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplace/#roblox.bases.baseplace.BasePlace.get_instances","text":"Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Parameters: Name Type Description Default start_index int Where to start in the server index. 0 Source code in roblox/bases/baseplace.py async def get_instances ( self , start_index : int = 0 ): \"\"\" Returns a list of this place's current active servers, known in the API as \"game instances\". This list always contains 10 items or fewer. For more items, add 10 to the start index and repeat until no more items are available. Arguments: start_index: Where to start in the server index. \"\"\" from ..jobs import GameInstances instances_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"www\" , f \"games/getgameinstancesjson\" ), params = { \"placeId\" : self . id , \"startIndex\" : start_index } ) instances_data = instances_response . json () return GameInstances ( client = self . _client , data = instances_data )","title":"get_instances()"},{"location":"reference/roblox/bases/baseplugin/","text":"roblox.bases.baseplugin \u00b6 This file contains the BasePlugin object, which represents a Roblox plugin ID. BasePlugin ( BaseAsset ) \u00b6 Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description id int The plugin ID. Source code in roblox/bases/baseplugin.py class BasePlugin ( BaseAsset ): \"\"\" Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: id: The plugin ID. \"\"\" def __init__ ( self , client : Client , plugin_id : int ): \"\"\" Arguments: client: The Client this object belongs to. plugin_id: The plugin ID. \"\"\" super () . __init__ ( client , plugin_id ) self . _client : Client = client self . id : int = plugin_id async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } ) __init__ ( self , client : Client , plugin_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required plugin_id int The plugin ID. required Source code in roblox/bases/baseplugin.py def __init__ ( self , client : Client , plugin_id : int ): \"\"\" Arguments: client: The Client this object belongs to. plugin_id: The plugin ID. \"\"\" super () . __init__ ( client , plugin_id ) self . _client : Client = client self . id : int = plugin_id update ( self , name : str = None , description : str = None , comments_enabled : str = None ) async \u00b6 Updates the plugin's data. Parameters: Name Type Description Default name str The new group name. None description str The new group description. None comments_enabled str Whether to enable comments. None Source code in roblox/bases/baseplugin.py async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } )","title":"baseplugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin","text":"This file contains the BasePlugin object, which represents a Roblox plugin ID.","title":"baseplugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin","text":"Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: Name Type Description id int The plugin ID. Source code in roblox/bases/baseplugin.py class BasePlugin ( BaseAsset ): \"\"\" Represents a Roblox plugin ID. Plugins are a form of Asset and as such this object derives from BaseAsset. Attributes: id: The plugin ID. \"\"\" def __init__ ( self , client : Client , plugin_id : int ): \"\"\" Arguments: client: The Client this object belongs to. plugin_id: The plugin ID. \"\"\" super () . __init__ ( client , plugin_id ) self . _client : Client = client self . id : int = plugin_id async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } )","title":"BasePlugin"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required plugin_id int The plugin ID. required Source code in roblox/bases/baseplugin.py def __init__ ( self , client : Client , plugin_id : int ): \"\"\" Arguments: client: The Client this object belongs to. plugin_id: The plugin ID. \"\"\" super () . __init__ ( client , plugin_id ) self . _client : Client = client self . id : int = plugin_id","title":"__init__()"},{"location":"reference/roblox/bases/baseplugin/#roblox.bases.baseplugin.BasePlugin.update","text":"Updates the plugin's data. Parameters: Name Type Description Default name str The new group name. None description str The new group description. None comments_enabled str Whether to enable comments. None Source code in roblox/bases/baseplugin.py async def update ( self , name : str = None , description : str = None , comments_enabled : str = None ): \"\"\" Updates the plugin's data. Arguments: name: The new group name. description: The new group description. comments_enabled: Whether to enable comments. \"\"\" await self . _client . requests . patch ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/plugins/ { self . id } \" ), json = { \"name\" : name , \"description\" : description , \"commentsEnabled\" : comments_enabled } )","title":"update()"},{"location":"reference/roblox/bases/baserobloxbadge/","text":"roblox.bases.baserobloxbadge \u00b6 This file contains the BaseRobloxBadge object, which represents a Roblox roblox badge ID. BaseRobloxBadge ( BaseItem ) \u00b6 Represents a Roblox roblox badge ID. Warning This is not a badge! It is a roblox badge . Attributes: Name Type Description id int The roblox badge ID. Source code in roblox/bases/baserobloxbadge.py class BaseRobloxBadge ( BaseItem ): \"\"\" Represents a Roblox roblox badge ID. !!! warning This is not a badge! It is a **roblox badge**. Attributes: id: The roblox badge ID. \"\"\" def __init__ ( self , client : Client , roblox_badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. roblox_badge_id: The roblox badge ID. \"\"\" self . _client : Client = client self . id : int = roblox_badge_id __init__ ( self , client : Client , roblox_badge_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required roblox_badge_id int The roblox badge ID. required Source code in roblox/bases/baserobloxbadge.py def __init__ ( self , client : Client , roblox_badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. roblox_badge_id: The roblox badge ID. \"\"\" self . _client : Client = client self . id : int = roblox_badge_id","title":"baserobloxbadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge","text":"This file contains the BaseRobloxBadge object, which represents a Roblox roblox badge ID.","title":"baserobloxbadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge","text":"Represents a Roblox roblox badge ID. Warning This is not a badge! It is a roblox badge . Attributes: Name Type Description id int The roblox badge ID. Source code in roblox/bases/baserobloxbadge.py class BaseRobloxBadge ( BaseItem ): \"\"\" Represents a Roblox roblox badge ID. !!! warning This is not a badge! It is a **roblox badge**. Attributes: id: The roblox badge ID. \"\"\" def __init__ ( self , client : Client , roblox_badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. roblox_badge_id: The roblox badge ID. \"\"\" self . _client : Client = client self . id : int = roblox_badge_id","title":"BaseRobloxBadge"},{"location":"reference/roblox/bases/baserobloxbadge/#roblox.bases.baserobloxbadge.BaseRobloxBadge.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required roblox_badge_id int The roblox badge ID. required Source code in roblox/bases/baserobloxbadge.py def __init__ ( self , client : Client , roblox_badge_id : int ): \"\"\" Arguments: client: The Client this object belongs to. roblox_badge_id: The roblox badge ID. \"\"\" self . _client : Client = client self . id : int = roblox_badge_id","title":"__init__()"},{"location":"reference/roblox/bases/baserole/","text":"roblox.bases.baserole \u00b6 This file contains the BaseRole object, which represents a Roblox group role ID. BaseRole ( BaseItem ) \u00b6 Represents a Roblox group role ID. Attributes: Name Type Description id int The role ID. Source code in roblox/bases/baserole.py class BaseRole ( BaseItem ): \"\"\" Represents a Roblox group role ID. Attributes: id: The role ID. \"\"\" def __init__ ( self , client : Client , role_id : int ): \"\"\" Arguments: client: The Client this object belongs to. role_id: The role ID. \"\"\" self . _client : Client = client self . id : int = role_id __init__ ( self , client : Client , role_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required role_id int The role ID. required Source code in roblox/bases/baserole.py def __init__ ( self , client : Client , role_id : int ): \"\"\" Arguments: client: The Client this object belongs to. role_id: The role ID. \"\"\" self . _client : Client = client self . id : int = role_id","title":"baserole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole","text":"This file contains the BaseRole object, which represents a Roblox group role ID.","title":"baserole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole.BaseRole","text":"Represents a Roblox group role ID. Attributes: Name Type Description id int The role ID. Source code in roblox/bases/baserole.py class BaseRole ( BaseItem ): \"\"\" Represents a Roblox group role ID. Attributes: id: The role ID. \"\"\" def __init__ ( self , client : Client , role_id : int ): \"\"\" Arguments: client: The Client this object belongs to. role_id: The role ID. \"\"\" self . _client : Client = client self . id : int = role_id","title":"BaseRole"},{"location":"reference/roblox/bases/baserole/#roblox.bases.baserole.BaseRole.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required role_id int The role ID. required Source code in roblox/bases/baserole.py def __init__ ( self , client : Client , role_id : int ): \"\"\" Arguments: client: The Client this object belongs to. role_id: The role ID. \"\"\" self . _client : Client = client self . id : int = role_id","title":"__init__()"},{"location":"reference/roblox/bases/basesociallink/","text":"roblox.bases.basesociallink \u00b6 This file contains the BaseUniverseSocialLink object, which represents a Roblox social link ID. BaseUniverseSocialLink ( BaseItem ) \u00b6 Represents a Roblox universe social link ID. Attributes: Name Type Description id int The universe social link ID. Source code in roblox/bases/basesociallink.py class BaseUniverseSocialLink ( BaseItem ): \"\"\" Represents a Roblox universe social link ID. Attributes: id: The universe social link ID. \"\"\" def __init__ ( self , client : Client , social_link_id : int ): \"\"\" Arguments: client: The Client this object belongs to. social_link_id: The universe social link ID. \"\"\" self . _client : Client = client self . id : int = social_link_id __init__ ( self , client : Client , social_link_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required social_link_id int The universe social link ID. required Source code in roblox/bases/basesociallink.py def __init__ ( self , client : Client , social_link_id : int ): \"\"\" Arguments: client: The Client this object belongs to. social_link_id: The universe social link ID. \"\"\" self . _client : Client = client self . id : int = social_link_id","title":"basesociallink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink","text":"This file contains the BaseUniverseSocialLink object, which represents a Roblox social link ID.","title":"basesociallink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink","text":"Represents a Roblox universe social link ID. Attributes: Name Type Description id int The universe social link ID. Source code in roblox/bases/basesociallink.py class BaseUniverseSocialLink ( BaseItem ): \"\"\" Represents a Roblox universe social link ID. Attributes: id: The universe social link ID. \"\"\" def __init__ ( self , client : Client , social_link_id : int ): \"\"\" Arguments: client: The Client this object belongs to. social_link_id: The universe social link ID. \"\"\" self . _client : Client = client self . id : int = social_link_id","title":"BaseUniverseSocialLink"},{"location":"reference/roblox/bases/basesociallink/#roblox.bases.basesociallink.BaseUniverseSocialLink.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required social_link_id int The universe social link ID. required Source code in roblox/bases/basesociallink.py def __init__ ( self , client : Client , social_link_id : int ): \"\"\" Arguments: client: The Client this object belongs to. social_link_id: The universe social link ID. \"\"\" self . _client : Client = client self . id : int = social_link_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuniverse/","text":"roblox.bases.baseuniverse \u00b6 This file contains the BaseUniverse object, which represents a Roblox universe ID. It also contains the UniverseLiveStats object, which represents a universe's live stats. BaseUniverse ( BaseItem ) \u00b6 Represents a Roblox universe ID. Attributes: Name Type Description id int The universe ID. Source code in roblox/bases/baseuniverse.py class BaseUniverse ( BaseItem ): \"\"\" Represents a Roblox universe ID. Attributes: id: The universe ID. \"\"\" def __init__ ( self , client : Client , universe_id : int ): \"\"\" Arguments: client: The Client this object belongs to. universe_id: The universe ID. \"\"\" self . _client : Client = client self . id : int = universe_id async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ] async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ] def get_badges ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's badges. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing this universe's badges. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = _universe_badges_handler , ) async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: The universe's live stats. \"\"\" stats_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data ) def get_gamepasses ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's gamepasses. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the universe's gamepasses. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : GamePass ( client , data ), ) async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the universe's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ] __init__ ( self , client : Client , universe_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required universe_id int The universe ID. required Source code in roblox/bases/baseuniverse.py def __init__ ( self , client : Client , universe_id : int ): \"\"\" Arguments: client: The Client this object belongs to. universe_id: The universe ID. \"\"\" self . _client : Client = client self . id : int = universe_id get_badges ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets the universe's badges. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing this universe's badges. Source code in roblox/bases/baseuniverse.py def get_badges ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's badges. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing this universe's badges. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = _universe_badges_handler , ) get_favorite_count ( self ) -> int async \u00b6 Grabs the universe's favorite count. Returns: Type Description int The universe's favorite count. Source code in roblox/bases/baseuniverse.py async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ] get_gamepasses ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets the universe's gamepasses. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the universe's gamepasses. Source code in roblox/bases/baseuniverse.py def get_gamepasses ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's gamepasses. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the universe's gamepasses. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : GamePass ( client , data ), ) get_live_stats ( self ) -> UniverseLiveStats async \u00b6 Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: Type Description UniverseLiveStats The universe's live stats. Source code in roblox/bases/baseuniverse.py async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: The universe's live stats. \"\"\" stats_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data ) get_social_links ( self ) -> List [ SocialLink ] async \u00b6 Gets the universe's social links. Returns: Type Description List[SocialLink] A list of the universe's social links. Source code in roblox/bases/baseuniverse.py async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the universe's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ] is_favorited ( self ) -> bool async \u00b6 Grabs the authenticated user's favorite status for this game. Returns: Type Description bool Whether the authenticated user has favorited this game. Source code in roblox/bases/baseuniverse.py async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ] UniverseLiveStats \u00b6 Represents a universe's live stats. Attributes: Name Type Description total_player_count int The amount of players present in this universe's subplaces. game_count int The amount of active servers for this universe's subplaces. player_counts_by_device_type Dict[str, int] A dictionary where the keys are device types and the values are the amount of this universe's subplace's active players which are on that device type. Source code in roblox/bases/baseuniverse.py class UniverseLiveStats : \"\"\" Represents a universe's live stats. Attributes: total_player_count: The amount of players present in this universe's subplaces. game_count: The amount of active servers for this universe's subplaces. player_counts_by_device_type: A dictionary where the keys are device types and the values are the amount of this universe's subplace's active players which are on that device type. \"\"\" def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ] __init__ ( self , data : dict ) special \u00b6 Source code in roblox/bases/baseuniverse.py def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ]","title":"baseuniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse","text":"This file contains the BaseUniverse object, which represents a Roblox universe ID. It also contains the UniverseLiveStats object, which represents a universe's live stats.","title":"baseuniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse","text":"Represents a Roblox universe ID. Attributes: Name Type Description id int The universe ID. Source code in roblox/bases/baseuniverse.py class BaseUniverse ( BaseItem ): \"\"\" Represents a Roblox universe ID. Attributes: id: The universe ID. \"\"\" def __init__ ( self , client : Client , universe_id : int ): \"\"\" Arguments: client: The Client this object belongs to. universe_id: The universe ID. \"\"\" self . _client : Client = client self . id : int = universe_id async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ] async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ] def get_badges ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's badges. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing this universe's badges. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = _universe_badges_handler , ) async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: The universe's live stats. \"\"\" stats_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data ) def get_gamepasses ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's gamepasses. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the universe's gamepasses. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : GamePass ( client , data ), ) async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the universe's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ]","title":"BaseUniverse"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required universe_id int The universe ID. required Source code in roblox/bases/baseuniverse.py def __init__ ( self , client : Client , universe_id : int ): \"\"\" Arguments: client: The Client this object belongs to. universe_id: The universe ID. \"\"\" self . _client : Client = client self . id : int = universe_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_badges","text":"Gets the universe's badges. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing this universe's badges. Source code in roblox/bases/baseuniverse.py def get_badges ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's badges. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing this universe's badges. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/universes/ { self . id } /badges\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = _universe_badges_handler , )","title":"get_badges()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_favorite_count","text":"Grabs the universe's favorite count. Returns: Type Description int The universe's favorite count. Source code in roblox/bases/baseuniverse.py async def get_favorite_count ( self ) -> int : \"\"\" Grabs the universe's favorite count. Returns: The universe's favorite count. \"\"\" favorite_count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites/count\" ) ) favorite_count_data = favorite_count_response . json () return favorite_count_data [ \"favoritesCount\" ]","title":"get_favorite_count()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_gamepasses","text":"Gets the universe's gamepasses. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the universe's gamepasses. Source code in roblox/bases/baseuniverse.py def get_gamepasses ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the universe's gamepasses. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the universe's gamepasses. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /game-passes\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : GamePass ( client , data ), )","title":"get_gamepasses()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_live_stats","text":"Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: Type Description UniverseLiveStats The universe's live stats. Source code in roblox/bases/baseuniverse.py async def get_live_stats ( self ) -> UniverseLiveStats : \"\"\" Gets the universe's live stats. This data does not update live. These are just the stats that are shown on the website's live stats display. Returns: The universe's live stats. \"\"\" stats_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"develop\" , f \"v1/universes/ { self . id } /live-stats\" ) ) stats_data = stats_response . json () return UniverseLiveStats ( data = stats_data )","title":"get_live_stats()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.get_social_links","text":"Gets the universe's social links. Returns: Type Description List[SocialLink] A list of the universe's social links. Source code in roblox/bases/baseuniverse.py async def get_social_links ( self ) -> List [ SocialLink ]: \"\"\" Gets the universe's social links. Returns: A list of the universe's social links. \"\"\" links_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /social-links/list\" ) ) links_data = links_response . json ()[ \"data\" ] return [ SocialLink ( client = self . _client , data = link_data ) for link_data in links_data ]","title":"get_social_links()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.BaseUniverse.is_favorited","text":"Grabs the authenticated user's favorite status for this game. Returns: Type Description bool Whether the authenticated user has favorited this game. Source code in roblox/bases/baseuniverse.py async def is_favorited ( self ) -> bool : \"\"\" Grabs the authenticated user's favorite status for this game. Returns: Whether the authenticated user has favorited this game. \"\"\" is_favorited_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"games\" , f \"v1/games/ { self . id } /favorites\" ) ) is_favorited_data = is_favorited_response . json () return is_favorited_data [ \"isFavorited\" ]","title":"is_favorited()"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.UniverseLiveStats","text":"Represents a universe's live stats. Attributes: Name Type Description total_player_count int The amount of players present in this universe's subplaces. game_count int The amount of active servers for this universe's subplaces. player_counts_by_device_type Dict[str, int] A dictionary where the keys are device types and the values are the amount of this universe's subplace's active players which are on that device type. Source code in roblox/bases/baseuniverse.py class UniverseLiveStats : \"\"\" Represents a universe's live stats. Attributes: total_player_count: The amount of players present in this universe's subplaces. game_count: The amount of active servers for this universe's subplaces. player_counts_by_device_type: A dictionary where the keys are device types and the values are the amount of this universe's subplace's active players which are on that device type. \"\"\" def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ]","title":"UniverseLiveStats"},{"location":"reference/roblox/bases/baseuniverse/#roblox.bases.baseuniverse.UniverseLiveStats.__init__","text":"Source code in roblox/bases/baseuniverse.py def __init__ ( self , data : dict ): self . total_player_count : int = data [ \"totalPlayerCount\" ] self . game_count : int = data [ \"gameCount\" ] self . player_counts_by_device_type : Dict [ str , int ] = data [ \"playerCountsByDeviceType\" ]","title":"__init__()"},{"location":"reference/roblox/bases/baseuser/","text":"roblox.bases.baseuser \u00b6 This file contains the BaseUser object, which represents a Roblox user ID. BaseUser ( BaseItem ) \u00b6 Represents a Roblox user ID. Attributes: Name Type Description id int The user ID. Source code in roblox/bases/baseuser.py class BaseUser ( BaseItem ): \"\"\" Represents a Roblox user ID. Attributes: id: The user ID. \"\"\" def __init__ ( self , client : Client , user_id : int ): \"\"\" Arguments: client: The Client this object belongs to. user_id: The user ID. \"\"\" self . _client : Client = client self . id : int = user_id def username_history ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Grabs the user's username history. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : data [ \"name\" ], ) async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence, if they have an active presence. \"\"\" presences = await self . _client . presence . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( client = self . _client , data = friend_data ) for friend_data in friends_data ] async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. Returns: The user's Robux amount. \"\"\" currency_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ] async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\" async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, if it exists. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( client = self . _client , data = instance_data [ 0 ] ) else : return None async def get_asset_instance ( self , asset : AssetOrAssetId ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An asset instance, if the user owns this asset. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = int ( asset ) ) async def get_gamepass_instance ( self , gamepass : GamePassOrGamePassId ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: An gamepass instance, if the user owns this gamepass. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = int ( gamepass ) ) async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Gets the dates that each badge in a list of badges were awarded to this user. Returns: A list of partial badges containing badge awarded dates. \"\"\" awarded_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( client = self . _client , data = partial_data ) for partial_data in awarded_data ] async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets a list of roles for all groups this user is in. Returns: A list of roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( client = self . _client , data = role_data [ \"role\" ], group = Group ( client = self . _client , data = role_data [ \"group\" ] ) ) for role_data in roles_data ] async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( client = self . _client , data = badge_data ) for badge_data in badges_data ] async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data ) async def _get_friend_channel_count ( self , channel : str ) -> int : count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } / { channel } /count\" ) ) return count_response . json ()[ \"count\" ] def _get_friend_channel_iterator ( self , channel : str , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : from ..friends import Friend return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } / { channel } \" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Friend ( client = client , data = data ) ) async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" ) async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" ) async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" ) def get_followers ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followers. Returns: A PageIterator containing everyone who follows this user. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , page_size = page_size , sort_order = sort_order , max_items = max_items , ) def get_followings ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing everyone that this user is following. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , page_size = page_size , sort_order = sort_order , max_items = max_items , ) __init__ ( self , client : Client , user_id : int ) special \u00b6 Parameters: Name Type Description Default client Client The Client this object belongs to. required user_id int The user ID. required Source code in roblox/bases/baseuser.py def __init__ ( self , client : Client , user_id : int ): \"\"\" Arguments: client: The Client this object belongs to. user_id: The user ID. \"\"\" self . _client : Client = client self . id : int = user_id get_asset_instance ( self , asset : AssetOrAssetId ) -> Optional [ AssetInstance ] async \u00b6 Checks if a user owns the asset, and returns details about the asset if they do. Returns: Type Description Optional[AssetInstance] An asset instance, if the user owns this asset. Source code in roblox/bases/baseuser.py async def get_asset_instance ( self , asset : AssetOrAssetId ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An asset instance, if the user owns this asset. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = int ( asset ) ) get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ] async \u00b6 Gets the dates that each badge in a list of badges were awarded to this user. Returns: Type Description List[PartialBadge] A list of partial badges containing badge awarded dates. Source code in roblox/bases/baseuser.py async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Gets the dates that each badge in a list of badges were awarded to this user. Returns: A list of partial badges containing badge awarded dates. \"\"\" awarded_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( client = self . _client , data = partial_data ) for partial_data in awarded_data ] get_currency ( self ) -> int async \u00b6 Grabs the user's current Robux amount. Only works on the authenticated user. Returns: Type Description int The user's Robux amount. Source code in roblox/bases/baseuser.py async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. Returns: The user's Robux amount. \"\"\" currency_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ] get_follower_count ( self ) -> int async \u00b6 Gets the user's follower count. Returns: Type Description int The user's follower count. Source code in roblox/bases/baseuser.py async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" ) get_followers ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets the user's followers. Returns: Type Description PageIterator A PageIterator containing everyone who follows this user. Source code in roblox/bases/baseuser.py def get_followers ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followers. Returns: A PageIterator containing everyone who follows this user. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , page_size = page_size , sort_order = sort_order , max_items = max_items , ) get_following_count ( self ) -> int async \u00b6 Gets the user's following count. Returns: Type Description int The user's following count. Source code in roblox/bases/baseuser.py async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" ) get_followings ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing everyone that this user is following. Source code in roblox/bases/baseuser.py def get_followings ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing everyone that this user is following. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , page_size = page_size , sort_order = sort_order , max_items = max_items , ) get_friend_count ( self ) -> int async \u00b6 Gets the user's friend count. Returns: Type Description int The user's friend count. Source code in roblox/bases/baseuser.py async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" ) get_friends ( self ) -> List [ Friend ] async \u00b6 Grabs the user's friends. Returns: Type Description List[Friend] A list of the user's friends. Source code in roblox/bases/baseuser.py async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( client = self . _client , data = friend_data ) for friend_data in friends_data ] get_gamepass_instance ( self , gamepass : GamePassOrGamePassId ) -> Optional [ GamePassInstance ] async \u00b6 Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: Type Description Optional[GamePassInstance] An gamepass instance, if the user owns this gamepass. Source code in roblox/bases/baseuser.py async def get_gamepass_instance ( self , gamepass : GamePassOrGamePassId ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: An gamepass instance, if the user owns this gamepass. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = int ( gamepass ) ) get_group_roles ( self ) -> List [ Role ] async \u00b6 Gets a list of roles for all groups this user is in. Returns: Type Description List[Role] A list of roles. Source code in roblox/bases/baseuser.py async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets a list of roles for all groups this user is in. Returns: A list of roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( client = self . _client , data = role_data [ \"role\" ], group = Group ( client = self . _client , data = role_data [ \"group\" ] ) ) for role_data in roles_data ] get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ] async \u00b6 Gets an item instance for a specific user. Parameters: Name Type Description Default item_type InstanceType The type of item to get an instance for. required item_id int The item's ID. required Source code in roblox/bases/baseuser.py async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, if it exists. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( client = self . _client , data = instance_data [ 0 ] ) else : return None get_presence ( self ) -> Optional [ Presence ] async \u00b6 Grabs the user's presence. Returns: Type Description Optional[Presence] The user's presence, if they have an active presence. Source code in roblox/bases/baseuser.py async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence, if they have an active presence. \"\"\" presences = await self . _client . presence . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None get_promotion_channels ( self ) -> UserPromotionChannels async \u00b6 Gets the user's promotion channels. Returns: Type Description UserPromotionChannels The user's promotion channels. Source code in roblox/bases/baseuser.py async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data ) get_roblox_badges ( self ) -> List [ RobloxBadge ] async \u00b6 Gets the user's Roblox badges. Returns: Type Description List[RobloxBadge] A list of Roblox badges. Source code in roblox/bases/baseuser.py async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( client = self . _client , data = badge_data ) for badge_data in badges_data ] has_premium ( self ) -> bool async \u00b6 Checks if the user has a Roblox Premium membership. Returns: Type Description bool Whether the user has Premium or not. Source code in roblox/bases/baseuser.py async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\" username_history ( self , page_size : int = 10 , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , max_items : int = None ) -> PageIterator \u00b6 Grabs the user's username history. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the user's username history. Source code in roblox/bases/baseuser.py def username_history ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Grabs the user's username history. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : data [ \"name\" ], )","title":"baseuser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser","text":"This file contains the BaseUser object, which represents a Roblox user ID.","title":"baseuser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser","text":"Represents a Roblox user ID. Attributes: Name Type Description id int The user ID. Source code in roblox/bases/baseuser.py class BaseUser ( BaseItem ): \"\"\" Represents a Roblox user ID. Attributes: id: The user ID. \"\"\" def __init__ ( self , client : Client , user_id : int ): \"\"\" Arguments: client: The Client this object belongs to. user_id: The user ID. \"\"\" self . _client : Client = client self . id : int = user_id def username_history ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Grabs the user's username history. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : data [ \"name\" ], ) async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence, if they have an active presence. \"\"\" presences = await self . _client . presence . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( client = self . _client , data = friend_data ) for friend_data in friends_data ] async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. Returns: The user's Robux amount. \"\"\" currency_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ] async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\" async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, if it exists. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( client = self . _client , data = instance_data [ 0 ] ) else : return None async def get_asset_instance ( self , asset : AssetOrAssetId ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An asset instance, if the user owns this asset. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = int ( asset ) ) async def get_gamepass_instance ( self , gamepass : GamePassOrGamePassId ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: An gamepass instance, if the user owns this gamepass. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = int ( gamepass ) ) async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Gets the dates that each badge in a list of badges were awarded to this user. Returns: A list of partial badges containing badge awarded dates. \"\"\" awarded_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( client = self . _client , data = partial_data ) for partial_data in awarded_data ] async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets a list of roles for all groups this user is in. Returns: A list of roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( client = self . _client , data = role_data [ \"role\" ], group = Group ( client = self . _client , data = role_data [ \"group\" ] ) ) for role_data in roles_data ] async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( client = self . _client , data = badge_data ) for badge_data in badges_data ] async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data ) async def _get_friend_channel_count ( self , channel : str ) -> int : count_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } / { channel } /count\" ) ) return count_response . json ()[ \"count\" ] def _get_friend_channel_iterator ( self , channel : str , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : from ..friends import Friend return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } / { channel } \" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : Friend ( client = client , data = data ) ) async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" ) async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" ) async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" ) def get_followers ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followers. Returns: A PageIterator containing everyone who follows this user. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , page_size = page_size , sort_order = sort_order , max_items = max_items , ) def get_followings ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing everyone that this user is following. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , page_size = page_size , sort_order = sort_order , max_items = max_items , )","title":"BaseUser"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.__init__","text":"Parameters: Name Type Description Default client Client The Client this object belongs to. required user_id int The user ID. required Source code in roblox/bases/baseuser.py def __init__ ( self , client : Client , user_id : int ): \"\"\" Arguments: client: The Client this object belongs to. user_id: The user ID. \"\"\" self . _client : Client = client self . id : int = user_id","title":"__init__()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_asset_instance","text":"Checks if a user owns the asset, and returns details about the asset if they do. Returns: Type Description Optional[AssetInstance] An asset instance, if the user owns this asset. Source code in roblox/bases/baseuser.py async def get_asset_instance ( self , asset : AssetOrAssetId ) -> Optional [ AssetInstance ]: \"\"\" Checks if a user owns the asset, and returns details about the asset if they do. Returns: An asset instance, if the user owns this asset. \"\"\" return await self . get_item_instance ( item_type = InstanceType . asset , item_id = int ( asset ) )","title":"get_asset_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_badge_awarded_dates","text":"Gets the dates that each badge in a list of badges were awarded to this user. Returns: Type Description List[PartialBadge] A list of partial badges containing badge awarded dates. Source code in roblox/bases/baseuser.py async def get_badge_awarded_dates ( self , badges : list [ BaseBadge ]) -> List [ PartialBadge ]: \"\"\" Gets the dates that each badge in a list of badges were awarded to this user. Returns: A list of partial badges containing badge awarded dates. \"\"\" awarded_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"badges\" , f \"v1/users/ { self . id } /badges/awarded-dates\" ), params = { \"badgeIds\" : [ badge . id for badge in badges ] } ) awarded_data : list = awarded_response . json ()[ \"data\" ] return [ PartialBadge ( client = self . _client , data = partial_data ) for partial_data in awarded_data ]","title":"get_badge_awarded_dates()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_currency","text":"Grabs the user's current Robux amount. Only works on the authenticated user. Returns: Type Description int The user's Robux amount. Source code in roblox/bases/baseuser.py async def get_currency ( self ) -> int : \"\"\" Grabs the user's current Robux amount. Only works on the authenticated user. Returns: The user's Robux amount. \"\"\" currency_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"economy\" , f \"v1/users/ { self . id } /currency\" ) ) currency_data = currency_response . json () return currency_data [ \"robux\" ]","title":"get_currency()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_follower_count","text":"Gets the user's follower count. Returns: Type Description int The user's follower count. Source code in roblox/bases/baseuser.py async def get_follower_count ( self ) -> int : \"\"\" Gets the user's follower count. Returns: The user's follower count. \"\"\" return await self . _get_friend_channel_count ( \"followers\" )","title":"get_follower_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followers","text":"Gets the user's followers. Returns: Type Description PageIterator A PageIterator containing everyone who follows this user. Source code in roblox/bases/baseuser.py def get_followers ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followers. Returns: A PageIterator containing everyone who follows this user. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followers\" , page_size = page_size , sort_order = sort_order , max_items = max_items , )","title":"get_followers()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_following_count","text":"Gets the user's following count. Returns: Type Description int The user's following count. Source code in roblox/bases/baseuser.py async def get_following_count ( self ) -> int : \"\"\" Gets the user's following count. Returns: The user's following count. \"\"\" return await self . _get_friend_channel_count ( \"followings\" )","title":"get_following_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_followings","text":"Gets the user's followings. Returns: Type Description PageIterator A PageIterator containing everyone that this user is following. Source code in roblox/bases/baseuser.py def get_followings ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Gets the user's followings. Returns: A PageIterator containing everyone that this user is following. \"\"\" return self . _get_friend_channel_iterator ( channel = \"followings\" , page_size = page_size , sort_order = sort_order , max_items = max_items , )","title":"get_followings()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friend_count","text":"Gets the user's friend count. Returns: Type Description int The user's friend count. Source code in roblox/bases/baseuser.py async def get_friend_count ( self ) -> int : \"\"\" Gets the user's friend count. Returns: The user's friend count. \"\"\" return await self . _get_friend_channel_count ( \"friends\" )","title":"get_friend_count()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_friends","text":"Grabs the user's friends. Returns: Type Description List[Friend] A list of the user's friends. Source code in roblox/bases/baseuser.py async def get_friends ( self ) -> List [ Friend ]: \"\"\" Grabs the user's friends. Returns: A list of the user's friends. \"\"\" from ..friends import Friend friends_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"friends\" , f \"v1/users/ { self . id } /friends\" ) ) friends_data = friends_response . json ()[ \"data\" ] return [ Friend ( client = self . _client , data = friend_data ) for friend_data in friends_data ]","title":"get_friends()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_gamepass_instance","text":"Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: Type Description Optional[GamePassInstance] An gamepass instance, if the user owns this gamepass. Source code in roblox/bases/baseuser.py async def get_gamepass_instance ( self , gamepass : GamePassOrGamePassId ) -> Optional [ GamePassInstance ]: \"\"\" Checks if a user owns the gamepass, and returns details about the asset if they do. Returns: An gamepass instance, if the user owns this gamepass. \"\"\" return await self . get_item_instance ( item_type = InstanceType . gamepass , item_id = int ( gamepass ) )","title":"get_gamepass_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_group_roles","text":"Gets a list of roles for all groups this user is in. Returns: Type Description List[Role] A list of roles. Source code in roblox/bases/baseuser.py async def get_group_roles ( self ) -> List [ Role ]: \"\"\" Gets a list of roles for all groups this user is in. Returns: A list of roles. \"\"\" from ..roles import Role from ..groups import Group roles_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"groups\" , f \"v1/users/ { self . id } /groups/roles\" ) ) roles_data = roles_response . json ()[ \"data\" ] return [ Role ( client = self . _client , data = role_data [ \"role\" ], group = Group ( client = self . _client , data = role_data [ \"group\" ] ) ) for role_data in roles_data ]","title":"get_group_roles()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_item_instance","text":"Gets an item instance for a specific user. Parameters: Name Type Description Default item_type InstanceType The type of item to get an instance for. required item_id int The item's ID. required Source code in roblox/bases/baseuser.py async def get_item_instance ( self , item_type : InstanceType , item_id : int ) -> Optional [ ItemInstance ]: \"\"\" Gets an item instance for a specific user. Arguments: item_type: The type of item to get an instance for. item_id: The item's ID. Returns: An ItemInstance, if it exists. \"\"\" item_type : str = item_type . value . lower () # this is so we can have special classes for other types item_class = instance_classes . get ( item_type ) or ItemInstance instance_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"inventory\" , f \"v1/users/ { self . id } /items/ { item_type } / { item_id } \" ) ) instance_data = instance_response . json ()[ \"data\" ] if len ( instance_data ) > 0 : return item_class ( client = self . _client , data = instance_data [ 0 ] ) else : return None","title":"get_item_instance()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_presence","text":"Grabs the user's presence. Returns: Type Description Optional[Presence] The user's presence, if they have an active presence. Source code in roblox/bases/baseuser.py async def get_presence ( self ) -> Optional [ Presence ]: \"\"\" Grabs the user's presence. Returns: The user's presence, if they have an active presence. \"\"\" presences = await self . _client . presence . get_user_presences ([ self . id ]) try : return presences [ 0 ] except IndexError : return None","title":"get_presence()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_promotion_channels","text":"Gets the user's promotion channels. Returns: Type Description UserPromotionChannels The user's promotion channels. Source code in roblox/bases/baseuser.py async def get_promotion_channels ( self ) -> UserPromotionChannels : \"\"\" Gets the user's promotion channels. Returns: The user's promotion channels. \"\"\" channels_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /promotion-channels\" ) ) channels_data = channels_response . json () return UserPromotionChannels ( data = channels_data )","title":"get_promotion_channels()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.get_roblox_badges","text":"Gets the user's Roblox badges. Returns: Type Description List[RobloxBadge] A list of Roblox badges. Source code in roblox/bases/baseuser.py async def get_roblox_badges ( self ) -> List [ RobloxBadge ]: \"\"\" Gets the user's Roblox badges. Returns: A list of Roblox badges. \"\"\" badges_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"accountinformation\" , f \"v1/users/ { self . id } /roblox-badges\" ) ) badges_data = badges_response . json () return [ RobloxBadge ( client = self . _client , data = badge_data ) for badge_data in badges_data ]","title":"get_roblox_badges()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.has_premium","text":"Checks if the user has a Roblox Premium membership. Returns: Type Description bool Whether the user has Premium or not. Source code in roblox/bases/baseuser.py async def has_premium ( self ) -> bool : \"\"\" Checks if the user has a Roblox Premium membership. Returns: Whether the user has Premium or not. \"\"\" premium_response = await self . _client . requests . get ( url = self . _client . url_generator . get_url ( \"premiumfeatures\" , f \"v1/users/ { self . id } /validate-membership\" ) ) premium_data = premium_response . text return premium_data == \"true\"","title":"has_premium()"},{"location":"reference/roblox/bases/baseuser/#roblox.bases.baseuser.BaseUser.username_history","text":"Grabs the user's username history. Parameters: Name Type Description Default page_size int How many members should be returned for each page. 10 sort_order SortOrder Order in which data should be grabbed. <SortOrder.Ascending: 'Asc'> max_items int The maximum items to return when looping through this object. None Returns: Type Description PageIterator A PageIterator containing the user's username history. Source code in roblox/bases/baseuser.py def username_history ( self , page_size : int = 10 , sort_order : SortOrder = SortOrder . Ascending , max_items : int = None ) -> PageIterator : \"\"\" Grabs the user's username history. Arguments: page_size: How many members should be returned for each page. sort_order: Order in which data should be grabbed. max_items: The maximum items to return when looping through this object. Returns: A PageIterator containing the user's username history. \"\"\" return PageIterator ( client = self . _client , url = self . _client . url_generator . get_url ( \"users\" , f \"v1/users/ { self . id } /username-history\" ), page_size = page_size , sort_order = sort_order , max_items = max_items , handler = lambda client , data : data [ \"name\" ], )","title":"username_history()"},{"location":"reference/roblox/partials/__init__/","text":"roblox.partials.__init__ special \u00b6 Contains partial objects representing objects on Roblox. Some endpoints return some, but not all, data for an object, and these partial objects represent that data.","title":"__init__"},{"location":"reference/roblox/partials/__init__/#roblox.partials.__init__","text":"Contains partial objects representing objects on Roblox. Some endpoints return some, but not all, data for an object, and these partial objects represent that data.","title":"__init__"},{"location":"reference/roblox/partials/partialbadge/","text":"roblox.partials.partialbadge \u00b6 This file contains partial objects related to Roblox badges. PartialBadge ( BaseBadge ) \u00b6 Represents partial badge data. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The cCient object, which is passed to all objects this Client generates. id int The universe ID. awarded datetime The date when the badge was awarded. Source code in roblox/partials/partialbadge.py class PartialBadge ( BaseBadge ): \"\"\" Represents partial badge data. Attributes: _data: The data we get back from the endpoint. _client: The cCient object, which is passed to all objects this Client generates. id: The universe ID. awarded: The date when the badge was awarded. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"badgeId\" ] super () . __init__ ( client = client , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The raw data. required Source code in roblox/partials/partialbadge.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"badgeId\" ] super () . __init__ ( client = client , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialbadge.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\"","title":"partialbadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge","text":"This file contains partial objects related to Roblox badges.","title":"partialbadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge","text":"Represents partial badge data. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The cCient object, which is passed to all objects this Client generates. id int The universe ID. awarded datetime The date when the badge was awarded. Source code in roblox/partials/partialbadge.py class PartialBadge ( BaseBadge ): \"\"\" Represents partial badge data. Attributes: _data: The data we get back from the endpoint. _client: The cCient object, which is passed to all objects this Client generates. id: The universe ID. awarded: The date when the badge was awarded. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"badgeId\" ] super () . __init__ ( client = client , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\"","title":"PartialBadge"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The raw data. required Source code in roblox/partials/partialbadge.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"badgeId\" ] super () . __init__ ( client = client , badge_id = self . id ) self . awarded : datetime = parse ( data [ \"awardedDate\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialbadge/#roblox.partials.partialbadge.PartialBadge.__repr__","text":"Source code in roblox/partials/partialbadge.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } awarded= { self . awarded } >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialgroup/","text":"roblox.partials.partialgroup \u00b6 This file contains partial objects related to Roblox groups. AssetPartialGroup ( BaseGroup ) \u00b6 Represents a partial group in the context of a Roblox asset. Intended to parse the data[0][\"creator\"] data from https://games.roblox.com/v1/games . Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. id int The group's name. creator BaseUser The group's owner. name str The group's name. has_verified_badge bool If the group has a verified badge. Source code in roblox/partials/partialgroup.py class AssetPartialGroup ( BaseGroup ): \"\"\" Represents a partial group in the context of a Roblox asset. Intended to parse the `data[0][\"creator\"]` data from https://games.roblox.com/v1/games. Attributes: _client: The Client object, which is passed to all objects this Client generates. id: The group's name. creator: The group's owner. name: The group's name. has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . creator : BaseUser = BaseUser ( client = client , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] self . has_verified_badge : bool = data [ \"HasVerifiedBadge\" ] super () . __init__ ( client , self . id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . creator : BaseUser = BaseUser ( client = client , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] self . has_verified_badge : bool = data [ \"HasVerifiedBadge\" ] super () . __init__ ( client , self . id ) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" UniversePartialGroup ( BaseGroup ) \u00b6 Represents a partial group in the context of a Roblox universe. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The client object, which is passed to all objects this client generates. id Id of the group name str Name of the group has_verified_badge bool If the group has a verified badge. Source code in roblox/partials/partialgroup.py class UniversePartialGroup ( BaseGroup ): \"\"\" Represents a partial group in the context of a Roblox universe. Attributes: _data: The data we get back from the endpoint. _client: The client object, which is passed to all objects this client generates. id: Id of the group name: Name of the group has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] super () . __init__ ( client , self . id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The ClientSharedObject. required data dict The data from the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] super () . __init__ ( client , self . id ) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"partialgroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup","text":"This file contains partial objects related to Roblox groups.","title":"partialgroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup","text":"Represents a partial group in the context of a Roblox asset. Intended to parse the data[0][\"creator\"] data from https://games.roblox.com/v1/games . Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. id int The group's name. creator BaseUser The group's owner. name str The group's name. has_verified_badge bool If the group has a verified badge. Source code in roblox/partials/partialgroup.py class AssetPartialGroup ( BaseGroup ): \"\"\" Represents a partial group in the context of a Roblox asset. Intended to parse the `data[0][\"creator\"]` data from https://games.roblox.com/v1/games. Attributes: _client: The Client object, which is passed to all objects this Client generates. id: The group's name. creator: The group's owner. name: The group's name. has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . creator : BaseUser = BaseUser ( client = client , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] self . has_verified_badge : bool = data [ \"HasVerifiedBadge\" ] super () . __init__ ( client , self . id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"AssetPartialGroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . creator : BaseUser = BaseUser ( client = client , user_id = data [ \"Id\" ]) self . id : int = data [ \"CreatorTargetId\" ] self . name : str = data [ \"Name\" ] self . has_verified_badge : bool = data [ \"HasVerifiedBadge\" ] super () . __init__ ( client , self . id )","title":"__init__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.AssetPartialGroup.__repr__","text":"Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup","text":"Represents a partial group in the context of a Roblox universe. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The client object, which is passed to all objects this client generates. id Id of the group name str Name of the group has_verified_badge bool If the group has a verified badge. Source code in roblox/partials/partialgroup.py class UniversePartialGroup ( BaseGroup ): \"\"\" Represents a partial group in the context of a Roblox universe. Attributes: _data: The data we get back from the endpoint. _client: The client object, which is passed to all objects this client generates. id: Id of the group name: Name of the group has_verified_badge: If the group has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] super () . __init__ ( client , self . id ) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"UniversePartialGroup"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup.__init__","text":"Parameters: Name Type Description Default client Client The ClientSharedObject. required data dict The data from the endpoint. required Source code in roblox/partials/partialgroup.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id = data [ \"id\" ] self . name : str = data [ \"name\" ] self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] super () . __init__ ( client , self . id )","title":"__init__()"},{"location":"reference/roblox/partials/partialgroup/#roblox.partials.partialgroup.UniversePartialGroup.__repr__","text":"Source code in roblox/partials/partialgroup.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialrole/","text":"roblox.partials.partialrole \u00b6 This file contains partial objects related to Roblox group roles. PartialRole ( BaseRole ) \u00b6 Represents partial group role information. Attributes: Name Type Description _client Client The Client object. id int The role's ID. name str The role's name. rank int The role's rank ID. Source code in roblox/partials/partialrole.py class PartialRole ( BaseRole ): \"\"\" Represents partial group role information. Attributes: _client: The Client object. id: The role's ID. name: The role's name. rank: The role's rank ID. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/partials/partialrole.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ] __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialrole.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\"","title":"partialrole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole","text":"This file contains partial objects related to Roblox group roles.","title":"partialrole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole","text":"Represents partial group role information. Attributes: Name Type Description _client Client The Client object. id int The role's ID. name str The role's name. rank int The role's rank ID. Source code in roblox/partials/partialrole.py class PartialRole ( BaseRole ): \"\"\" Represents partial group role information. Attributes: _client: The Client object. id: The role's ID. name: The role's name. rank: The role's rank ID. \"\"\" def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\"","title":"PartialRole"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole.__init__","text":"Source code in roblox/partials/partialrole.py def __init__ ( self , client : Client , data : dict ): self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = self . _client , role_id = self . id ) self . name : str = data [ \"name\" ] self . rank : int = data [ \"rank\" ]","title":"__init__()"},{"location":"reference/roblox/partials/partialrole/#roblox.partials.partialrole.PartialRole.__repr__","text":"Source code in roblox/partials/partialrole.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} rank= { self . rank } >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuniverse/","text":"roblox.partials.partialuniverse \u00b6 This file contains partial objects related to Roblox universes. ChatPartialUniverse ( BaseUniverse ) \u00b6 Represents a partial universe in the context of a chat conversation. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The client object, which is passed to all objects this client generates. id int The universe ID. root_place BasePlace The universe's root place. Source code in roblox/partials/partialuniverse.py class ChatPartialUniverse ( BaseUniverse ): \"\"\" Represents a partial universe in the context of a chat conversation. Attributes: _data: The data we get back from the endpoint. _client: The client object, which is passed to all objects this client generates. id: The universe ID. root_place: The universe's root place. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"universeId\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"universeId\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) PartialUniverse ( BaseUniverse ) \u00b6 Represents partial universe information. Attributes:. _client: The Client object, which is passed to all objects this Client generates. id: The universe ID. name: The name of the universe. root_place: The universe's root place. Source code in roblox/partials/partialuniverse.py class PartialUniverse ( BaseUniverse ): \"\"\" Represents partial universe information. Attributes:. _client: The Client object, which is passed to all objects this Client generates. id: The universe ID. name: The name of the universe. root_place: The universe's root place. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialuniverse.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"partialuniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse","text":"This file contains partial objects related to Roblox universes.","title":"partialuniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse","text":"Represents a partial universe in the context of a chat conversation. Attributes: Name Type Description _data The data we get back from the endpoint. _client Client The client object, which is passed to all objects this client generates. id int The universe ID. root_place BasePlace The universe's root place. Source code in roblox/partials/partialuniverse.py class ChatPartialUniverse ( BaseUniverse ): \"\"\" Represents a partial universe in the context of a chat conversation. Attributes: _data: The data we get back from the endpoint. _client: The client object, which is passed to all objects this client generates. id: The universe ID. root_place: The universe's root place. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"universeId\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ])","title":"ChatPartialUniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.ChatPartialUniverse.__init__","text":"Parameters: Name Type Description Default client Client The ClientSharedObject. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The ClientSharedObject. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"universeId\" ] super () . __init__ ( client = client , universe_id = self . id ) self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse","text":"Represents partial universe information. Attributes:. _client: The Client object, which is passed to all objects this Client generates. id: The universe ID. name: The name of the universe. root_place: The universe's root place. Source code in roblox/partials/partialuniverse.py class PartialUniverse ( BaseUniverse ): \"\"\" Represents partial universe information. Attributes:. _client: The Client object, which is passed to all objects this Client generates. id: The universe ID. name: The name of the universe. root_place: The universe's root place. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ]) def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"PartialUniverse"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The raw data. required Source code in roblox/partials/partialuniverse.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The raw data. \"\"\" self . _client : Client = client self . id : int = data [ \"id\" ] super () . __init__ ( client = client , universe_id = self . id ) self . name : str = data [ \"name\" ] self . root_place : BasePlace = BasePlace ( client = client , place_id = data [ \"rootPlaceId\" ])","title":"__init__()"},{"location":"reference/roblox/partials/partialuniverse/#roblox.partials.partialuniverse.PartialUniverse.__repr__","text":"Source code in roblox/partials/partialuniverse.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuser/","text":"roblox.partials.partialuser \u00b6 This file contains partial objects related to Roblox users. PartialUser ( BaseUser ) \u00b6 Represents partial user information. Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. id int The user's ID. name str The user's name. display_name str The user's display name. has_verified_badge bool If the user has a verified badge. Source code in roblox/partials/partialuser.py class PartialUser ( BaseUser ): \"\"\" Represents partial user information. Attributes: _client: The Client object, which is passed to all objects this Client generates. id: The user's ID. name: The user's name. display_name: The user's display name. has_verified_badge: If the user has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( client = client , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" ) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\" __init__ ( self , client : Client , data : dict ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( client = client , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" ) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] __repr__ ( self ) special \u00b6 Source code in roblox/partials/partialuser.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\" PreviousUsernamesPartialUser ( PartialUser ) \u00b6 Represents a partial user in the context of a search where the user's previous usernames are present. Attributes: Name Type Description previous_usernames List[str] A list of the user's previous usernames. Source code in roblox/partials/partialuser.py class PreviousUsernamesPartialUser ( PartialUser ): \"\"\" Represents a partial user in the context of a search where the user's previous usernames are present. Attributes: previous_usernames: A list of the user's previous usernames. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . previous_usernames : List [ str ] = data [ \"previousUsernames\" ] __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . previous_usernames : List [ str ] = data [ \"previousUsernames\" ] RequestedUsernamePartialUser ( PartialUser ) \u00b6 Represents a partial user in the context of a search where the requested username is present. Attributes: Name Type Description requested_username Optional[str] The requested username. Source code in roblox/partials/partialuser.py class RequestedUsernamePartialUser ( PartialUser ): \"\"\" Represents a partial user in the context of a search where the requested username is present. Attributes: requested_username: The requested username. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . requested_username : Optional [ str ] = data . get ( \"requestedUsername\" ) __init__ ( self , client : Client , data : dict ) special \u00b6 Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . requested_username : Optional [ str ] = data . get ( \"requestedUsername\" )","title":"partialuser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser","text":"This file contains partial objects related to Roblox users.","title":"partialuser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser","text":"Represents partial user information. Attributes: Name Type Description _client Client The Client object, which is passed to all objects this Client generates. id int The user's ID. name str The user's name. display_name str The user's display name. has_verified_badge bool If the user has a verified badge. Source code in roblox/partials/partialuser.py class PartialUser ( BaseUser ): \"\"\" Represents partial user information. Attributes: _client: The Client object, which is passed to all objects this Client generates. id: The user's ID. name: The user's name. display_name: The user's display name. has_verified_badge: If the user has a verified badge. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( client = client , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" ) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ] def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"PartialUser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser.__init__","text":"Parameters: Name Type Description Default client Client The Client. required data dict The data from the endpoint. required Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" self . _client : Client = client self . id : int = data . get ( \"id\" ) or data . get ( \"userId\" ) or data . get ( \"Id\" ) super () . __init__ ( client = client , user_id = self . id ) self . name : str = data . get ( \"name\" ) or data . get ( \"Name\" ) or data . get ( \"username\" ) or data . get ( \"Username\" ) self . display_name : str = data . get ( \"displayName\" ) self . has_verified_badge : bool = data [ \"hasVerifiedBadge\" ]","title":"__init__()"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PartialUser.__repr__","text":"Source code in roblox/partials/partialuser.py def __repr__ ( self ): return f \"< { self . __class__ . __name__ } id= { self . id } name= { self . name !r} display_name= { self . display_name !r} >\"","title":"__repr__()"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PreviousUsernamesPartialUser","text":"Represents a partial user in the context of a search where the user's previous usernames are present. Attributes: Name Type Description previous_usernames List[str] A list of the user's previous usernames. Source code in roblox/partials/partialuser.py class PreviousUsernamesPartialUser ( PartialUser ): \"\"\" Represents a partial user in the context of a search where the user's previous usernames are present. Attributes: previous_usernames: A list of the user's previous usernames. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . previous_usernames : List [ str ] = data [ \"previousUsernames\" ]","title":"PreviousUsernamesPartialUser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.PreviousUsernamesPartialUser.__init__","text":"Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . previous_usernames : List [ str ] = data [ \"previousUsernames\" ]","title":"__init__()"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser","text":"Represents a partial user in the context of a search where the requested username is present. Attributes: Name Type Description requested_username Optional[str] The requested username. Source code in roblox/partials/partialuser.py class RequestedUsernamePartialUser ( PartialUser ): \"\"\" Represents a partial user in the context of a search where the requested username is present. Attributes: requested_username: The requested username. \"\"\" def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . requested_username : Optional [ str ] = data . get ( \"requestedUsername\" )","title":"RequestedUsernamePartialUser"},{"location":"reference/roblox/partials/partialuser/#roblox.partials.partialuser.RequestedUsernamePartialUser.__init__","text":"Source code in roblox/partials/partialuser.py def __init__ ( self , client : Client , data : dict ): \"\"\" Arguments: client: The Client. data: The data from the endpoint. \"\"\" super () . __init__ ( client = client , data = data ) self . requested_username : Optional [ str ] = data . get ( \"requestedUsername\" )","title":"__init__()"},{"location":"reference/roblox/utilities/__init__/","text":"roblox.utilities.__init__ special \u00b6 Contains utilities used internally for ro.py.","title":"__init__"},{"location":"reference/roblox/utilities/__init__/#roblox.utilities.__init__","text":"Contains utilities used internally for ro.py.","title":"__init__"},{"location":"reference/roblox/utilities/exceptions/","text":"roblox.utilities.exceptions \u00b6 Contains exceptions used by ro.py. AssetNotFound ( ItemNotFound ) \u00b6 Raised for invalid asset IDs. Source code in roblox/utilities/exceptions.py class AssetNotFound ( ItemNotFound ): \"\"\" Raised for invalid asset IDs. \"\"\" pass BadRequest ( HTTPException ) \u00b6 HTTP exception raised for status code 400. Source code in roblox/utilities/exceptions.py class BadRequest ( HTTPException ): \"\"\"HTTP exception raised for status code 400.\"\"\" pass BadgeNotFound ( ItemNotFound ) \u00b6 Raised for invalid badge IDs. Source code in roblox/utilities/exceptions.py class BadgeNotFound ( ItemNotFound ): \"\"\" Raised for invalid badge IDs. \"\"\" pass Forbidden ( HTTPException ) \u00b6 HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided. Source code in roblox/utilities/exceptions.py class Forbidden ( HTTPException ): \"\"\"HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided.\"\"\" pass GroupNotFound ( ItemNotFound ) \u00b6 Raised for invalid group IDs. Source code in roblox/utilities/exceptions.py class GroupNotFound ( ItemNotFound ): \"\"\" Raised for invalid group IDs. \"\"\" pass HTTPException ( RobloxException ) \u00b6 Exception that's raised when an HTTP request fails. Attributes: Name Type Description response Response The HTTP response object. status int The HTTP response status code. errors List[ResponseError] A list of Roblox response errors. Source code in roblox/utilities/exceptions.py class HTTPException ( RobloxException ): \"\"\" Exception that's raised when an HTTP request fails. Attributes: response: The HTTP response object. status: The HTTP response status code. errors: A list of Roblox response errors. \"\"\" def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" ) def _generate_string ( self ) -> str : parsed_errors = [] for error in self . errors : # Make each error into a parsed string parsed_error = f \" \\t { error . code } : { error . message } \" error_messages = [] error . user_facing_message and error_messages . append ( f \"User-facing message: { error . user_facing_message } \" ) error . field and error_messages . append ( f \"Field: { error . field } \" ) error . retryable and error_messages . append ( f \"Retryable: { error . retryable } \" ) if error_messages : error_message_string = \" \\n\\t\\t \" . join ( error_messages ) parsed_error += f \" \\n\\t\\t { error_message_string } \" parsed_errors . append ( parsed_error ) # Turn the parsed errors into a joined string return \" \\n \" . join ( parsed_errors ) __init__ ( self , response : Response , errors : Optional [ list ] = None ) special \u00b6 Parameters: Name Type Description Default response Response The raw response object. required errors Optional[list] A list of errors. None Source code in roblox/utilities/exceptions.py def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" ) InternalServerError ( HTTPException ) \u00b6 HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed. Source code in roblox/utilities/exceptions.py class InternalServerError ( HTTPException ): \"\"\" HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed. \"\"\" pass InvalidRole ( RobloxException ) \u00b6 Raised when a role doesn't exist. Source code in roblox/utilities/exceptions.py class InvalidRole ( RobloxException ): \"\"\" Raised when a role doesn't exist. \"\"\" pass ItemNotFound ( RobloxException ) \u00b6 Raised for invalid items. Source code in roblox/utilities/exceptions.py class ItemNotFound ( RobloxException ): \"\"\" Raised for invalid items. \"\"\" def __init__ ( self , message : str , response : Optional [ Response ] = None ): \"\"\" Arguments: response: The raw response object. \"\"\" self . response : Optional [ Response ] = response self . status : Optional [ int ] = response . status_code if response else None super () . __init__ ( message ) __init__ ( self , message : str , response : Optional [ httpx . Response ] = None ) special \u00b6 Parameters: Name Type Description Default response Optional[httpx.Response] The raw response object. None Source code in roblox/utilities/exceptions.py def __init__ ( self , message : str , response : Optional [ Response ] = None ): \"\"\" Arguments: response: The raw response object. \"\"\" self . response : Optional [ Response ] = response self . status : Optional [ int ] = response . status_code if response else None super () . __init__ ( message ) NoMoreItems ( RobloxException ) \u00b6 Raised when there are no more items left to iterate through. Source code in roblox/utilities/exceptions.py class NoMoreItems ( RobloxException ): \"\"\" Raised when there are no more items left to iterate through. \"\"\" pass NotFound ( HTTPException ) \u00b6 HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this! Source code in roblox/utilities/exceptions.py class NotFound ( HTTPException ): \"\"\" HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this! \"\"\" pass PlaceNotFound ( ItemNotFound ) \u00b6 Raised for invalid place IDs. Source code in roblox/utilities/exceptions.py class PlaceNotFound ( ItemNotFound ): \"\"\" Raised for invalid place IDs. \"\"\" pass PluginNotFound ( ItemNotFound ) \u00b6 Raised for invalid plugin IDs. Source code in roblox/utilities/exceptions.py class PluginNotFound ( ItemNotFound ): \"\"\" Raised for invalid plugin IDs. \"\"\" pass ResponseError \u00b6 Represents an error returned by a Roblox game server. Attributes: Name Type Description code int The error code. message Optional[str] The error message. user_facing_message Optional[str] A more simple error message intended for frontend use. field Optional[str] The field causing this error. retryable Optional[str] Whether retrying this exception could supress this issue. Source code in roblox/utilities/exceptions.py class ResponseError : \"\"\" Represents an error returned by a Roblox game server. Attributes: code: The error code. message: The error message. user_facing_message: A more simple error message intended for frontend use. field: The field causing this error. retryable: Whether retrying this exception could supress this issue. \"\"\" def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" ) __init__ ( self , data : dict ) special \u00b6 Source code in roblox/utilities/exceptions.py def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" ) RobloxException ( Exception ) \u00b6 Base exception for all of ro.py. Source code in roblox/utilities/exceptions.py class RobloxException ( Exception ): \"\"\" Base exception for all of ro.py. \"\"\" pass TooManyRequests ( HTTPException ) \u00b6 HTTP exception raised for status code 429. This means that Roblox has ratelimited you. Source code in roblox/utilities/exceptions.py class TooManyRequests ( HTTPException ): \"\"\" HTTP exception raised for status code 429. This means that Roblox has [ratelimited](https://en.wikipedia.org/wiki/Rate_limiting) you. \"\"\" pass Unauthorized ( HTTPException ) \u00b6 HTTP exception raised for status code 401. This usually means you aren't properly authenticated. Source code in roblox/utilities/exceptions.py class Unauthorized ( HTTPException ): \"\"\"HTTP exception raised for status code 401. This usually means you aren't properly authenticated.\"\"\" UniverseNotFound ( ItemNotFound ) \u00b6 Raised for invalid universe IDs. Source code in roblox/utilities/exceptions.py class UniverseNotFound ( ItemNotFound ): \"\"\" Raised for invalid universe IDs. \"\"\" pass UserNotFound ( ItemNotFound ) \u00b6 Raised for invalid user IDs or usernames. Source code in roblox/utilities/exceptions.py class UserNotFound ( ItemNotFound ): \"\"\" Raised for invalid user IDs or usernames. \"\"\" pass get_exception_from_status_code ( code : int ) -> Type [ roblox . utilities . exceptions . HTTPException ] \u00b6 Gets an exception that should be raised instead of the generic HTTPException for this status code. Source code in roblox/utilities/exceptions.py def get_exception_from_status_code ( code : int ) -> Type [ HTTPException ]: \"\"\" Gets an exception that should be raised instead of the generic HTTPException for this status code. \"\"\" return _codes_exceptions . get ( code ) or HTTPException","title":"exceptions"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions","text":"Contains exceptions used by ro.py.","title":"exceptions"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.AssetNotFound","text":"Raised for invalid asset IDs. Source code in roblox/utilities/exceptions.py class AssetNotFound ( ItemNotFound ): \"\"\" Raised for invalid asset IDs. \"\"\" pass","title":"AssetNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.BadRequest","text":"HTTP exception raised for status code 400. Source code in roblox/utilities/exceptions.py class BadRequest ( HTTPException ): \"\"\"HTTP exception raised for status code 400.\"\"\" pass","title":"BadRequest"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.BadgeNotFound","text":"Raised for invalid badge IDs. Source code in roblox/utilities/exceptions.py class BadgeNotFound ( ItemNotFound ): \"\"\" Raised for invalid badge IDs. \"\"\" pass","title":"BadgeNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.Forbidden","text":"HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided. Source code in roblox/utilities/exceptions.py class Forbidden ( HTTPException ): \"\"\"HTTP exception raised for status code 403. This usually means the X-CSRF-Token was not properly provided.\"\"\" pass","title":"Forbidden"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.GroupNotFound","text":"Raised for invalid group IDs. Source code in roblox/utilities/exceptions.py class GroupNotFound ( ItemNotFound ): \"\"\" Raised for invalid group IDs. \"\"\" pass","title":"GroupNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.HTTPException","text":"Exception that's raised when an HTTP request fails. Attributes: Name Type Description response Response The HTTP response object. status int The HTTP response status code. errors List[ResponseError] A list of Roblox response errors. Source code in roblox/utilities/exceptions.py class HTTPException ( RobloxException ): \"\"\" Exception that's raised when an HTTP request fails. Attributes: response: The HTTP response object. status: The HTTP response status code. errors: A list of Roblox response errors. \"\"\" def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" ) def _generate_string ( self ) -> str : parsed_errors = [] for error in self . errors : # Make each error into a parsed string parsed_error = f \" \\t { error . code } : { error . message } \" error_messages = [] error . user_facing_message and error_messages . append ( f \"User-facing message: { error . user_facing_message } \" ) error . field and error_messages . append ( f \"Field: { error . field } \" ) error . retryable and error_messages . append ( f \"Retryable: { error . retryable } \" ) if error_messages : error_message_string = \" \\n\\t\\t \" . join ( error_messages ) parsed_error += f \" \\n\\t\\t { error_message_string } \" parsed_errors . append ( parsed_error ) # Turn the parsed errors into a joined string return \" \\n \" . join ( parsed_errors )","title":"HTTPException"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.HTTPException.__init__","text":"Parameters: Name Type Description Default response Response The raw response object. required errors Optional[list] A list of errors. None Source code in roblox/utilities/exceptions.py def __init__ ( self , response : Response , errors : Optional [ list ] = None ): \"\"\" Arguments: response: The raw response object. errors: A list of errors. \"\"\" self . response : Response = response self . status : int = response . status_code self . errors : List [ ResponseError ] if errors : self . errors = [ ResponseError ( data = error_data ) for error_data in errors ] else : self . errors = [] if self . errors : error_string = self . _generate_string () super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } . \\n\\n Errors: \\n { error_string } \" ) else : super () . __init__ ( f \" { response . status_code } { response . reason_phrase } : { response . url } \" )","title":"__init__()"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.InternalServerError","text":"HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed. Source code in roblox/utilities/exceptions.py class InternalServerError ( HTTPException ): \"\"\" HTTP exception raised for status code 500. This usually means that there was an issue on Roblox's end, but due to faulty coding on Roblox's part this can sometimes mean that an endpoint used internally was disabled or that invalid parameters were passed. \"\"\" pass","title":"InternalServerError"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.InvalidRole","text":"Raised when a role doesn't exist. Source code in roblox/utilities/exceptions.py class InvalidRole ( RobloxException ): \"\"\" Raised when a role doesn't exist. \"\"\" pass","title":"InvalidRole"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ItemNotFound","text":"Raised for invalid items. Source code in roblox/utilities/exceptions.py class ItemNotFound ( RobloxException ): \"\"\" Raised for invalid items. \"\"\" def __init__ ( self , message : str , response : Optional [ Response ] = None ): \"\"\" Arguments: response: The raw response object. \"\"\" self . response : Optional [ Response ] = response self . status : Optional [ int ] = response . status_code if response else None super () . __init__ ( message )","title":"ItemNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ItemNotFound.__init__","text":"Parameters: Name Type Description Default response Optional[httpx.Response] The raw response object. None Source code in roblox/utilities/exceptions.py def __init__ ( self , message : str , response : Optional [ Response ] = None ): \"\"\" Arguments: response: The raw response object. \"\"\" self . response : Optional [ Response ] = response self . status : Optional [ int ] = response . status_code if response else None super () . __init__ ( message )","title":"__init__()"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.NoMoreItems","text":"Raised when there are no more items left to iterate through. Source code in roblox/utilities/exceptions.py class NoMoreItems ( RobloxException ): \"\"\" Raised when there are no more items left to iterate through. \"\"\" pass","title":"NoMoreItems"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.NotFound","text":"HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this! Source code in roblox/utilities/exceptions.py class NotFound ( HTTPException ): \"\"\" HTTP exception raised for status code 404. This usually means we have an internal URL issue - please make a GitHub issue about this! \"\"\" pass","title":"NotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.PlaceNotFound","text":"Raised for invalid place IDs. Source code in roblox/utilities/exceptions.py class PlaceNotFound ( ItemNotFound ): \"\"\" Raised for invalid place IDs. \"\"\" pass","title":"PlaceNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.PluginNotFound","text":"Raised for invalid plugin IDs. Source code in roblox/utilities/exceptions.py class PluginNotFound ( ItemNotFound ): \"\"\" Raised for invalid plugin IDs. \"\"\" pass","title":"PluginNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ResponseError","text":"Represents an error returned by a Roblox game server. Attributes: Name Type Description code int The error code. message Optional[str] The error message. user_facing_message Optional[str] A more simple error message intended for frontend use. field Optional[str] The field causing this error. retryable Optional[str] Whether retrying this exception could supress this issue. Source code in roblox/utilities/exceptions.py class ResponseError : \"\"\" Represents an error returned by a Roblox game server. Attributes: code: The error code. message: The error message. user_facing_message: A more simple error message intended for frontend use. field: The field causing this error. retryable: Whether retrying this exception could supress this issue. \"\"\" def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" )","title":"ResponseError"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.ResponseError.__init__","text":"Source code in roblox/utilities/exceptions.py def __init__ ( self , data : dict ): self . code : int = data [ \"code\" ] self . message : Optional [ str ] = data . get ( \"message\" ) self . user_facing_message : Optional [ str ] = data . get ( \"userFacingMessage\" ) self . field : Optional [ str ] = data . get ( \"field\" ) self . retryable : Optional [ str ] = data . get ( \"retryable\" )","title":"__init__()"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.RobloxException","text":"Base exception for all of ro.py. Source code in roblox/utilities/exceptions.py class RobloxException ( Exception ): \"\"\" Base exception for all of ro.py. \"\"\" pass","title":"RobloxException"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.TooManyRequests","text":"HTTP exception raised for status code 429. This means that Roblox has ratelimited you. Source code in roblox/utilities/exceptions.py class TooManyRequests ( HTTPException ): \"\"\" HTTP exception raised for status code 429. This means that Roblox has [ratelimited](https://en.wikipedia.org/wiki/Rate_limiting) you. \"\"\" pass","title":"TooManyRequests"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.Unauthorized","text":"HTTP exception raised for status code 401. This usually means you aren't properly authenticated. Source code in roblox/utilities/exceptions.py class Unauthorized ( HTTPException ): \"\"\"HTTP exception raised for status code 401. This usually means you aren't properly authenticated.\"\"\"","title":"Unauthorized"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.UniverseNotFound","text":"Raised for invalid universe IDs. Source code in roblox/utilities/exceptions.py class UniverseNotFound ( ItemNotFound ): \"\"\" Raised for invalid universe IDs. \"\"\" pass","title":"UniverseNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.UserNotFound","text":"Raised for invalid user IDs or usernames. Source code in roblox/utilities/exceptions.py class UserNotFound ( ItemNotFound ): \"\"\" Raised for invalid user IDs or usernames. \"\"\" pass","title":"UserNotFound"},{"location":"reference/roblox/utilities/exceptions/#roblox.utilities.exceptions.get_exception_from_status_code","text":"Gets an exception that should be raised instead of the generic HTTPException for this status code. Source code in roblox/utilities/exceptions.py def get_exception_from_status_code ( code : int ) -> Type [ HTTPException ]: \"\"\" Gets an exception that should be raised instead of the generic HTTPException for this status code. \"\"\" return _codes_exceptions . get ( code ) or HTTPException","title":"get_exception_from_status_code()"},{"location":"reference/roblox/utilities/iterators/","text":"roblox.utilities.iterators \u00b6 This module contains iterators used internally by ro.py to provide paginated information. IteratorItems ( AsyncIterator , Generic ) \u00b6 Represents the items inside of an iterator. Source code in roblox/utilities/iterators.py class IteratorItems ( AsyncIterator ): \"\"\" Represents the items inside of an iterator. \"\"\" def __init__ ( self , iterator : RobloxIterator , max_items : Optional [ int ] = None ): self . _iterator = iterator self . _position : int = 0 self . _global_position : int = 0 self . _items : list = [] self . _max_items = max_items def __aiter__ ( self ): self . _position = 0 self . _items = [] return self async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _global_position = 0 self . _items = [] raise StopAsyncIteration if self . _max_items is not None and self . _global_position >= self . _max_items : raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 self . _global_position += 1 return item __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): self . _position = 0 self . _items = [] return self __anext__ ( self ) async special \u00b6 Source code in roblox/utilities/iterators.py async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _global_position = 0 self . _items = [] raise StopAsyncIteration if self . _max_items is not None and self . _global_position >= self . _max_items : raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 self . _global_position += 1 return item __init__ ( self , iterator : RobloxIterator , max_items : Optional [ int ] = None ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : RobloxIterator , max_items : Optional [ int ] = None ): self . _iterator = iterator self . _position : int = 0 self . _global_position : int = 0 self . _items : list = [] self . _max_items = max_items IteratorPages ( AsyncIterator , Generic ) \u00b6 Represents the pages inside of an iterator. Source code in roblox/utilities/iterators.py class IteratorPages ( AsyncIterator ): \"\"\" Represents the pages inside of an iterator. \"\"\" def __init__ ( self , iterator : RobloxIterator ): self . _iterator = iterator def __aiter__ ( self ): return self async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self __anext__ ( self ) async special \u00b6 Source code in roblox/utilities/iterators.py async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration __init__ ( self , iterator : RobloxIterator ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : RobloxIterator ): self . _iterator = iterator PageIterator ( RobloxIterator ) \u00b6 Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial: Pagination For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination . Attributes: Name Type Description _client Client The Client. url str The endpoint to hit for new page data. sort_order SortOrder The sort order to use for returned data. page_size int How much data should be returned per-page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. next_cursor str Cursor to use to advance to the next page. previous_cursor str Cursor to use to advance to the previous page. iterator_position int What position in the iterator_items the iterator is currently at. iterator_items list List of current items the iterator is working on. Source code in roblox/utilities/iterators.py class PageIterator ( RobloxIterator ): \"\"\" Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial: [Pagination](/tutorial/pagination) For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination. Attributes: _client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. next_cursor: Cursor to use to advance to the next page. previous_cursor: Cursor to use to advance to the previous page. iterator_position: What position in the iterator_items the iterator is currently at. iterator_items: List of current items the iterator is working on. \"\"\" def __init__ ( self , client : Client , url : str , sort_order : SortOrder = SortOrder . Ascending , page_size : int = 10 , max_items : int = None , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. max_items: The maximum amount of items to return when this iterator is looped through. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ ( max_items = max_items ) self . _client : Client = client # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : \"\"\" If we just started and there is no cursor, this is the last page, because we can go back but not forward. We should raise an exception here. \"\"\" raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _client . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . page_size , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data __init__ ( self , client : Client , url : str , sort_order : SortOrder = < SortOrder . Ascending : 'Asc' > , page_size : int = 10 , max_items : int = None , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ) special \u00b6 Parameters: Name Type Description Default client Client The Client. required url str The endpoint to hit for new page data. required sort_order SortOrder The sort order to use for returned data. <SortOrder.Ascending: 'Asc'> page_size int How much data should be returned per-page. 10 max_items int The maximum amount of items to return when this iterator is looped through. None extra_parameters Optional[dict] Extra parameters to pass to the endpoint. None handler Optional[Callable] A callable object to use to convert raw endpoint data to parsed objects. None handler_kwargs Optional[dict] Extra keyword arguments to pass to the handler. None Source code in roblox/utilities/iterators.py def __init__ ( self , client : Client , url : str , sort_order : SortOrder = SortOrder . Ascending , page_size : int = 10 , max_items : int = None , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. max_items: The maximum amount of items to return when this iterator is looped through. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ ( max_items = max_items ) self . _client : Client = client # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False next ( self ) async \u00b6 Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : \"\"\" If we just started and there is no cursor, this is the last page, because we can go back but not forward. We should raise an exception here. \"\"\" raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _client . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . page_size , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data PageNumberIterator ( RobloxIterator ) \u00b6 Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com. Attributes: Name Type Description url str The endpoint to hit for new page data. page_number int The current page number. page_size int The size of each page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. Source code in roblox/utilities/iterators.py class PageNumberIterator ( RobloxIterator ): \"\"\" Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com. Attributes: url: The endpoint to hit for new page data. page_number: The current page number. page_size: The size of each page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" def __init__ ( self , client : Client , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _client : Client = client self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = [] async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _client . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data __init__ ( self , client : Client , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , client : Client , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _client : Client = client self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = [] next ( self ) async \u00b6 Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _client . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data RobloxIterator \u00b6 Represents a basic iterator which all iterators should implement. Source code in roblox/utilities/iterators.py class RobloxIterator : \"\"\" Represents a basic iterator which all iterators should implement. \"\"\" def __init__ ( self , max_items : int = None ): self . max_items : Optional [ int ] = max_items async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError async def flatten ( self , max_items : int = None ) -> list : \"\"\" Flattens the data into a list. \"\"\" if max_items is None : max_items = self . max_items items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break if max_items is not None and len ( items ) >= max_items : break return items [: max_items ] def __aiter__ ( self ): return IteratorItems ( iterator = self , max_items = self . max_items ) def items ( self , max_items : int = None ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" if max_items is None : max_items = self . max_items return IteratorItems ( iterator = self , max_items = max_items ) def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return IteratorPages ( self ) __aiter__ ( self ) special \u00b6 Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return IteratorItems ( iterator = self , max_items = self . max_items ) __init__ ( self , max_items : int = None ) special \u00b6 Source code in roblox/utilities/iterators.py def __init__ ( self , max_items : int = None ): self . max_items : Optional [ int ] = max_items flatten ( self , max_items : int = None ) -> list async \u00b6 Flattens the data into a list. Source code in roblox/utilities/iterators.py async def flatten ( self , max_items : int = None ) -> list : \"\"\" Flattens the data into a list. \"\"\" if max_items is None : max_items = self . max_items items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break if max_items is not None and len ( items ) >= max_items : break return items [: max_items ] items ( self , max_items : int = None ) -> IteratorItems \u00b6 Returns an AsyncIterable containing each iterator item. Source code in roblox/utilities/iterators.py def items ( self , max_items : int = None ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" if max_items is None : max_items = self . max_items return IteratorItems ( iterator = self , max_items = max_items ) next ( self ) async \u00b6 Moves to the next page and returns that page's data. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError pages ( self ) -> IteratorPages \u00b6 Returns an AsyncIterable containing each iterator page. Each page is a list of items. Source code in roblox/utilities/iterators.py def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return IteratorPages ( self ) SortOrder ( Enum ) \u00b6 Order in which page data should load in. Source code in roblox/utilities/iterators.py class SortOrder ( Enum ): \"\"\" Order in which page data should load in. \"\"\" Ascending = \"Asc\" Descending = \"Desc\" Ascending \u00b6 Descending \u00b6","title":"iterators"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators","text":"This module contains iterators used internally by ro.py to provide paginated information.","title":"iterators"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems","text":"Represents the items inside of an iterator. Source code in roblox/utilities/iterators.py class IteratorItems ( AsyncIterator ): \"\"\" Represents the items inside of an iterator. \"\"\" def __init__ ( self , iterator : RobloxIterator , max_items : Optional [ int ] = None ): self . _iterator = iterator self . _position : int = 0 self . _global_position : int = 0 self . _items : list = [] self . _max_items = max_items def __aiter__ ( self ): self . _position = 0 self . _items = [] return self async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _global_position = 0 self . _items = [] raise StopAsyncIteration if self . _max_items is not None and self . _global_position >= self . _max_items : raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 self . _global_position += 1 return item","title":"IteratorItems"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): self . _position = 0 self . _items = [] return self","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__anext__","text":"Source code in roblox/utilities/iterators.py async def __anext__ ( self ): if self . _position == len ( self . _items ): # we are at the end of our current page of items. start again with a new page self . _position = 0 try : # get new items self . _items = await self . _iterator . next () except NoMoreItems : # if there aren't any more items, reset and break the loop self . _position = 0 self . _global_position = 0 self . _items = [] raise StopAsyncIteration if self . _max_items is not None and self . _global_position >= self . _max_items : raise StopAsyncIteration # if we got here we know there are more items try : item = self . _items [ self . _position ] except IndexError : # edge case for group roles raise StopAsyncIteration # we advance the iterator by one for the next iteration self . _position += 1 self . _global_position += 1 return item","title":"__anext__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorItems.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : RobloxIterator , max_items : Optional [ int ] = None ): self . _iterator = iterator self . _position : int = 0 self . _global_position : int = 0 self . _items : list = [] self . _max_items = max_items","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages","text":"Represents the pages inside of an iterator. Source code in roblox/utilities/iterators.py class IteratorPages ( AsyncIterator ): \"\"\" Represents the pages inside of an iterator. \"\"\" def __init__ ( self , iterator : RobloxIterator ): self . _iterator = iterator def __aiter__ ( self ): return self async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration","title":"IteratorPages"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return self","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__anext__","text":"Source code in roblox/utilities/iterators.py async def __anext__ ( self ): try : page = await self . _iterator . next () return page except NoMoreItems : raise StopAsyncIteration","title":"__anext__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.IteratorPages.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , iterator : RobloxIterator ): self . _iterator = iterator","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator","text":"Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial: Pagination For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination . Attributes: Name Type Description _client Client The Client. url str The endpoint to hit for new page data. sort_order SortOrder The sort order to use for returned data. page_size int How much data should be returned per-page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. next_cursor str Cursor to use to advance to the next page. previous_cursor str Cursor to use to advance to the previous page. iterator_position int What position in the iterator_items the iterator is currently at. iterator_items list List of current items the iterator is working on. Source code in roblox/utilities/iterators.py class PageIterator ( RobloxIterator ): \"\"\" Represents a cursor-based, paginated Roblox object. Learn more about iterators in the pagination tutorial: [Pagination](/tutorial/pagination) For more information about how cursor-based pagination works, see https://robloxapi.wiki/wiki/Pagination. Attributes: _client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. next_cursor: Cursor to use to advance to the next page. previous_cursor: Cursor to use to advance to the previous page. iterator_position: What position in the iterator_items the iterator is currently at. iterator_items: List of current items the iterator is working on. \"\"\" def __init__ ( self , client : Client , url : str , sort_order : SortOrder = SortOrder . Ascending , page_size : int = 10 , max_items : int = None , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. max_items: The maximum amount of items to return when this iterator is looped through. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ ( max_items = max_items ) self . _client : Client = client # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : \"\"\" If we just started and there is no cursor, this is the last page, because we can go back but not forward. We should raise an exception here. \"\"\" raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _client . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . page_size , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"PageIterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator.__init__","text":"Parameters: Name Type Description Default client Client The Client. required url str The endpoint to hit for new page data. required sort_order SortOrder The sort order to use for returned data. <SortOrder.Ascending: 'Asc'> page_size int How much data should be returned per-page. 10 max_items int The maximum amount of items to return when this iterator is looped through. None extra_parameters Optional[dict] Extra parameters to pass to the endpoint. None handler Optional[Callable] A callable object to use to convert raw endpoint data to parsed objects. None handler_kwargs Optional[dict] Extra keyword arguments to pass to the handler. None Source code in roblox/utilities/iterators.py def __init__ ( self , client : Client , url : str , sort_order : SortOrder = SortOrder . Ascending , page_size : int = 10 , max_items : int = None , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): \"\"\" Parameters: client: The Client. url: The endpoint to hit for new page data. sort_order: The sort order to use for returned data. page_size: How much data should be returned per-page. max_items: The maximum amount of items to return when this iterator is looped through. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" super () . __init__ ( max_items = max_items ) self . _client : Client = client # store some basic arguments in the object self . url : str = url self . sort_order : SortOrder = sort_order self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} # cursors to use for next, previous self . next_cursor : str = \"\" self . previous_cursor : str = \"\" # iter values self . iterator_position : int = 0 self . iterator_items : list = [] self . next_started : bool = False","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageIterator.next","text":"Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" if self . next_started and not self . next_cursor : \"\"\" If we just started and there is no cursor, this is the last page, because we can go back but not forward. We should raise an exception here. \"\"\" raise NoMoreItems ( \"No more items.\" ) if not self . next_started : self . next_started = True page_response = await self . _client . requests . get ( url = self . url , params = { \"cursor\" : self . next_cursor , \"limit\" : self . page_size , \"sortOrder\" : self . sort_order . value , ** self . extra_parameters } ) page_data = page_response . json () # fill in cursors self . next_cursor = page_data [ \"nextPageCursor\" ] self . previous_cursor = page_data [ \"previousPageCursor\" ] data = page_data [ \"data\" ] if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator","text":"Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com. Attributes: Name Type Description url str The endpoint to hit for new page data. page_number int The current page number. page_size int The size of each page. extra_parameters dict Extra parameters to pass to the endpoint. handler Callable A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs dict Extra keyword arguments to pass to the handler. Source code in roblox/utilities/iterators.py class PageNumberIterator ( RobloxIterator ): \"\"\" Represents an iterator that is advanced with page numbers and sizes, like those seen on chat.roblox.com. Attributes: url: The endpoint to hit for new page data. page_number: The current page number. page_size: The size of each page. extra_parameters: Extra parameters to pass to the endpoint. handler: A callable object to use to convert raw endpoint data to parsed objects. handler_kwargs: Extra keyword arguments to pass to the handler. \"\"\" def __init__ ( self , client : Client , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _client : Client = client self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = [] async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _client . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"PageNumberIterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , client : Client , url : str , page_size : int = 10 , extra_parameters : Optional [ dict ] = None , handler : Optional [ Callable ] = None , handler_kwargs : Optional [ dict ] = None ): super () . __init__ () self . _client : Client = client self . url : str = url self . page_number : int = 1 self . page_size : int = page_size self . extra_parameters : dict = extra_parameters or {} self . handler : Callable = handler self . handler_kwargs : dict = handler_kwargs or {} self . iterator_position = 0 self . iterator_items = []","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.PageNumberIterator.next","text":"Advances the iterator to the next page. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Advances the iterator to the next page. \"\"\" page_response = await self . _client . requests . get ( url = self . url , params = { \"pageNumber\" : self . page_number , \"pageSize\" : self . page_size , ** self . extra_parameters } ) data = page_response . json () if len ( data ) == 0 : raise NoMoreItems ( \"No more items.\" ) self . page_number += 1 if self . handler : data = [ self . handler ( client = self . _client , data = item_data , ** self . handler_kwargs ) for item_data in data ] return data","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator","text":"Represents a basic iterator which all iterators should implement. Source code in roblox/utilities/iterators.py class RobloxIterator : \"\"\" Represents a basic iterator which all iterators should implement. \"\"\" def __init__ ( self , max_items : int = None ): self . max_items : Optional [ int ] = max_items async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError async def flatten ( self , max_items : int = None ) -> list : \"\"\" Flattens the data into a list. \"\"\" if max_items is None : max_items = self . max_items items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break if max_items is not None and len ( items ) >= max_items : break return items [: max_items ] def __aiter__ ( self ): return IteratorItems ( iterator = self , max_items = self . max_items ) def items ( self , max_items : int = None ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" if max_items is None : max_items = self . max_items return IteratorItems ( iterator = self , max_items = max_items ) def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return IteratorPages ( self )","title":"RobloxIterator"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.__aiter__","text":"Source code in roblox/utilities/iterators.py def __aiter__ ( self ): return IteratorItems ( iterator = self , max_items = self . max_items )","title":"__aiter__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.__init__","text":"Source code in roblox/utilities/iterators.py def __init__ ( self , max_items : int = None ): self . max_items : Optional [ int ] = max_items","title":"__init__()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.flatten","text":"Flattens the data into a list. Source code in roblox/utilities/iterators.py async def flatten ( self , max_items : int = None ) -> list : \"\"\" Flattens the data into a list. \"\"\" if max_items is None : max_items = self . max_items items : list = [] while True : try : new_items = await self . next () items += new_items except NoMoreItems : break if max_items is not None and len ( items ) >= max_items : break return items [: max_items ]","title":"flatten()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.items","text":"Returns an AsyncIterable containing each iterator item. Source code in roblox/utilities/iterators.py def items ( self , max_items : int = None ) -> IteratorItems : \"\"\" Returns an AsyncIterable containing each iterator item. \"\"\" if max_items is None : max_items = self . max_items return IteratorItems ( iterator = self , max_items = max_items )","title":"items()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.next","text":"Moves to the next page and returns that page's data. Source code in roblox/utilities/iterators.py async def next ( self ): \"\"\" Moves to the next page and returns that page's data. \"\"\" raise NotImplementedError","title":"next()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.RobloxIterator.pages","text":"Returns an AsyncIterable containing each iterator page. Each page is a list of items. Source code in roblox/utilities/iterators.py def pages ( self ) -> IteratorPages : \"\"\" Returns an AsyncIterable containing each iterator page. Each page is a list of items. \"\"\" return IteratorPages ( self )","title":"pages()"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder","text":"Order in which page data should load in. Source code in roblox/utilities/iterators.py class SortOrder ( Enum ): \"\"\" Order in which page data should load in. \"\"\" Ascending = \"Asc\" Descending = \"Desc\"","title":"SortOrder"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder.Ascending","text":"","title":"Ascending"},{"location":"reference/roblox/utilities/iterators/#roblox.utilities.iterators.SortOrder.Descending","text":"","title":"Descending"},{"location":"reference/roblox/utilities/requests/","text":"roblox.utilities.requests \u00b6 This module contains classes used internally by ro.py for sending requests to Roblox endpoints. CleanAsyncClient ( AsyncClient ) \u00b6 This is a clean-on-delete version of httpx.AsyncClient. Source code in roblox/utilities/requests.py class CleanAsyncClient ( AsyncClient ): \"\"\" This is a clean-on-delete version of httpx.AsyncClient. \"\"\" def __init__ ( self ): super () . __init__ () def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass __del__ ( self ) special \u00b6 Source code in roblox/utilities/requests.py def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass __init__ ( self ) special \u00b6 Source code in roblox/utilities/requests.py def __init__ ( self ): super () . __init__ () Requests \u00b6 A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: Name Type Description session CleanAsyncClient Base session object to use when sending requests. xcsrf_token_name str The header that will contain the Cross-Site Request Forgery token. Source code in roblox/utilities/requests.py class Requests : \"\"\" A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: session: Base session object to use when sending requests. xcsrf_token_name: The header that will contain the Cross-Site Request Forgery token. \"\"\" def __init__ ( self , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. \"\"\" self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\" async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: The request method. Returns: An HTTP response. \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and _xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: An HTTP response. \"\"\" return await self . request ( \"GET\" , * args , ** kwargs ) async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: An HTTP response. \"\"\" return await self . request ( \"POST\" , * args , ** kwargs ) async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs ) async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs ) async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: An HTTP response. \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs ) __init__ ( self , session : CleanAsyncClient = None , xcsrf_token_name : str = 'X-CSRF-Token' ) special \u00b6 Parameters: Name Type Description Default session CleanAsyncClient A custom session object to use for sending requests, compatible with httpx.AsyncClient. None xcsrf_token_name str The header to place X-CSRF-Token data into. 'X-CSRF-Token' Source code in roblox/utilities/requests.py def __init__ ( self , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. \"\"\" self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\" delete ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a DELETE request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: An HTTP response. \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs ) get ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a GET request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: An HTTP response. \"\"\" return await self . request ( \"GET\" , * args , ** kwargs ) patch ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a PATCH request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs ) post ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a POST request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: An HTTP response. \"\"\" return await self . request ( \"POST\" , * args , ** kwargs ) put ( self , * args , ** kwargs ) -> Response async \u00b6 Sends a PATCH request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs ) request ( self , method : str , * args , ** kwargs ) -> Response async \u00b6 Parameters: Name Type Description Default method str The request method. required Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: The request method. Returns: An HTTP response. \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and _xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response","title":"requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests","text":"This module contains classes used internally by ro.py for sending requests to Roblox endpoints.","title":"requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient","text":"This is a clean-on-delete version of httpx.AsyncClient. Source code in roblox/utilities/requests.py class CleanAsyncClient ( AsyncClient ): \"\"\" This is a clean-on-delete version of httpx.AsyncClient. \"\"\" def __init__ ( self ): super () . __init__ () def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass","title":"CleanAsyncClient"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient.__del__","text":"Source code in roblox/utilities/requests.py def __del__ ( self ): try : asyncio . get_event_loop () . create_task ( self . aclose ()) except RuntimeError : pass","title":"__del__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.CleanAsyncClient.__init__","text":"Source code in roblox/utilities/requests.py def __init__ ( self ): super () . __init__ ()","title":"__init__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests","text":"A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: Name Type Description session CleanAsyncClient Base session object to use when sending requests. xcsrf_token_name str The header that will contain the Cross-Site Request Forgery token. Source code in roblox/utilities/requests.py class Requests : \"\"\" A special request object that implements special functionality required to connect to some Roblox endpoints. Attributes: session: Base session object to use when sending requests. xcsrf_token_name: The header that will contain the Cross-Site Request Forgery token. \"\"\" def __init__ ( self , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. \"\"\" self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\" async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: The request method. Returns: An HTTP response. \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and _xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: An HTTP response. \"\"\" return await self . request ( \"GET\" , * args , ** kwargs ) async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: An HTTP response. \"\"\" return await self . request ( \"POST\" , * args , ** kwargs ) async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs ) async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs ) async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: An HTTP response. \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs )","title":"Requests"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.__init__","text":"Parameters: Name Type Description Default session CleanAsyncClient A custom session object to use for sending requests, compatible with httpx.AsyncClient. None xcsrf_token_name str The header to place X-CSRF-Token data into. 'X-CSRF-Token' Source code in roblox/utilities/requests.py def __init__ ( self , session : CleanAsyncClient = None , xcsrf_token_name : str = \"X-CSRF-Token\" ): \"\"\" Arguments: session: A custom session object to use for sending requests, compatible with httpx.AsyncClient. xcsrf_token_name: The header to place X-CSRF-Token data into. \"\"\" self . session : CleanAsyncClient if session is None : self . session = CleanAsyncClient () else : self . session = session self . xcsrf_token_name : str = xcsrf_token_name self . session . headers [ \"User-Agent\" ] = \"Roblox/WinInet\" self . session . headers [ \"Referer\" ] = \"www.roblox.com\"","title":"__init__()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.delete","text":"Sends a DELETE request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def delete ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a DELETE request. Returns: An HTTP response. \"\"\" return await self . request ( \"DELETE\" , * args , ** kwargs )","title":"delete()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.get","text":"Sends a GET request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def get ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a GET request. Returns: An HTTP response. \"\"\" return await self . request ( \"GET\" , * args , ** kwargs )","title":"get()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.patch","text":"Sends a PATCH request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def patch ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PATCH\" , * args , ** kwargs )","title":"patch()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.post","text":"Sends a POST request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def post ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a POST request. Returns: An HTTP response. \"\"\" return await self . request ( \"POST\" , * args , ** kwargs )","title":"post()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.put","text":"Sends a PATCH request. Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def put ( self , * args , ** kwargs ) -> Response : \"\"\" Sends a PATCH request. Returns: An HTTP response. \"\"\" return await self . request ( \"PUT\" , * args , ** kwargs )","title":"put()"},{"location":"reference/roblox/utilities/requests/#roblox.utilities.requests.Requests.request","text":"Parameters: Name Type Description Default method str The request method. required Returns: Type Description Response An HTTP response. Source code in roblox/utilities/requests.py async def request ( self , method : str , * args , ** kwargs ) -> Response : \"\"\" Arguments: method: The request method. Returns: An HTTP response. \"\"\" handle_xcsrf_token = kwargs . pop ( \"handle_xcsrf_token\" , True ) skip_roblox = kwargs . pop ( \"skip_roblox\" , False ) response = await self . session . request ( method , * args , ** kwargs ) if skip_roblox : return response method = method . lower () if handle_xcsrf_token and self . xcsrf_token_name in response . headers and _xcsrf_allowed_methods . get ( method ): self . session . headers [ self . xcsrf_token_name ] = response . headers [ self . xcsrf_token_name ] if response . status_code == 403 : # Request failed, send it again response = await self . session . request ( method , * args , ** kwargs ) if kwargs . get ( \"stream\" ): # Streamed responses should not be decoded, so we immediately return the response. return response if response . is_error : # Something went wrong, parse an error content_type = response . headers . get ( \"Content-Type\" ) errors = None if content_type and content_type . startswith ( \"application/json\" ): data = None try : data = response . json () except JSONDecodeError : pass errors = data and data . get ( \"errors\" ) exception = get_exception_from_status_code ( response . status_code )( response = response , errors = errors ) raise exception else : return response","title":"request()"},{"location":"reference/roblox/utilities/types/","text":"roblox.utilities.types \u00b6 Contains types used internally by ro.py. AssetOrAssetId \u00b6 BadgeOrBadgeId \u00b6 GamePassOrGamePassId \u00b6 GroupOrGroupId \u00b6 PlaceOrPlaceId \u00b6 RoleOrRoleId \u00b6 UniverseOrUniverseId \u00b6 UserOrUserId \u00b6","title":"types"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types","text":"Contains types used internally by ro.py.","title":"types"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.AssetOrAssetId","text":"","title":"AssetOrAssetId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.BadgeOrBadgeId","text":"","title":"BadgeOrBadgeId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.GamePassOrGamePassId","text":"","title":"GamePassOrGamePassId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.GroupOrGroupId","text":"","title":"GroupOrGroupId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.PlaceOrPlaceId","text":"","title":"PlaceOrPlaceId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.RoleOrRoleId","text":"","title":"RoleOrRoleId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.UniverseOrUniverseId","text":"","title":"UniverseOrUniverseId"},{"location":"reference/roblox/utilities/types/#roblox.utilities.types.UserOrUserId","text":"","title":"UserOrUserId"},{"location":"reference/roblox/utilities/url/","text":"roblox.utilities.url \u00b6 This module contains functions and objects used internally by ro.py to generate URLs. cdn_site \u00b6 root_site \u00b6 URLGenerator \u00b6 Generates URLs based on a chosen base URL. Attributes: Name Type Description base_url The base URL. Source code in roblox/utilities/url.py class URLGenerator : \"\"\" Generates URLs based on a chosen base URL. Attributes: base_url: The base URL. \"\"\" def __init__ ( self , base_url : str ): self . base_url = base_url def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \" def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URL, given a subdomain name, protocol, and path. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. path: The URL path. base_url: The base URL. \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \" __init__ ( self , base_url : str ) special \u00b6 Source code in roblox/utilities/url.py def __init__ ( self , base_url : str ): self . base_url = base_url get_subdomain ( self , subdomain : str , protocol : str = 'https' ) -> str \u00b6 Returns the full URL of a subdomain, given the base subdomain name. Parameters: Name Type Description Default subdomain str The URL subdomain. required protocol str The URL protocol. 'https' Source code in roblox/utilities/url.py def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \" get_url ( self , subdomain : str , path : str = '' , base_url : str = None , protocol : str = 'https' ) -> str \u00b6 Returns a full URL, given a subdomain name, protocol, and path. Parameters: Name Type Description Default subdomain str The URL subdomain. required protocol str The URL protocol. 'https' path str The URL path. '' base_url str The base URL. None Source code in roblox/utilities/url.py def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URL, given a subdomain name, protocol, and path. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. path: The URL path. base_url: The base URL. \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \"","title":"url"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url","text":"This module contains functions and objects used internally by ro.py to generate URLs.","title":"url"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.cdn_site","text":"","title":"cdn_site"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.root_site","text":"","title":"root_site"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator","text":"Generates URLs based on a chosen base URL. Attributes: Name Type Description base_url The base URL. Source code in roblox/utilities/url.py class URLGenerator : \"\"\" Generates URLs based on a chosen base URL. Attributes: base_url: The base URL. \"\"\" def __init__ ( self , base_url : str ): self . base_url = base_url def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \" def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URL, given a subdomain name, protocol, and path. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. path: The URL path. base_url: The base URL. \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \"","title":"URLGenerator"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.__init__","text":"Source code in roblox/utilities/url.py def __init__ ( self , base_url : str ): self . base_url = base_url","title":"__init__()"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.get_subdomain","text":"Returns the full URL of a subdomain, given the base subdomain name. Parameters: Name Type Description Default subdomain str The URL subdomain. required protocol str The URL protocol. 'https' Source code in roblox/utilities/url.py def get_subdomain ( self , subdomain : str , protocol : str = \"https\" ) -> str : \"\"\" Returns the full URL of a subdomain, given the base subdomain name. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. \"\"\" return f \" { protocol } :// { subdomain } . { self . base_url } \"","title":"get_subdomain()"},{"location":"reference/roblox/utilities/url/#roblox.utilities.url.URLGenerator.get_url","text":"Returns a full URL, given a subdomain name, protocol, and path. Parameters: Name Type Description Default subdomain str The URL subdomain. required protocol str The URL protocol. 'https' path str The URL path. '' base_url str The base URL. None Source code in roblox/utilities/url.py def get_url ( self , subdomain : str , path : str = \"\" , base_url : str = None , protocol : str = \"https\" , ) -> str : \"\"\" Returns a full URL, given a subdomain name, protocol, and path. Arguments: subdomain: The URL subdomain. protocol: The URL protocol. path: The URL path. base_url: The base URL. \"\"\" if base_url is None : base_url = self . base_url return f \" { protocol } :// { subdomain } . { base_url } / { path } \"","title":"get_url()"},{"location":"tutorials/","text":"This tutorial is intended for people building standalone applications . It expects basic Python knowledge but will explain almost everything you need to know to build. Make sure to read through the entire page instead of skimming it to ensure you don't miss anything important! If at any point you are struggling to understand what to do, join the RoAPI Discord for help and support.","title":"Index"},{"location":"tutorials/authentication/","text":"Authentication \u00b6 To authenticate our client, we need our .ROBLOSECURITY token. To learn about why we need this and how to get it, please see ROBLOSECURITY . Once we have our token, we can add it to our client by passing it as the first parameter. Use the following code and replace TOKEN with the .ROBLOSECURITY token grabbed earlier to authenticate your client. from roblox import Client client = Client ( \"TOKEN\" ) To test your token, replace the code in main() with the following: user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) If this raises an error, or the name and ID differ from what is expected, follow the instructions and try again. The issue with this structure is that it is not secure. It's easy to slip up and copy your code and accidentally send someone your token, and it makes it harder to collaborate on code with others. Using a .env file \u00b6 To solve this problem, we'll create a separate file called .env which will contain our token. Your file should look like this, where TOKEN is the .ROBLOSECURITY token you grabbed earlier. .env ROBLOXTOKEN=TOKEN Place it in the same folder as your application's main file. Your file structure should look like this: . \u251c\u2500 .env \u2514\u2500 main.py Next, install the python-dotenv library with the following command: $ pip install python-dotenv Then, add these lines to the top of your code: import os from dotenv import load_dotenv After that, replace the code where you generate your client with this: load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) Test it with get_authenticated_user and you should be all set! Finished code main.py import asyncio import os from dotenv import load_dotenv from roblox import Client load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) async def main (): user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) asyncio . get_event_loop () . run_until_complete ( main ())","title":"Authentication"},{"location":"tutorials/authentication/#authentication","text":"To authenticate our client, we need our .ROBLOSECURITY token. To learn about why we need this and how to get it, please see ROBLOSECURITY . Once we have our token, we can add it to our client by passing it as the first parameter. Use the following code and replace TOKEN with the .ROBLOSECURITY token grabbed earlier to authenticate your client. from roblox import Client client = Client ( \"TOKEN\" ) To test your token, replace the code in main() with the following: user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) If this raises an error, or the name and ID differ from what is expected, follow the instructions and try again. The issue with this structure is that it is not secure. It's easy to slip up and copy your code and accidentally send someone your token, and it makes it harder to collaborate on code with others.","title":"Authentication"},{"location":"tutorials/authentication/#using-a-env-file","text":"To solve this problem, we'll create a separate file called .env which will contain our token. Your file should look like this, where TOKEN is the .ROBLOSECURITY token you grabbed earlier. .env ROBLOXTOKEN=TOKEN Place it in the same folder as your application's main file. Your file structure should look like this: . \u251c\u2500 .env \u2514\u2500 main.py Next, install the python-dotenv library with the following command: $ pip install python-dotenv Then, add these lines to the top of your code: import os from dotenv import load_dotenv After that, replace the code where you generate your client with this: load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) Test it with get_authenticated_user and you should be all set! Finished code main.py import asyncio import os from dotenv import load_dotenv from roblox import Client load_dotenv () client = Client ( os . getenv ( \"ROBLOXTOKEN\" )) async def main (): user = await client . get_authenticated_user () print ( \"ID:\" , user . id ) print ( \"Name:\" , user . name ) asyncio . get_event_loop () . run_until_complete ( main ())","title":"Using a .env file"},{"location":"tutorials/bases/","text":"In most cases, when sending requests to Roblox endpoints, only the ID of the item is required. For example, users.roblox.com/v1/users/{userId}/username-history only requires the user ID. Let's say you already have a user ID and you just want their username history, and you don't need other information like their name or display name. For example, this code sends 1 unnecessary request: user = await client . get_user ( 1 ) # we don't need this! async for username in user . username_history (): print ( username ) In this case, we already have their user ID. There's no reason to call get_user here. Instead, we can call get_base_user : user = client . get_base_user ( 1 ) async for username in user . username_history (): print ( username ) This code is functionally identical but won't send any unnecessary requests.","title":"Bases"},{"location":"tutorials/error-handling/","text":"Error handling \u00b6 You can import ro.py exceptions from the roblox.utilities.exceptions or just from the roblox library: from roblox.utilities.exceptions import InternalServerError from roblox import InternalServerError Client errors \u00b6 All of the Client.get_SINGULAR() methods, like get_user() and get_group() , raise exceptions when you pass an invalid input. Method Exception client.get_asset() AssetNotFound client.get_badge() BadgeNotFound client.get_group() GroupNotFound client.get_place() PlaceNotFound client.get_plugin() PluginNotFound client.get_universe() UniverseNotFound client.get_user() UserNotFound client.get_user_by_username() UserNotFound Here is an example of catching a UserNotFound error: username = \"InvalidUsername!!!\" try : user = await client . get_user_by_username ( username ) print ( \"ID:\" , user . id ) except UserNotFound : print ( \"Invalid username.\" ) All of these exceptions are subclasses of ItemNotFound . HTTP errors \u00b6 ro.py also raises HTTP errors when Roblox says something is wrong. For example, if we try to shout on a group that we don't have permissions on, Roblox stops us and returns a 401 Unauthorized error: group = await client . get_group ( 1 ) await group . update_shout ( \"Shout!\" ) When running this code, you will see an error message like this: roblox.utilities.exceptions.Unauthorized: 401 Unauthorized: https://groups.roblox.com/v1/groups/1/status. Errors: 0: Authorization has been denied for this request. Here is an example of catching a Unauthorized error: group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized : print ( \"Not allowed to shout.\" ) These are the different types of exceptions raised depending on the HTTP error Roblox returns: HTTP status code Exception 400 BadRequest 401 Unauthorized 403 Forbidden 429 TooManyRequests 500 InternalServerError All of these exceptions are subclasses of the HTTPException error. For other unrecognized error codes, ro.py will fallback to the default HTTPException . Getting more error information \u00b6 For all HTTP exceptions, ro.py exposes a response attribute so you can get the response information: group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized as exception : print ( \"Not allowed to shout.\" ) print ( \"URL:\" , exception . response . url ) Roblox also returns extra error data, which is what you see in our error messages. We can access this with the .errors attribute, which is a list of ResponseError : group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized as exception : print ( \"Not allowed to shout.\" ) if len ( exception . errors ) > 0 : error = exception . errors [ 0 ] print ( \"Reason:\" , error . message )","title":"Error Handling"},{"location":"tutorials/error-handling/#error-handling","text":"You can import ro.py exceptions from the roblox.utilities.exceptions or just from the roblox library: from roblox.utilities.exceptions import InternalServerError from roblox import InternalServerError","title":"Error handling"},{"location":"tutorials/error-handling/#client-errors","text":"All of the Client.get_SINGULAR() methods, like get_user() and get_group() , raise exceptions when you pass an invalid input. Method Exception client.get_asset() AssetNotFound client.get_badge() BadgeNotFound client.get_group() GroupNotFound client.get_place() PlaceNotFound client.get_plugin() PluginNotFound client.get_universe() UniverseNotFound client.get_user() UserNotFound client.get_user_by_username() UserNotFound Here is an example of catching a UserNotFound error: username = \"InvalidUsername!!!\" try : user = await client . get_user_by_username ( username ) print ( \"ID:\" , user . id ) except UserNotFound : print ( \"Invalid username.\" ) All of these exceptions are subclasses of ItemNotFound .","title":"Client errors"},{"location":"tutorials/error-handling/#http-errors","text":"ro.py also raises HTTP errors when Roblox says something is wrong. For example, if we try to shout on a group that we don't have permissions on, Roblox stops us and returns a 401 Unauthorized error: group = await client . get_group ( 1 ) await group . update_shout ( \"Shout!\" ) When running this code, you will see an error message like this: roblox.utilities.exceptions.Unauthorized: 401 Unauthorized: https://groups.roblox.com/v1/groups/1/status. Errors: 0: Authorization has been denied for this request. Here is an example of catching a Unauthorized error: group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized : print ( \"Not allowed to shout.\" ) These are the different types of exceptions raised depending on the HTTP error Roblox returns: HTTP status code Exception 400 BadRequest 401 Unauthorized 403 Forbidden 429 TooManyRequests 500 InternalServerError All of these exceptions are subclasses of the HTTPException error. For other unrecognized error codes, ro.py will fallback to the default HTTPException .","title":"HTTP errors"},{"location":"tutorials/error-handling/#getting-more-error-information","text":"For all HTTP exceptions, ro.py exposes a response attribute so you can get the response information: group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized as exception : print ( \"Not allowed to shout.\" ) print ( \"URL:\" , exception . response . url ) Roblox also returns extra error data, which is what you see in our error messages. We can access this with the .errors attribute, which is a list of ResponseError : group = await client . get_group ( 1 ) try : await group . update_shout ( \"Shout!\" ) print ( \"Shout updated.\" ) except Unauthorized as exception : print ( \"Not allowed to shout.\" ) if len ( exception . errors ) > 0 : error = exception . errors [ 0 ] print ( \"Reason:\" , error . message )","title":"Getting more error information"},{"location":"tutorials/extensions/","text":"Extensions \u00b6 ro.py-discord \u00b6 ro.py-discord is a library that connects ro.py to verification APIs like Bloxlink and RoVer, allowing you to easily create tools that use ro.py in a Discord context, like a Discord bot. ro.py-server \u00b6 ro.py-server is a FastAPI-based web server that implements core ro.py functionality and allows you to securely interact with Roblox without a proxy, CSRF handling, or CORS limitations. It also includes a module intended to be used inside of a Roblox game.","title":"Extensions"},{"location":"tutorials/extensions/#extensions","text":"","title":"Extensions"},{"location":"tutorials/extensions/#ropy-discord","text":"ro.py-discord is a library that connects ro.py to verification APIs like Bloxlink and RoVer, allowing you to easily create tools that use ro.py in a Discord context, like a Discord bot.","title":"ro.py-discord"},{"location":"tutorials/extensions/#ropy-server","text":"ro.py-server is a FastAPI-based web server that implements core ro.py functionality and allows you to securely interact with Roblox without a proxy, CSRF handling, or CORS limitations. It also includes a module intended to be used inside of a Roblox game.","title":"ro.py-server"},{"location":"tutorials/get-started/","text":"Get started \u00b6 At the beginning of every ro.py application is the client. The client represents a user's session on Roblox. To initialize a client, import it from the roblox module: main.py from roblox import Client client = Client () Great, we've got a client! But how can we use it? We start by calling await client.get_OBJECT() where OBJECT is a Roblox datatype, like a User, Group or Universe. But wait - if you tried to run code like this: main.py from roblox import Client client = Client () await client . get_user ( 1 ) You would get an error like this: File \"<input>\" , line 1 SyntaxError : 'await' outside function This may seem confusing - but this is intended design. To fix this, we need to wrap our code in an asynchronous function, and then run it with get_event_loop().run_until_complete , like so: main.py import asyncio from roblox import Client client = Client () async def main (): await client . get_user ( 1 ) asyncio . get_event_loop () . run_until_complete ( main ()) This is the basic structure of every ro.py application. Great, our code works - but it's not doing anything yet. Let's print out some information about this user by replacing the code in main() with this: user = await client . get_user ( 1 ) print ( \"Name:\" , user . name ) print ( \"Display Name:\" , user . display_name ) print ( \"Description:\" , user . description ) Great! We now have a program that prints out a user's name, display name, and description. This same basic concept works for other kinds of objects on Roblox, like groups: group = await client . get_group ( 1 ) print ( \"Name:\" , group . name ) print ( \"Description:\" , group . description ) But what if we want to send requests as if we are an actual, logged-in user browsing the site? For example, what if I wanted to change the group's shout? Because only users with permission to change the group shout can actually change it, we need to tell Roblox that we can change that shout by \"authenticating\".","title":"Get Started"},{"location":"tutorials/get-started/#get-started","text":"At the beginning of every ro.py application is the client. The client represents a user's session on Roblox. To initialize a client, import it from the roblox module: main.py from roblox import Client client = Client () Great, we've got a client! But how can we use it? We start by calling await client.get_OBJECT() where OBJECT is a Roblox datatype, like a User, Group or Universe. But wait - if you tried to run code like this: main.py from roblox import Client client = Client () await client . get_user ( 1 ) You would get an error like this: File \"<input>\" , line 1 SyntaxError : 'await' outside function This may seem confusing - but this is intended design. To fix this, we need to wrap our code in an asynchronous function, and then run it with get_event_loop().run_until_complete , like so: main.py import asyncio from roblox import Client client = Client () async def main (): await client . get_user ( 1 ) asyncio . get_event_loop () . run_until_complete ( main ()) This is the basic structure of every ro.py application. Great, our code works - but it's not doing anything yet. Let's print out some information about this user by replacing the code in main() with this: user = await client . get_user ( 1 ) print ( \"Name:\" , user . name ) print ( \"Display Name:\" , user . display_name ) print ( \"Description:\" , user . description ) Great! We now have a program that prints out a user's name, display name, and description. This same basic concept works for other kinds of objects on Roblox, like groups: group = await client . get_group ( 1 ) print ( \"Name:\" , group . name ) print ( \"Description:\" , group . description ) But what if we want to send requests as if we are an actual, logged-in user browsing the site? For example, what if I wanted to change the group's shout? Because only users with permission to change the group shout can actually change it, we need to tell Roblox that we can change that shout by \"authenticating\".","title":"Get started"},{"location":"tutorials/migrating/","text":"Migrating to v2.0 \u00b6 Changes \u00b6 The cache has been removed. When you call client.get_XYZ , you can guarantee that you'll always get a new object. Keep this in mind. The events system has been removed. The polling behavior was hard to maintain and is out of scope for this project. ro.py's gamepersistence system has been removed. It may be added in the future. ro.py's trade system has been removed. We have no plans to reimplement it. ro.py's SignalR-based notification system has been removed. It is out of scope for this project but may be added later as an extension. Client.filter_text() has been removed. It may be added back in the future. Client.get_game_by_place_id() and Client.get_game_by_universe_id() have been removed. Instead, use Client.get_place() and Client.get_universe() . The captcha system has been removed, along with methods that used it, including Client.user_login() and Client.get_captcha_metadata() . Client.secure_sign_out() has been removed. All singular Client methods, like get_user() , raise new errors. See Error handling . BaseGroup.get_member() now returns an abstract MemberRelationship representing the relationship between a group and a user. For this reason, it is no longer a coroutine. BaseGroup.get_member_by_username is still a coroutine. The thumbnail system has been rewritten. For this reason, BaseUser.thumbnails no longer exists and you should use Client.thumbnails or BaseXYZ.get_thumbnail methods. Client.get_self() is now Client.get_authenticated_user() . The way objects were structured in ro.py has changed. In the past, objects would be responsible for their own requests with an update method - now they take in data and parse it. If your code ever calls .update , please change it to instead grab the object again with Client.get_XYZ() .","title":"Migrating to v2.0"},{"location":"tutorials/migrating/#migrating-to-v20","text":"","title":"Migrating to v2.0"},{"location":"tutorials/migrating/#changes","text":"The cache has been removed. When you call client.get_XYZ , you can guarantee that you'll always get a new object. Keep this in mind. The events system has been removed. The polling behavior was hard to maintain and is out of scope for this project. ro.py's gamepersistence system has been removed. It may be added in the future. ro.py's trade system has been removed. We have no plans to reimplement it. ro.py's SignalR-based notification system has been removed. It is out of scope for this project but may be added later as an extension. Client.filter_text() has been removed. It may be added back in the future. Client.get_game_by_place_id() and Client.get_game_by_universe_id() have been removed. Instead, use Client.get_place() and Client.get_universe() . The captcha system has been removed, along with methods that used it, including Client.user_login() and Client.get_captcha_metadata() . Client.secure_sign_out() has been removed. All singular Client methods, like get_user() , raise new errors. See Error handling . BaseGroup.get_member() now returns an abstract MemberRelationship representing the relationship between a group and a user. For this reason, it is no longer a coroutine. BaseGroup.get_member_by_username is still a coroutine. The thumbnail system has been rewritten. For this reason, BaseUser.thumbnails no longer exists and you should use Client.thumbnails or BaseXYZ.get_thumbnail methods. Client.get_self() is now Client.get_authenticated_user() . The way objects were structured in ro.py has changed. In the past, objects would be responsible for their own requests with an update method - now they take in data and parse it. If your code ever calls .update , please change it to instead grab the object again with Client.get_XYZ() .","title":"Changes"},{"location":"tutorials/pagination/","text":"Pagination \u00b6 Certain Roblox endpoints are paginated. This means that going through their data is kind of like flipping through the pages of a book - you start at page 1 and then you can move forwards or backwards until you reach the start or the end. This can be annoying when all you want is \"every member in a group\" or \"the last 10 posts on a group wall\", so ro.py abstracts this away into a \"PageIterator\" that you can use to loop over your data. As an example, the Client.user_search() function takes in a keyword (like \"builderman\") and returns a PageIterator which you can loop through to get the search results. Looping through items \u00b6 A simple async for can loop through the data no problem: async for user in client . user_search ( \"builderman\" ): print ( user . name ) We can limit the amount of items returned using the max_items argument: async for user in client . user_search ( \"builderman\" , max_items = 10 ): print ( user . name ) We can also use .items() : async for user in client . user_search ( \"builderman\" ) . items ( 10 ): print ( user . name ) Looping through pages \u00b6 If we want to instead loop through each page , we can use .pages() : async for page in client . user_search ( \"builderman\" ) . pages (): print ( \"Page:\" ) for user in page : print ( f \" \\t { user . name } \" ) The size of this page depends on the value of the page_size argument. It can be either 10, 25, 50 or 100. Higher values mean you send less requests to get the same amount of data, however these requests will usually take longer. async for page in client . user_search ( \"builderman\" , page_size = 100 ) . pages (): print ( f \"Page with { len ( page ) } items:\" ) for user in page : print ( f \" \\t { user . name } \" ) Flattening into a list \u00b6 If we want to turn all of this data into one list, we can use flatten() . Be careful, as this isn't ideal for large sets of data and may use more memory. Because we turn this iterator into a list, we can use a normal for loop now: for user in await client . user_search ( \"boatbomber\" ) . flatten (): print ( user . name ) We can limit the amount of items in this list using the max_items argument: for user in await client . user_search ( \"builderman\" , max_items = 10 ) . flatten (): print ( user . name ) We can also pass the value directly to .flatten() : for user in await client . user_search ( \"builderman\" ) . flatten ( 10 ): print ( user . name ) As the result is just a normal list, we can store it in a variable: users = await client . user_search ( \"builderman\" ) . flatten ( 10 ) print ( f \" { len ( users ) } items:\" ) for user in users : print ( f \" \\t { user . name } \" ) But what about other things? \u00b6 Iterators aren't just used for searching for users. There are also various other things that use this same concept, including group wall posts. In this example, we get the first 10 posts on the \"Official Group of Roblox\" group: group = await client . get_group ( 1200769 ) async for post in group . get_wall_posts ( max_items = 10 ): print ( post ) If instead we want the last 10 posts (as in the most recent posts) we can use the sort_order argument: group = await client . get_group ( 1200769 ) async for post in group . get_wall_posts ( sort_order = SortOrder . Descending , max_items = 10 ): print ( post ) The SortOrder object can be imported like this: from roblox.utilities.iterators import SortOrder","title":"Pagination"},{"location":"tutorials/pagination/#pagination","text":"Certain Roblox endpoints are paginated. This means that going through their data is kind of like flipping through the pages of a book - you start at page 1 and then you can move forwards or backwards until you reach the start or the end. This can be annoying when all you want is \"every member in a group\" or \"the last 10 posts on a group wall\", so ro.py abstracts this away into a \"PageIterator\" that you can use to loop over your data. As an example, the Client.user_search() function takes in a keyword (like \"builderman\") and returns a PageIterator which you can loop through to get the search results.","title":"Pagination"},{"location":"tutorials/pagination/#looping-through-items","text":"A simple async for can loop through the data no problem: async for user in client . user_search ( \"builderman\" ): print ( user . name ) We can limit the amount of items returned using the max_items argument: async for user in client . user_search ( \"builderman\" , max_items = 10 ): print ( user . name ) We can also use .items() : async for user in client . user_search ( \"builderman\" ) . items ( 10 ): print ( user . name )","title":"Looping through items"},{"location":"tutorials/pagination/#looping-through-pages","text":"If we want to instead loop through each page , we can use .pages() : async for page in client . user_search ( \"builderman\" ) . pages (): print ( \"Page:\" ) for user in page : print ( f \" \\t { user . name } \" ) The size of this page depends on the value of the page_size argument. It can be either 10, 25, 50 or 100. Higher values mean you send less requests to get the same amount of data, however these requests will usually take longer. async for page in client . user_search ( \"builderman\" , page_size = 100 ) . pages (): print ( f \"Page with { len ( page ) } items:\" ) for user in page : print ( f \" \\t { user . name } \" )","title":"Looping through pages"},{"location":"tutorials/pagination/#flattening-into-a-list","text":"If we want to turn all of this data into one list, we can use flatten() . Be careful, as this isn't ideal for large sets of data and may use more memory. Because we turn this iterator into a list, we can use a normal for loop now: for user in await client . user_search ( \"boatbomber\" ) . flatten (): print ( user . name ) We can limit the amount of items in this list using the max_items argument: for user in await client . user_search ( \"builderman\" , max_items = 10 ) . flatten (): print ( user . name ) We can also pass the value directly to .flatten() : for user in await client . user_search ( \"builderman\" ) . flatten ( 10 ): print ( user . name ) As the result is just a normal list, we can store it in a variable: users = await client . user_search ( \"builderman\" ) . flatten ( 10 ) print ( f \" { len ( users ) } items:\" ) for user in users : print ( f \" \\t { user . name } \" )","title":"Flattening into a list"},{"location":"tutorials/pagination/#but-what-about-other-things","text":"Iterators aren't just used for searching for users. There are also various other things that use this same concept, including group wall posts. In this example, we get the first 10 posts on the \"Official Group of Roblox\" group: group = await client . get_group ( 1200769 ) async for post in group . get_wall_posts ( max_items = 10 ): print ( post ) If instead we want the last 10 posts (as in the most recent posts) we can use the sort_order argument: group = await client . get_group ( 1200769 ) async for post in group . get_wall_posts ( sort_order = SortOrder . Descending , max_items = 10 ): print ( post ) The SortOrder object can be imported like this: from roblox.utilities.iterators import SortOrder","title":"But what about other things?"},{"location":"tutorials/roblosecurity/","text":"ROBLOSECURITY \u00b6 When you log in on the Roblox website, you create a new session with a special identifier linked to it, and that token is stored on your computer as a cookie. Every single time your computer asks Roblox to do anything - for example, \"give me the name of this user\" - your computer also gives this token to Roblox, and it can look and see if that token is valid. Let's say you're asking Roblox to give you a list of your friends. It'll look at that token and know who you are, and can use that to give you your friends list. When you log out, that token is invalidated. Even if the client holds on to the token, it won't be valid after logging out. This token is called the .ROBLOSECURITY token and you will need one to do anything that you need to be logged in to do on Roblox, including: - getting information about yourself (name, description, ID, etc) - changing avatar - getting friends list - playing games Danger You may have heard of this token before and have been told that you should never, under any circumstances, share this token with anyone - and this is true! This token does give an attacker access to your Roblox account. However, this doesn't mean they gain access to everything - over time, more and more things are being locked behind other verification methods, like 2-step verification. We recommend using an alternate account with only the permissions it needs to limit the destruction an attacker can do. Always enable 2-step verification! The best way to authenticate your ro.py application is to log in to Roblox on the website and then taking the .ROBLOSECURITY token from there. Warning Pressing the \"Log out\" button on the Roblox website invalidates your token, so you should not press this button after grabbing your token. Instead, consider using a private or incognito window and closing it when you are done. To grab your .ROBLOSECURITY cookie, log into your account on the Roblox website and follow the instructions below. Chrome/Chromium-based Firefox You can access the cookie by going to https://www.roblox.com/ , pressing the padlock icon next to the URL in your browser, clicking the arrow next to roblox.com , opening up the \"Cookies\" folder, clicking \".ROBLOSECURITY\", clicking on the \"Content\" text once, pressing Ctrl + A , and then pressing Ctrl + C (make sure not to double-click this field as you won't select the entire value!) Alternatively, you can access the cookie by going to https://www.roblox.com/ , pressing Ctrl + Shift + I to access the Developer Tools, navigating to the \"Application\" tab, opening up the arrow next to \"Cookies\" on the sidebar on the left, clicking the https://www.roblox.com item underneath the Cookies button, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C . You can access the cookie by going to https://www.roblox.com/ and pressing Shift + F9 , pressing the \"Storage\" tab button on the top, opening up the \"Cookies\" section in the sidebar on the left, clicking the https://www.roblox.com item underneath it, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C .","title":"ROBLOSECURITY"},{"location":"tutorials/roblosecurity/#roblosecurity","text":"When you log in on the Roblox website, you create a new session with a special identifier linked to it, and that token is stored on your computer as a cookie. Every single time your computer asks Roblox to do anything - for example, \"give me the name of this user\" - your computer also gives this token to Roblox, and it can look and see if that token is valid. Let's say you're asking Roblox to give you a list of your friends. It'll look at that token and know who you are, and can use that to give you your friends list. When you log out, that token is invalidated. Even if the client holds on to the token, it won't be valid after logging out. This token is called the .ROBLOSECURITY token and you will need one to do anything that you need to be logged in to do on Roblox, including: - getting information about yourself (name, description, ID, etc) - changing avatar - getting friends list - playing games Danger You may have heard of this token before and have been told that you should never, under any circumstances, share this token with anyone - and this is true! This token does give an attacker access to your Roblox account. However, this doesn't mean they gain access to everything - over time, more and more things are being locked behind other verification methods, like 2-step verification. We recommend using an alternate account with only the permissions it needs to limit the destruction an attacker can do. Always enable 2-step verification! The best way to authenticate your ro.py application is to log in to Roblox on the website and then taking the .ROBLOSECURITY token from there. Warning Pressing the \"Log out\" button on the Roblox website invalidates your token, so you should not press this button after grabbing your token. Instead, consider using a private or incognito window and closing it when you are done. To grab your .ROBLOSECURITY cookie, log into your account on the Roblox website and follow the instructions below. Chrome/Chromium-based Firefox You can access the cookie by going to https://www.roblox.com/ , pressing the padlock icon next to the URL in your browser, clicking the arrow next to roblox.com , opening up the \"Cookies\" folder, clicking \".ROBLOSECURITY\", clicking on the \"Content\" text once, pressing Ctrl + A , and then pressing Ctrl + C (make sure not to double-click this field as you won't select the entire value!) Alternatively, you can access the cookie by going to https://www.roblox.com/ , pressing Ctrl + Shift + I to access the Developer Tools, navigating to the \"Application\" tab, opening up the arrow next to \"Cookies\" on the sidebar on the left, clicking the https://www.roblox.com item underneath the Cookies button, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C . You can access the cookie by going to https://www.roblox.com/ and pressing Shift + F9 , pressing the \"Storage\" tab button on the top, opening up the \"Cookies\" section in the sidebar on the left, clicking the https://www.roblox.com item underneath it, and then copying the .ROBLOSECURITY token by double-clicking on the value and then hitting Ctrl + C .","title":"ROBLOSECURITY"},{"location":"tutorials/thumbnails/","text":"Thumbnails \u00b6 The client.thumbnails attribute is a ThumbnailProvider object which you can use to generate thumbnails. Below is a list of item types on Roblox and methods you can use to generate their thumbnails. Users \u00b6 To generate avatar thumbnails, use the get_user_avatar_thumbnails() method. The type parameter is an AvatarThumbnailType object, which you can import from roblox or from roblox.thumbnails . Do note that the size parameter only allows certain sizes - see the docs for more details. user = await client . get_user ( 2067807455 ) user_thumbnails = await client . thumbnails . get_user_avatar_thumbnails ( users = [ user ], type = AvatarThumbnailType . full_body , size = ( 420 , 420 ) ) if len ( user_thumbnails ) > 0 : user_thumbnail = user_thumbnails [ 0 ] print ( user_thumbnail . image_url ) thumbnails is a list of Thumbnail objects. We can read the first thumbnail (if it exists) and print out its URL. 3D thumbnails \u00b6 To generate 3D avatar thumbnails, use the get_user_avatar_thumbnails_3d() method and call the get_3d_data() method on the thumbnail to get 3d-related data. user = await client . get_user ( 1 ) user_3d_thumbnail = await client . thumbnails . get_user_avatar_thumbnail_3d ( user ) user_3d_data = await user_3d_thumbnail . get_3d_data () print ( \"OBJ:\" , user_3d_data . obj . get_url ()) print ( \"MTL:\" , user_3d_data . mtl . get_url ()) print ( \"Textures:\" ) for texture in user_3d_data . textures : print ( texture . get_url ()) threed_data is a ThreeDThumbnail object. Groups \u00b6 To generate group icons, use the get_group_icons() method. group = await client . get_group ( 9695397 ) group_icons = await client . thumbnails . get_group_icons ( groups = [ group ], size = ( 150 , 150 ) ) if len ( group_icons ) > 0 : group_icon = group_icons [ 0 ] print ( group_icon . image_url ) Assets \u00b6 To generate asset thumbnails, use the get_asset_thumbnails() method. asset = await client . get_asset ( 8100249026 ) asset_thumbnails = await client . thumbnails . get_asset_thumbnails ( assets = [ asset ], size = ( 420 , 420 ) ) if len ( asset_thumbnails ) > 0 : asset_thumbnail = asset_thumbnails [ 0 ] print ( asset_thumbnail . image_url ) 3D thumbnails \u00b6 To generate 3D asset thumbnails, use the get_asset_thumbnail_3d() method and and call the get_3d_data() method on the thumbnail to get 3d-related data. Do note that you can only generate 3D thumbnails for \"catalog-type\" assets, like hats. asset = await client . get_asset ( 151784320 ) asset_3d_thumbnail = await client . thumbnails . get_asset_thumbnail_3d ( asset ) asset_3d_data = await asset_3d_thumbnail . get_3d_data () print ( \"OBJ:\" , asset_3d_data . obj . get_url ()) print ( \"MTL:\" , asset_3d_data . mtl . get_url ()) print ( \"Textures:\" ) for texture in asset_3d_data . textures : print ( texture . get_url ()) Places \u00b6 To generate place icons, use the get_place_icons() method. place = await client . get_place ( 8100260845 ) place_thumbnails = await client . thumbnails . get_place_icons ( places = [ place ], size = ( 512 , 512 ) ) if len ( place_thumbnails ) > 0 : place_thumbnail = place_thumbnails [ 0 ] print ( place_thumbnail . image_url ) Universes \u00b6 Icons \u00b6 To generate universe icons, use the get_universe_icons() method. universe = await client . get_universe ( 3118067569 ) universe_icons = await client . thumbnails . get_universe_icons ( universes = [ universe ], size = ( 512 , 512 ) ) if len ( universe_icons ) > 0 : universe_icon = universe_icons [ 0 ] print ( universe_icon . image_url ) Thumbnails \u00b6 To generate universe thumbnails, use the get_universe_thumbnails() method. Because each universe can have multiple thumbnails, this method behaves differently. universe = await client . get_universe ( 3118067569 ) universes_thumbnails = await client . thumbnails . get_universe_thumbnails ( universes = [ universe ], size = ( 768 , 432 ) ) if len ( universes_thumbnails ) > 0 : universe_thumbnails = universes_thumbnails [ 0 ] for universe_thumbnail in universe_thumbnails . thumbnails : print ( universe_thumbnail . image_url ) Badges \u00b6 To generate badge icons, use the get_badge_icons() method. badge = await client . get_badge ( 2124867793 ) badge_icons = await client . thumbnails . get_badge_icons ( badges = [ badge ], size = ( 150 , 150 ) ) if len ( badge_icons ) > 0 : icon = badge_icons [ 0 ] print ( icon . image_url ) Gamepasses \u00b6 To generate gamepass icons, use the get_gamepass_icons() method. This example uses get_base_gamepass() because there is no get_gamepass method. gamepass = client . get_base_gamepass ( 25421830 ) gamepass_icons = await client . thumbnails . get_gamepass_icons ( gamepasses = [ gamepass ], size = ( 150 , 150 ) ) if len ( gamepass_icons ) > 0 : icon = gamepass_icons [ 0 ] print ( icon . image_url )","title":"Thumbnails"},{"location":"tutorials/thumbnails/#thumbnails","text":"The client.thumbnails attribute is a ThumbnailProvider object which you can use to generate thumbnails. Below is a list of item types on Roblox and methods you can use to generate their thumbnails.","title":"Thumbnails"},{"location":"tutorials/thumbnails/#users","text":"To generate avatar thumbnails, use the get_user_avatar_thumbnails() method. The type parameter is an AvatarThumbnailType object, which you can import from roblox or from roblox.thumbnails . Do note that the size parameter only allows certain sizes - see the docs for more details. user = await client . get_user ( 2067807455 ) user_thumbnails = await client . thumbnails . get_user_avatar_thumbnails ( users = [ user ], type = AvatarThumbnailType . full_body , size = ( 420 , 420 ) ) if len ( user_thumbnails ) > 0 : user_thumbnail = user_thumbnails [ 0 ] print ( user_thumbnail . image_url ) thumbnails is a list of Thumbnail objects. We can read the first thumbnail (if it exists) and print out its URL.","title":"Users"},{"location":"tutorials/thumbnails/#3d-thumbnails","text":"To generate 3D avatar thumbnails, use the get_user_avatar_thumbnails_3d() method and call the get_3d_data() method on the thumbnail to get 3d-related data. user = await client . get_user ( 1 ) user_3d_thumbnail = await client . thumbnails . get_user_avatar_thumbnail_3d ( user ) user_3d_data = await user_3d_thumbnail . get_3d_data () print ( \"OBJ:\" , user_3d_data . obj . get_url ()) print ( \"MTL:\" , user_3d_data . mtl . get_url ()) print ( \"Textures:\" ) for texture in user_3d_data . textures : print ( texture . get_url ()) threed_data is a ThreeDThumbnail object.","title":"3D thumbnails"},{"location":"tutorials/thumbnails/#groups","text":"To generate group icons, use the get_group_icons() method. group = await client . get_group ( 9695397 ) group_icons = await client . thumbnails . get_group_icons ( groups = [ group ], size = ( 150 , 150 ) ) if len ( group_icons ) > 0 : group_icon = group_icons [ 0 ] print ( group_icon . image_url )","title":"Groups"},{"location":"tutorials/thumbnails/#assets","text":"To generate asset thumbnails, use the get_asset_thumbnails() method. asset = await client . get_asset ( 8100249026 ) asset_thumbnails = await client . thumbnails . get_asset_thumbnails ( assets = [ asset ], size = ( 420 , 420 ) ) if len ( asset_thumbnails ) > 0 : asset_thumbnail = asset_thumbnails [ 0 ] print ( asset_thumbnail . image_url )","title":"Assets"},{"location":"tutorials/thumbnails/#3d-thumbnails_1","text":"To generate 3D asset thumbnails, use the get_asset_thumbnail_3d() method and and call the get_3d_data() method on the thumbnail to get 3d-related data. Do note that you can only generate 3D thumbnails for \"catalog-type\" assets, like hats. asset = await client . get_asset ( 151784320 ) asset_3d_thumbnail = await client . thumbnails . get_asset_thumbnail_3d ( asset ) asset_3d_data = await asset_3d_thumbnail . get_3d_data () print ( \"OBJ:\" , asset_3d_data . obj . get_url ()) print ( \"MTL:\" , asset_3d_data . mtl . get_url ()) print ( \"Textures:\" ) for texture in asset_3d_data . textures : print ( texture . get_url ())","title":"3D thumbnails"},{"location":"tutorials/thumbnails/#places","text":"To generate place icons, use the get_place_icons() method. place = await client . get_place ( 8100260845 ) place_thumbnails = await client . thumbnails . get_place_icons ( places = [ place ], size = ( 512 , 512 ) ) if len ( place_thumbnails ) > 0 : place_thumbnail = place_thumbnails [ 0 ] print ( place_thumbnail . image_url )","title":"Places"},{"location":"tutorials/thumbnails/#universes","text":"","title":"Universes"},{"location":"tutorials/thumbnails/#icons","text":"To generate universe icons, use the get_universe_icons() method. universe = await client . get_universe ( 3118067569 ) universe_icons = await client . thumbnails . get_universe_icons ( universes = [ universe ], size = ( 512 , 512 ) ) if len ( universe_icons ) > 0 : universe_icon = universe_icons [ 0 ] print ( universe_icon . image_url )","title":"Icons"},{"location":"tutorials/thumbnails/#thumbnails_1","text":"To generate universe thumbnails, use the get_universe_thumbnails() method. Because each universe can have multiple thumbnails, this method behaves differently. universe = await client . get_universe ( 3118067569 ) universes_thumbnails = await client . thumbnails . get_universe_thumbnails ( universes = [ universe ], size = ( 768 , 432 ) ) if len ( universes_thumbnails ) > 0 : universe_thumbnails = universes_thumbnails [ 0 ] for universe_thumbnail in universe_thumbnails . thumbnails : print ( universe_thumbnail . image_url )","title":"Thumbnails"},{"location":"tutorials/thumbnails/#badges","text":"To generate badge icons, use the get_badge_icons() method. badge = await client . get_badge ( 2124867793 ) badge_icons = await client . thumbnails . get_badge_icons ( badges = [ badge ], size = ( 150 , 150 ) ) if len ( badge_icons ) > 0 : icon = badge_icons [ 0 ] print ( icon . image_url )","title":"Badges"},{"location":"tutorials/thumbnails/#gamepasses","text":"To generate gamepass icons, use the get_gamepass_icons() method. This example uses get_base_gamepass() because there is no get_gamepass method. gamepass = client . get_base_gamepass ( 25421830 ) gamepass_icons = await client . thumbnails . get_gamepass_icons ( gamepasses = [ gamepass ], size = ( 150 , 150 ) ) if len ( gamepass_icons ) > 0 : icon = gamepass_icons [ 0 ] print ( icon . image_url )","title":"Gamepasses"}]}